STRSTELE_01:
0000                          BEGIN
0003                          GoMap(03, E0, 03, 03)
001E                          RETURN

STRSTELE_02:
0000                          BEGIN
0003                          GoMap(02, 8D, 01, 05)
001E                          RETURN

PLATFMUP_03:
0000                          BEGIN
0003                          GoMap(03, B4, 06, 02)
001E                          RETURN

TELPORTA_04:
0000                          BEGIN
0003                          GoMap(01, 68, 03, 01)
001E                          RETURN

TELEPORT_05:
0000                          BEGIN
0003                          GoMap(02, 24, 03, 03)
001E                          RETURN

TELPORTC_06:
0000                          BEGIN
0003                          GoMap(03, AF, 02, 05)
001E                          RETURN

TRAPDORA_07:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(03FC) = You found a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AC
0085                          GoMap(00, 89, 02, 05)
009F                          ShowMessage(0412) = You fall through a trapdoor.
00AC                          RETURN

TRAPDORB_08:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(042F) = You spot a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(01, 8C, 02, 05)
00A0                          ShowMessage(0444) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORC_09:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(0461) = You detect a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(03, 91, 02, 05)
00A0                          ShowMessage(0478) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORD_0A:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(0495) = You escape a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(03, 9D, 02, 05)
00A0                          ShowMessage(04AC) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORE_0B:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(04C9) = You notice a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(03, AB, 02, 05)
00A0                          ShowMessage(04E0) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORF_0C:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(04FD) = There is a trapdoor in the floor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(02, BA, 02, 05)
00A0                          ShowMessage(051F) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORG_0D:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(053C) = You discover a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(01, BF, 02, 05)
00A0                          ShowMessage(0555) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORH_0E:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(0572) = You detect a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(02, CA, 02, 05)
00A0                          ShowMessage(0589) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORI_0F:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(05A6) = You spot a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(01, D6, 02, 05)
00A0                          ShowMessage(05BB) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORJ_10:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(05D8) = You detect a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(03, D9, 02, 05)
00A0                          ShowMessage(05EF) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORK_11:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(060C) = A trapdoor is in this room.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(01, EC, 02, 05)
00A0                          ShowMessage(0628) = You fall through a trapdoor.
00AD                          RETURN

TRAPDORL_12:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(0645) = You sidestep a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AC
0085                          GoMap(00, F4, 02, 05)
009F                          ShowMessage(065E) = You fall through a trapdoor.
00AC                          RETURN

TRAPDORM_13:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 0062
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 0062
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 0062
0039                          ax = UsedItem(BE, BE)
004C                          If (result.notequal) value jump to 0062
004E                          ax = CheckState2(00, 01)
0060                          If (result.equal) value jump to 0085
0062                          ShowMessage(067B) = You avoid a trapdoor.
006F                          SetState(00, 01, 01)
0083                          Jump to 00AD
0085                          GoMap(02, FD, 02, 05)
00A0                          ShowMessage(0691) = You fall through a trapdoor.
00AD                          RETURN

LKPKDORA_14:
0000                          BEGIN
0003                          ax = UsedItem(C1, C4)
0016                          If (result.notequal) value jump to 0029
0018                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0024                          compare(ax, 0006)
0027                          If (result.lessthan) jump to 0074
0029                          Push(01)
002D                          ax = SetExitability(ax) // ax is usually 0 following equality check
0034                          Push(ax)
0035                          ax = GetNextTile()
003C                          Push(ax)
003D                          Move(stk[0], stk[1], stk[2])
0047                          ax = SetExitability(ax) // ax is usually 0 following equality check
004E                          Push(ax)
004F                          ax = GetNextTile()
0056                          Push(ax)
0057                          Push(01)
005B                          SetUnblocked()
0065                          ShowMessage(06AE) = You soon have the door unlocked.
0072                          Jump to 009E
0074                          Push(00)
0077                          ax = SetExitability(ax) // ax is usually 0 following equality check
007E                          Push(ax)
007F                          ax = GetNextTile()
0086                          Push(ax)
0087                          Move(stk[0], stk[1], stk[2])
0091                          ShowMessage(06CF) = The door is locked.
009E                          RETURN

LKPKDORB_15:
0000                          BEGIN
0003                          ax = UsedItem(C2, C4)
0016                          If (result.notequal) value jump to 0029
0018                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0024                          compare(ax, 0007)
0027                          If (result.lessthan) jump to 0074
0029                          Push(01)
002D                          ax = SetExitability(ax) // ax is usually 0 following equality check
0034                          Push(ax)
0035                          ax = GetNextTile()
003C                          Push(ax)
003D                          Move(stk[0], stk[1], stk[2])
0047                          ax = SetExitability(ax) // ax is usually 0 following equality check
004E                          Push(ax)
004F                          ax = GetNextTile()
0056                          Push(ax)
0057                          Push(01)
005B                          SetUnblocked()
0065                          ShowMessage(06E3) = Your aptitude at opening locks pays off.
0072                          Jump to 009E
0074                          Push(00)
0077                          ax = SetExitability(ax) // ax is usually 0 following equality check
007E                          Push(ax)
007F                          ax = GetNextTile()
0086                          Push(ax)
0087                          Move(stk[0], stk[1], stk[2])
0091                          ShowMessage(070C) = The door is locked.
009E                          RETURN

LKPKDORC_16:
0000                          BEGIN
0003                          ax = UsedItem(C3, C4)
0016                          If (result.notequal) value jump to 0029
0018                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0024                          compare(ax, 0009)
0027                          If (result.lessthan) jump to 0074
0029                          Push(01)
002D                          ax = SetExitability(ax) // ax is usually 0 following equality check
0034                          Push(ax)
0035                          ax = GetNextTile()
003C                          Push(ax)
003D                          Move(stk[0], stk[1], stk[2])
0047                          ax = SetExitability(ax) // ax is usually 0 following equality check
004E                          Push(ax)
004F                          ax = GetNextTile()
0056                          Push(ax)
0057                          Push(01)
005B                          SetUnblocked()
0065                          ShowMessage(0720) = You succeed at picking the door lock.
0072                          Jump to 009E
0074                          Push(00)
0077                          ax = SetExitability(ax) // ax is usually 0 following equality check
007E                          Push(ax)
007F                          ax = GetNextTile()
0086                          Push(ax)
0087                          Move(stk[0], stk[1], stk[2])
0091                          ShowMessage(0746) = The door is locked.
009E                          RETURN

KEYDOORA_17:
0000                          BEGIN
0003                          ax = UsedItem(C3, C4)
0016                          If (result.notequal) value jump to 003E
0018                          ax = UsedItem(E1, E1)
002B                          If (result.notequal) value jump to 003E
002D                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0039                          compare(ax, 000A)
003C                          If (result.lessthan) jump to 0089
003E                          Push(01)
0042                          ax = SetExitability(ax) // ax is usually 0 following equality check
0049                          Push(ax)
004A                          ax = GetNextTile()
0051                          Push(ax)
0052                          Move(stk[0], stk[1], stk[2])
005C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0063                          Push(ax)
0064                          ax = GetNextTile()
006B                          Push(ax)
006C                          Push(01)
0070                          SetUnblocked()
007A                          ShowMessage(075A) = The door lock is no match for your skills.
0087                          Jump to 00B3
0089                          Push(00)
008C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0093                          Push(ax)
0094                          ax = GetNextTile()
009B                          Push(ax)
009C                          Move(stk[0], stk[1], stk[2])
00A6                          ShowMessage(0785) = The door is locked.
00B3                          RETURN

KEYDOORB_18:
0000                          BEGIN
0003                          ax = UsedItem(C3, C4)
0016                          If (result.notequal) value jump to 003E
0018                          ax = UsedItem(E1, E1)
002B                          If (result.notequal) value jump to 003E
002D                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0039                          compare(ax, 000B)
003C                          If (result.lessthan) jump to 0089
003E                          Push(01)
0042                          ax = SetExitability(ax) // ax is usually 0 following equality check
0049                          Push(ax)
004A                          ax = GetNextTile()
0051                          Push(ax)
0052                          Move(stk[0], stk[1], stk[2])
005C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0063                          Push(ax)
0064                          ax = GetNextTile()
006B                          Push(ax)
006C                          Push(01)
0070                          SetUnblocked()
007A                          ShowMessage(0799) = You deftly trip the door lock.
0087                          Jump to 00B3
0089                          Push(00)
008C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0093                          Push(ax)
0094                          ax = GetNextTile()
009B                          Push(ax)
009C                          Move(stk[0], stk[1], stk[2])
00A6                          ShowMessage(07B8) = The door is locked.
00B3                          RETURN

KEYDOORC_19:
0000                          BEGIN
0003                          ax = UsedItem(C4, C4)
0016                          If (result.notequal) value jump to 003E
0018                          ax = UsedItem(E1, E1)
002B                          If (result.notequal) value jump to 003E
002D                          ax = UsedSkill(0E) // returns 0 if did not use, compares to 2nd op if did use
0039                          compare(ax, 000C)
003C                          If (result.lessthan) jump to 0089
003E                          Push(01)
0042                          ax = SetExitability(ax) // ax is usually 0 following equality check
0049                          Push(ax)
004A                          ax = GetNextTile()
0051                          Push(ax)
0052                          Move(stk[0], stk[1], stk[2])
005C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0063                          Push(ax)
0064                          ax = GetNextTile()
006B                          Push(ax)
006C                          Push(01)
0070                          SetUnblocked()
007A                          ShowMessage(07CC) = You quickly have the door open.
0087                          Jump to 00B3
0089                          Push(00)
008C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0093                          Push(ax)
0094                          ax = GetNextTile()
009B                          Push(ax)
009C                          Move(stk[0], stk[1], stk[2])
00A6                          ShowMessage(07EC) = The door is locked.
00B3                          RETURN

STRDOORA_1A:
0000                          BEGIN
0003                          ax = CheckStrength()
000F                          compare(ax, 000E)
0012                          If (result.lessthan) jump to 005F
0014                          ShowMessage(0800) = You push on the door and open it.
0021                          ax = SetExitability(ax) // ax is usually 0 following equality check
0028                          Push(ax)
0029                          ax = GetNextTile()
0030                          Push(ax)
0031                          Push(01)
0035                          SetUnblocked()
003F                          Push(01)
0043                          ax = SetExitability(ax) // ax is usually 0 following equality check
004A                          Push(ax)
004B                          ax = GetNextTile()
0052                          Push(ax)
0053                          Move(stk[0], stk[1], stk[2])
005D                          Jump to 0089
005F                          ShowMessage(0822) = The door is stuck shut.
006C                          Push(00)
006F                          ax = SetExitability(ax) // ax is usually 0 following equality check
0076                          Push(ax)
0077                          ax = GetNextTile()
007E                          Push(ax)
007F                          Move(stk[0], stk[1], stk[2])
0089                          RETURN

STRDOORB_1B:
0000                          BEGIN
0003                          ax = CheckStrength()
000F                          compare(ax, 0010)
0012                          If (result.lessthan) jump to 005F
0014                          ShowMessage(083A) = You force the door open by muscle power.
0021                          ax = SetExitability(ax) // ax is usually 0 following equality check
0028                          Push(ax)
0029                          ax = GetNextTile()
0030                          Push(ax)
0031                          Push(01)
0035                          SetUnblocked()
003F                          Push(01)
0043                          ax = SetExitability(ax) // ax is usually 0 following equality check
004A                          Push(ax)
004B                          ax = GetNextTile()
0052                          Push(ax)
0053                          Move(stk[0], stk[1], stk[2])
005D                          Jump to 0089
005F                          ShowMessage(0863) = The door is stuck shut.
006C                          Push(00)
006F                          ax = SetExitability(ax) // ax is usually 0 following equality check
0076                          Push(ax)
0077                          ax = GetNextTile()
007E                          Push(ax)
007F                          Move(stk[0], stk[1], stk[2])
0089                          RETURN

ITMDOORA_1C:
0000                          BEGIN
0003                          ax = UsedItem(E1, E1)
0016                          If (result.equal) value jump to 0063
0018                          Push(01)
001C                          ax = SetExitability(ax) // ax is usually 0 following equality check
0023                          Push(ax)
0024                          ax = GetNextTile()
002B                          Push(ax)
002C                          Move(stk[0], stk[1], stk[2])
0036                          ax = SetExitability(ax) // ax is usually 0 following equality check
003D                          Push(ax)
003E                          ax = GetNextTile()
0045                          Push(ax)
0046                          Push(01)
004A                          SetUnblocked()
0054                          ShowMessage(087B) = The Domicile Key opens the door!
0061                          Jump to 008D
0063                          Push(00)
0066                          ax = SetExitability(ax) // ax is usually 0 following equality check
006D                          Push(ax)
006E                          ax = GetNextTile()
0075                          Push(ax)
0076                          Move(stk[0], stk[1], stk[2])
0080                          ShowMessage(089C) = The door is locked.
008D                          RETURN

DETCTDOR_1D:
0000                          BEGIN
0003                          ax = UsedSkill(0D) // returns 0 if did not use, compares to 2nd op if did use
000F                          compare(ax, 000A)
0012                          If (result.greaterthan or result.equal) jump to 004E
0014                          ax = UsedSpell(17) // returns 0 if did not use on map, level if used
0020                          RefreshCompareFlags(ax)
0022                          If (result.notequal) value jump to 004E
0024                          ax = UsedItem(A2, A2)
0037                          If (result.notequal) value jump to 004E
0039                          ax = UsedItem(BE, BE)
004C                          If (result.equal) value jump to 0099
004E                          ShowMessage(08B0) = You have spotted a secret door!
005B                          ax = SetExitability(ax) // ax is usually 0 following equality check
0062                          Push(ax)
0063                          ax = GetNextTile()
006A                          Push(ax)
006B                          Push(01)
006F                          SetUnblocked()
0079                          Push(01)
007D                          ax = SetExitability(ax) // ax is usually 0 following equality check
0084                          Push(ax)
0085                          ax = GetNextTile()
008C                          Push(ax)
008D                          Move(stk[0], stk[1], stk[2])
0097                          Jump to 00B6
0099                          Push(00)
009C                          ax = SetExitability(ax) // ax is usually 0 following equality check
00A3                          Push(ax)
00A4                          ax = GetNextTile()
00AB                          Push(ax)
00AC                          Move(stk[0], stk[1], stk[2])
00B6                          RETURN

LFTROTA_1E:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00C9
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00C9
003F                          bx = bx * 2
0041 2E FF A7 CB 10           jmp word [cs:bx+0x10cb]
0046                          Push(00)
0049                          ax = GetNextTile()
0050                          GoMap(stk[0], ax, 01, 04)
0064                          Jump to 00C9
0066                          Push(02)
006A                          ax = GetNextTile()
0071                          GoMap(stk[0], ax, 01, 04)
0085                          Jump to 00C9
0087                          Push(03)
008B                          ax = GetNextTile()
0092                          GoMap(stk[0], ax, 01, 04)
00A6                          Jump to 00C9
00A8                          Push(01)
00AC                          ax = GetNextTile()
00B3                          GoMap(stk[0], ax, 01, 04)
00C7                          Jump to 00C9
00C9                          RETURN
00CB A8 10                    test al, 0x10
00CD 66 10 87 10 46           o32 adc [bx+0x4610], al
00D2 10                       invalid

LFTROTB_1F:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00EF
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00CA
003F                          bx = bx * 2
0041 2E FF A7 C4 11           jmp word [cs:bx+0x11c4]
0046                          Push(02)
004A                          ax = GetNextTile()
0051                          GoMap(stk[0], ax, 01, 04)
0065                          Jump to 00EF
0068                          Push(00)
006B                          ax = GetNextTile()
0072                          GoMap(stk[0], ax, 01, 04)
0086                          Jump to 00EF
0088                          Push(01)
008C                          ax = GetNextTile()
0093                          GoMap(stk[0], ax, 01, 04)
00A7                          Jump to 00EF
00A9                          Push(03)
00AD                          ax = GetNextTile()
00B4                          GoMap(stk[0], ax, 01, 04)
00C8                          Jump to 00EF
00CA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D1                          Push(ax)
00D2                          ax = GetNextTile()
00D9                          GoMap(stk[0], ax, 01, 04)
00ED                          Jump to 00EF
00EF                          RETURN
00F1 7C 11                    jl 0x104
00F3 3B 11                    cmp dx, [bx+di]
00F5 5B                       pop bx
00F6 11 19                    adc [bx+di], bx
00F8 11                       invalid

BACKROTL_20:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00EF
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00CA
003F                          bx = bx * 2
0041 2E FF A7 BD 12           jmp word [cs:bx+0x12bd]
0046                          Push(01)
004A                          ax = GetNextTile()
0051                          GoMap(stk[0], ax, 01, 04)
0065                          Jump to 00EF
0068                          Push(03)
006C                          ax = GetNextTile()
0073                          GoMap(stk[0], ax, 01, 04)
0087                          Jump to 00EF
0089                          Push(00)
008C                          ax = GetNextTile()
0093                          GoMap(stk[0], ax, 01, 04)
00A7                          Jump to 00EF
00A9                          Push(02)
00AD                          ax = GetNextTile()
00B4                          GoMap(stk[0], ax, 01, 04)
00C8                          Jump to 00EF
00CA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D1                          Push(ax)
00D2                          ax = GetNextTile()
00D9                          GoMap(stk[0], ax, 01, 04)
00ED                          Jump to 00EF
00EF                          RETURN
00F1                          If (result.notequal) value jump to 0105
00F3 34 12                    xor al, 0x12
00F5 55                       push bp
00F6 12 12                    adc dl, [bp+si]
00F8 12                       invalid

RTROTA_21:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00EF
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00CA
003F                          bx = bx * 2
0041 2E FF A7 B6 13           jmp word [cs:bx+0x13b6]
0046                          Push(02)
004A                          ax = GetNextTile()
0051                          GoMap(stk[0], ax, 01, 04)
0065                          Jump to 00EF
0068                          Push(00)
006B                          ax = GetNextTile()
0072                          GoMap(stk[0], ax, 01, 04)
0086                          Jump to 00EF
0088                          Push(01)
008C                          ax = GetNextTile()
0093                          GoMap(stk[0], ax, 01, 04)
00A7                          Jump to 00EF
00A9                          Push(03)
00AD                          ax = GetNextTile()
00B4                          GoMap(stk[0], ax, 01, 04)
00C8                          Jump to 00EF
00CA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D1                          Push(ax)
00D2                          ax = GetNextTile()
00D9                          GoMap(stk[0], ax, 01, 04)
00ED                          Jump to 00EF
00EF                          RETURN
00F1 6E                       outsb
00F2 13 2D                    adc bp, [di]
00F4 13 4D 13                 adc cx, [di+0x13]
00F7 0B 13                    or dx, [bp+di]

RTROTB_22:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00EF
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00CA
003F                          bx = bx * 2
0041 2E FF A7 AF 14           jmp word [cs:bx+0x14af]
0046                          Push(00)
0049                          ax = GetNextTile()
0050                          GoMap(stk[0], ax, 01, 04)
0064                          Jump to 00EF
0067                          Push(02)
006B                          ax = GetNextTile()
0072                          GoMap(stk[0], ax, 01, 04)
0086                          Jump to 00EF
0088                          Push(03)
008C                          ax = GetNextTile()
0093                          GoMap(stk[0], ax, 01, 04)
00A7                          Jump to 00EF
00A9                          Push(01)
00AD                          ax = GetNextTile()
00B4                          GoMap(stk[0], ax, 01, 04)
00C8                          Jump to 00EF
00CA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D1                          Push(ax)
00D2                          ax = GetNextTile()
00D9                          GoMap(stk[0], ax, 01, 04)
00ED                          Jump to 00EF
00EF                          RETURN
00F1 67 14 25                 a32 adc al, 0x25
00F4 14 46                    adc al, 0x46
00F6 14 04                    adc al, 0x4
00F8 14                       invalid

BADMNSTR_25:
0000                          BEGIN
0003                          ax = PartyCount()
000B                          compare(ax, 0001)
000E                          If (result.notequal) value jump to 0037
0010                          AddEncounter(1F, 01)
0022                          AddEncounter(20, 02)
0034                          Jump to 0152
0037                          ax = PartyCount()
003F                          compare(ax, 0002)
0042                          If (result.notequal) value jump to 007D
0044                          AddEncounter(20, 01)
0056                          AddEncounter(20, 02)
0068                          AddEncounter(20, 03)
007A                          Jump to 0152
007D                          ax = PartyCount()
0085                          compare(ax, 0003)
0088                          If (result.notequal) value jump to 00E6
008A                          AddEncounter(1F, 01)
009C                          AddEncounter(20, 02)
00AE                          AddEncounter(21, 03)
00C0                          AddEncounter(1F, 05)
00D2                          AddEncounter(21, 06)
00E4                          Jump to 0152
00E6                          AddEncounter(21, 01)
00F8                          AddEncounter(21, 02)
010A                          AddEncounter(21, 03)
011C                          AddEncounter(21, 04)
012E                          AddEncounter(21, 05)
0140                          AddEncounter(21, 06)
0152                          RETURN

ITEMAENC_28:
0000                          BEGIN
0003                          ax = HasItem(B1)
0011                          If (result.equal) value jump to 0041
0013                          AddTreasure(01F4, 00, 00, 00, 00, CE)
0032                          ShowMessage(08D0) = Clerics use this room as a sanctuary.
003F                          Jump to 006E
0041                          AddTreasure(0BB8, 00, 00, 00, CF, B1)
0061                          ShowMessage(08F6) = A scroll fall from a Cleric's robe.
006E                          ax = PartyCount()
0076                          compare(ax, 0001)
0079                          If (result.notequal) value jump to 0090
007B                          AddEncounter(25, 01)
008D                          Jump to 0151
0090                          ax = PartyCount()
0098                          compare(ax, 0002)
009B                          If (result.notequal) value jump to 00C4
009D                          AddEncounter(25, 01)
00AF                          AddEncounter(25, 02)
00C1                          Jump to 0151
00C4                          ax = PartyCount()
00CC                          compare(ax, 0003)
00CF                          If (result.notequal) value jump to 0109
00D1                          AddEncounter(25, 01)
00E3                          AddEncounter(25, 02)
00F5                          AddEncounter(25, 05)
0107                          Jump to 0151
0109                          AddEncounter(25, 01)
011B                          AddEncounter(25, 02)
012D                          AddEncounter(25, 05)
013F                          AddEncounter(25, 06)
0151                          RETURN

SPECITMB_29:
0000                          BEGIN
0003                          ax = HasItem(CD)
0011                          If (result.equal) value jump to 0041
0013                          AddTreasure(004B, 00, 00, 00, 00, CB)
0032                          ShowMessage(091A) = Rogues use this room as a hideout.
003F                          Jump to 006E
0041                          AddTreasure(0DAC, 00, 00, 00, D0, CD)
0061                          ShowMessage(093D) = A Barbarian drops some potions when she sees you.
006E                          ax = PartyCount()
0076                          compare(ax, 0001)
0079                          If (result.notequal) value jump to 00A2
007B                          AddEncounter(23, 01)
008D                          AddEncounter(23, 02)
009F                          Jump to 0153
00A2                          ax = PartyCount()
00AA                          compare(ax, 0002)
00AD                          If (result.notequal) value jump to 00F9
00AF                          AddEncounter(23, 01)
00C1                          AddEncounter(23, 02)
00D3                          AddEncounter(04, 05)
00E5                          AddEncounter(04, 06)
00F7                          Jump to 0153
00F9                          AddEncounter(23, 01)
010B                          AddEncounter(23, 02)
011D                          AddEncounter(23, 03)
012F                          AddEncounter(22, 05)
0141                          AddEncounter(22, 06)
0153                          RETURN

ITEMCENC_2A:
0000                          BEGIN
0003                          ax = HasItem(CA)
0011                          If (result.equal) value jump to 0041
0013                          AddTreasure(00C8, 00, 00, 00, 00, B6)
0032                          ShowMessage(096F) = You sense evil in the room.
003F                          Jump to 006D
0041                          AddTreasure(1388, 00, 00, 00, 00, CA)
0060                          ShowMessage(098B) = You see a wand on the floor.
006D                          ax = PartyCount()
0075                          compare(ax, 0001)
0078                          If (result.notequal) value jump to 00A1
007A                          AddEncounter(19, 02)
008C                          AddEncounter(1B, 06)
009E                          Jump to 0164
00A1                          ax = PartyCount()
00A9                          compare(ax, 0002)
00AC                          If (result.notequal) value jump to 00F8
00AE                          AddEncounter(19, 01)
00C0                          AddEncounter(19, 02)
00D2                          AddEncounter(1B, 05)
00E4                          AddEncounter(1B, 06)
00F6                          Jump to 0164
00F8                          AddEncounter(1A, 01)
010A                          AddEncounter(1A, 02)
011C                          AddEncounter(19, 03)
012E                          AddEncounter(19, 04)
0140                          AddEncounter(1B, 05)
0152                          AddEncounter(1B, 06)
0164                          RETURN

ITEMDECN_2B:
0000                          BEGIN
0003                          ax = HasItem(92)
0011                          If (result.equal) value jump to 0041
0013                          AddTreasure(02EE, 00, 00, 00, 00, CF)
0032                          ShowMessage(09A8) = The stench of reptiles assails you.
003F                          Jump to 006E
0041                          AddTreasure(09C4, 00, 00, 00, B7, 92)
0061                          ShowMessage(09CC) = You hear hissing.
006E                          ax = PartyCount()
0076                          compare(ax, 0001)
0079                          If (result.notequal) value jump to 00A2
007B                          AddEncounter(1C, 01)
008D                          AddEncounter(1E, 02)
009F                          Jump to 0165
00A2                          ax = PartyCount()
00AA                          compare(ax, 0002)
00AD                          If (result.notequal) value jump to 00F9
00AF                          AddEncounter(1C, 01)
00C1                          AddEncounter(1E, 02)
00D3                          AddEncounter(1C, 03)
00E5                          AddEncounter(1E, 04)
00F7                          Jump to 0165
00F9                          AddEncounter(1D, 01)
010B                          AddEncounter(1D, 02)
011D                          AddEncounter(1E, 03)
012F                          AddEncounter(1E, 04)
0141                          AddEncounter(1C, 05)
0153                          AddEncounter(1C, 06)
0165                          RETURN

WEAPAENC_2C:
0000                          BEGIN
0003                          ax = HasItem(3A)
0011                          If (result.equal) value jump to 0042
0013                          AddTreasure(023F, 00, 00, 00, CC, CF)
0033                          ShowMessage(09DE) = Rogues surprise you.
0040                          Jump to 006E
0042                          AddTreasure(04B0, 00, 00, 00, 00, 3A)
0061                          ShowMessage(09F3) = A Knight drops a poleaxe as you approach.
006E                          ax = PartyCount()
0076                          compare(ax, 0001)
0079                          If (result.notequal) value jump to 00A2
007B                          AddEncounter(26, 01)
008D                          AddEncounter(27, 02)
009F                          Jump to 01BD
00A2                          ax = PartyCount()
00AA                          compare(ax, 0002)
00AD                          If (result.notequal) value jump to 00E8
00AF                          AddEncounter(26, 01)
00C1                          AddEncounter(27, 02)
00D3                          AddEncounter(25, 05)
00E5                          Jump to 01BD
00E8                          ax = PartyCount()
00F0                          compare(ax, 0003)
00F3                          If (result.notequal) value jump to 0151
00F5                          AddEncounter(26, 01)
0107                          AddEncounter(25, 02)
0119                          AddEncounter(27, 03)
012B                          AddEncounter(25, 05)
013D                          AddEncounter(27, 06)
014F                          Jump to 01BD
0151                          AddEncounter(26, 01)
0163                          AddEncounter(26, 02)
0175                          AddEncounter(24, 03)
0187                          AddEncounter(23, 04)
0199                          AddEncounter(27, 05)
01AB                          AddEncounter(25, 06)
01BD                          RETURN

WEAPBENC_2D:
0000                          BEGIN
0003                          ax = HasItem(49)
0011                          If (result.equal) value jump to 0041
0013                          AddTreasure(0384, 00, 00, 00, 00, C9)
0032                          ShowMessage(0A1D) = Nightmares loom up before you.
003F                          Jump to 006E
0041                          AddTreasure(1388, 00, 00, 00, CB, 49)
0061                          ShowMessage(0A3C) = A Nightmare throws a bow aside to attack.
006E                          ax = PartyCount()
0076                          compare(ax, 0001)
0079                          If (result.notequal) value jump to 0090
007B                          AddEncounter(13, 01)
008D                          Jump to 0151
0090                          ax = PartyCount()
0098                          compare(ax, 0002)
009B                          If (result.notequal) value jump to 00C4
009D                          AddEncounter(13, 01)
00AF                          AddEncounter(14, 02)
00C1                          Jump to 0151
00C4                          ax = PartyCount()
00CC                          compare(ax, 0003)
00CF                          If (result.notequal) value jump to 0109
00D1                          AddEncounter(14, 01)
00E3                          AddEncounter(13, 02)
00F5                          AddEncounter(14, 03)
0107                          Jump to 0151
0109                          AddEncounter(13, 01)
011B                          AddEncounter(13, 02)
012D                          AddEncounter(14, 03)
013F                          AddEncounter(14, 04)
0151                          RETURN

ARMRAENC_2E:
0000                          BEGIN
0003                          ax = HasItem(7F)
0011                          If (result.equal) value jump to 0042
0013                          AddTreasure(00C8, 00, 00, 00, 4F, 02)
0033                          ShowMessage(0A66) = You stumble on some Dwarf Knights.
0040                          Jump to 006F
0042                          AddTreasure(1770, 00, 00, 00, CF, 7F)
0062                          ShowMessage(0A89) = The brilliant chainmail worn by a Knight blinds you.
006F                          ax = PartyCount()
0077                          compare(ax, 0001)
007A                          If (result.notequal) value jump to 0091
007C                          AddEncounter(28, 01)
008E                          Jump to 0152
0091                          ax = PartyCount()
0099                          compare(ax, 0002)
009C                          If (result.notequal) value jump to 00C5
009E                          AddEncounter(28, 01)
00B0                          AddEncounter(28, 02)
00C2                          Jump to 0152
00C5                          ax = PartyCount()
00CD                          compare(ax, 0003)
00D0                          If (result.notequal) value jump to 010A
00D2                          AddEncounter(28, 01)
00E4                          AddEncounter(28, 02)
00F6                          AddEncounter(28, 04)
0108                          Jump to 0152
010A                          AddEncounter(28, 01)
011C                          AddEncounter(28, 02)
012E                          AddEncounter(28, 03)
0140                          AddEncounter(28, 06)
0152                          RETURN

ARMRBENC_2F:
0000                          BEGIN
0003                          ax = HasItem(5A)
0011                          If (result.equal) value jump to 0040
0013                          AddTreasure(0000, 00, 00, 00, 00, CE)
0031                          ShowMessage(0ABE) = You enter a den of thieves.
003E                          Jump to 006B
0040                          AddTreasure(0000, 00, 00, 00, 00, 5A)
005E                          ShowMessage(0ADA) = A Halfling Thief tries to wield a large shield.
006B                          ax = PartyCount()
0073                          compare(ax, 0001)
0076                          If (result.notequal) value jump to 00B0
0078                          AddEncounter(24, 01)
008A                          AddEncounter(24, 02)
009C                          AddEncounter(24, 05)
00AE                          Jump to 011C
00B0                          AddEncounter(24, 01)
00C2                          AddEncounter(24, 02)
00D4                          AddEncounter(24, 03)
00E6                          AddEncounter(24, 04)
00F8                          AddEncounter(24, 05)
010A                          AddEncounter(24, 06)
011C                          RETURN

KEYENC_30:
0000                          BEGIN
0003                          ax = HasItem(E1)
0011                          If (result.equal) value jump to 0042
0013                          AddTreasure(03E8, 00, 00, 00, B7, CE)
0033                          ShowMessage(0B0A) = The room is jammed with Rogues.
0040                          Jump to 006D
0042                          AddTreasure(0000, 00, 00, 00, 00, E1)
0060                          ShowMessage(0B2A) = A Ranger wears the King's Domicile Key around his neck.
006D                          ax = PartyCount()
0075                          compare(ax, 0001)
0078                          If (result.notequal) value jump to 00A1
007A                          AddEncounter(27, 01)
008C                          AddEncounter(25, 05)
009E                          Jump to 0176
00A1                          ax = PartyCount()
00A9                          compare(ax, 0002)
00AC                          If (result.notequal) value jump to 010A
00AE                          AddEncounter(27, 01)
00C0                          AddEncounter(26, 02)
00D2                          AddEncounter(28, 03)
00E4                          AddEncounter(25, 05)
00F6                          AddEncounter(25, 06)
0108                          Jump to 0176
010A                          AddEncounter(27, 01)
011C                          AddEncounter(28, 02)
012E                          AddEncounter(26, 03)
0140                          AddEncounter(28, 04)
0152                          AddEncounter(27, 05)
0164                          AddEncounter(25, 06)
0176                          RETURN

TELMESGA_31:
0000                          BEGIN
0003                          ShowMessage(0B62) = There is a teleport in the south wall.
0010                          RETURN

TELMESGB_32:
0000                          BEGIN
0003                          ShowMessage(0B89) = There is a teleport to the south.
0010                          RETURN

TELMESSC_33:
0000                          BEGIN
0003                          ShowMessage(0BAB) = There is a teleport to the north.
0010                          RETURN

GOLDAENC_34:
0000                          BEGIN
0003                          ax = CheckState(02, 38)
0014                          compare(ax, 0001)
0017                          If (result.notequal) value jump to 003A
0019                          AddTreasure(01F4, 00, 00, 00, 00, B5)
0038                          Jump to 006F
003A                          AddTreasure(1388, 00, 00, 00, AB, A8)
005A                          SetState(02, 1F, 01)
006F                          ShowMessage(0BCD) = Banshees haunt this room.
007C                          ax = PartyCount()
0084                          compare(ax, 0001)
0087                          If (result.notequal) value jump to 009E
0089                          AddEncounter(0E, 01)
009B                          Jump to 013D
009E                          ax = PartyCount()
00A6                          compare(ax, 0002)
00A9                          If (result.notequal) value jump to 00E3
00AB                          AddEncounter(0E, 01)
00BD                          AddEncounter(0E, 02)
00CF                          AddEncounter(0E, 03)
00E1                          Jump to 013D
00E3                          AddEncounter(0F, 01)
00F5                          AddEncounter(10, 02)
0107                          AddEncounter(0F, 03)
0119                          AddEncounter(11, 05)
012B                          AddEncounter(10, 06)
013D                          RETURN

GOLDBENC_35:
0000                          BEGIN
0003                          ShowMessage(0BE7) = Deinons protect a chest.
0010                          ax = CheckState(02, 39)
0021                          compare(ax, 0001)
0024                          If (result.notequal) value jump to 0047
0026                          AddTreasure(00C8, 00, 00, 00, 00, 04)
0045                          Jump to 007C
0047                          AddTreasure(1770, 00, 00, 00, B6, CE)
0067                          SetState(02, 20, 01)
007C                          ax = PartyCount()
0084                          compare(ax, 0001)
0087                          If (result.notequal) value jump to 009E
0089                          AddEncounter(1E, 01)
009B                          Jump to 015F
009E                          ax = PartyCount()
00A6                          compare(ax, 0002)
00A9                          If (result.notequal) value jump to 00D2
00AB                          AddEncounter(1E, 01)
00BD                          AddEncounter(1E, 02)
00CF                          Jump to 015F
00D2                          ax = PartyCount()
00DA                          compare(ax, 0003)
00DD                          If (result.notequal) value jump to 0117
00DF                          AddEncounter(1E, 01)
00F1                          AddEncounter(1E, 02)
0103                          AddEncounter(1E, 04)
0115                          Jump to 015F
0117                          AddEncounter(1E, 01)
0129                          AddEncounter(1E, 02)
013B                          AddEncounter(1E, 03)
014D                          AddEncounter(1E, 04)
015F                          RETURN

BACKROTR_36:
0000                          BEGIN
0003                          ax = CheckState3(00, 02)
0015                          If (result.notequal) value jump to 001A
0017                          Jump to 00EF
001A                          SetState(00, 02, 01)
002E                          ax = SetExitability(ax) // ax is usually 0 following equality check
0035                          bx = ax
0037                          compare(bx, 03)
003A                          If (result.lessthan or result.equal) value jump to 003F
003C                          Jump to 00CA
003F                          bx = bx * 2
0041 2E FF A7 57 26           jmp word [cs:bx+0x2657]
0046                          Push(01)
004A                          ax = GetNextTile()
0051                          GoMap(stk[0], ax, 01, 04)
0065                          Jump to 00EF
0068                          Push(03)
006C                          ax = GetNextTile()
0073                          GoMap(stk[0], ax, 01, 04)
0087                          Jump to 00EF
0089                          Push(00)
008C                          ax = GetNextTile()
0093                          GoMap(stk[0], ax, 01, 04)
00A7                          Jump to 00EF
00A9                          Push(02)
00AD                          ax = GetNextTile()
00B4                          GoMap(stk[0], ax, 01, 04)
00C8                          Jump to 00EF
00CA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D1                          Push(ax)
00D2                          ax = GetNextTile()
00D9                          GoMap(stk[0], ax, 01, 04)
00ED                          Jump to 00EF
00EF                          RETURN
00F1 0F 26                    invalid
00F1 CE                       into
00F2 25 EF 25                 and ax, 0x25ef
00F5 AC                       lodsb
00F6 25                       invalid

STRSMESA_37:
0000                          BEGIN
0003                          ShowMessage(0C00) = Stairs through the east gateway lead upstairs.
0010                          RETURN

STRSMESB_38:
0000                          BEGIN
0003                          ShowMessage(0C2F) = There are stairs to the north beyond the gateway.
0010                          RETURN

PLATFMMS_39:
0000                          BEGIN
0003                          ShowMessage(0C61) = There is an elevator platform to the north.
0010                          RETURN

STRSMESS_3A:
0000                          BEGIN
0003                          ShowMessage(0C8D) = Stairs through the west gateway lead down a level.
0010                          RETURN

NPCCHATA_3B:
0000                          BEGIN
0003                          ShowMessage(0CC0) = You encounter a Human Wizard.
0010                          ShowPortrait(002B)
001D                          ax = UnknownFunctionEC(000F)
002A                          compare(ax, 000A)
002D                          If (result.greaterthan) value jump to 003E
002F                          ShowMessage(0CDE) = This is the lowest level of Cleowyn's Palace, yet you are merely at the beginning of the dungeon proper.
003C                          Jump to 004B
003E                          ShowMessage(0D47) = The Human Wizard chortles softly.
004B                          RETURN

NPCCHATB_3C:
0000                          BEGIN
0003                          ShowMessage(0D69) = You encounter a Gnome Thief.
0010                          ShowPortrait(0024)
001D                          ax = UnknownFunctionEC(000F)
002A                          compare(ax, 0009)
002D                          If (result.greaterthan) value jump to 003E
002F                          ShowMessage(0D86) = In the king's quarters is an elevator that will lift you up to the King's Palace. Cleowyn used this elevator to  by-pass the traps around his throne.
003C                          Jump to 004B
003E                          ShowMessage(0E1C) = The Gnome Thief tiptoes away as you draw near.
004B                          RETURN

NPCCHATC_3D:
0000                          BEGIN
0003                          ShowMessage(0E4B) = You encounter a Gnome Barbarian.
0010                          ShowPortrait(0019)
001D                          ax = UnknownFunctionEC(000F)
002A                          compare(ax, 0005)
002D                          If (result.greaterthan) value jump to 003E
002F                          ShowMessage(0E6C) = The name of the Elemental bound by the wizard Arnakkian is En-li-kil. This Elemental commands Time itself.
003C                          Jump to 0058
003E                          DoDamage(004B)
004B                          ShowMessage(0ED7) = The Gnome Barbarian warns you to stay away.
0058                          RETURN

STRSTELE_3E:
0000                          BEGIN
0003                          GoMap(03, E0, 03, 03)
001E                          RETURN

03FC: You found a trapdoor.
0412: You fall through a trapdoor.
042F: You spot a trapdoor.
0444: You fall through a trapdoor.
0461: You detect a trapdoor.
0478: You fall through a trapdoor.
0495: You escape a trapdoor.
04AC: You fall through a trapdoor.
04C9: You notice a trapdoor.
04E0: You fall through a trapdoor.
04FD: There is a trapdoor in the floor.
051F: You fall through a trapdoor.
053C: You discover a trapdoor.
0555: You fall through a trapdoor.
0572: You detect a trapdoor.
0589: You fall through a trapdoor.
05A6: You spot a trapdoor.
05BB: You fall through a trapdoor.
05D8: You detect a trapdoor.
05EF: You fall through a trapdoor.
060C: A trapdoor is in this room.
0628: You fall through a trapdoor.
0645: You sidestep a trapdoor.
065E: You fall through a trapdoor.
067B: You avoid a trapdoor.
0691: You fall through a trapdoor.
06AE: You soon have the door unlocked.
06CF: The door is locked.
06E3: Your aptitude at opening locks pays off.
070C: The door is locked.
0720: You succeed at picking the door lock.
0746: The door is locked.
075A: The door lock is no match for your skills.
0785: The door is locked.
0799: You deftly trip the door lock.
07B8: The door is locked.
07CC: You quickly have the door open.
07EC: The door is locked.
0800: You push on the door and open it.
0822: The door is stuck shut.
083A: You force the door open by muscle power.
0863: The door is stuck shut.
087B: The Domicile Key opens the door!
089C: The door is locked.
08B0: You have spotted a secret door!
08D0: Clerics use this room as a sanctuary.
08F6: A scroll fall from a Cleric's robe.
091A: Rogues use this room as a hideout.
093D: A Barbarian drops some potions when she sees you.
096F: You sense evil in the room.
098B: You see a wand on the floor.
09A8: The stench of reptiles assails you.
09CC: You hear hissing.
09DE: Rogues surprise you.
09F3: A Knight drops a poleaxe as you approach.
0A1D: Nightmares loom up before you.
0A3C: A Nightmare throws a bow aside to attack.
0A66: You stumble on some Dwarf Knights.
0A89: The brilliant chainmail worn by a Knight blinds you.
0ABE: You enter a den of thieves.
0ADA: A Halfling Thief tries to wield a large shield.
0B0A: The room is jammed with Rogues.
0B2A: A Ranger wears the King's Domicile Key around his neck.
0B62: There is a teleport in the south wall.
0B89: There is a teleport to the south.
0BAB: There is a teleport to the north.
0BCD: Banshees haunt this room.
0BE7: Deinons protect a chest.
0C00: Stairs through the east gateway lead upstairs.
0C2F: There are stairs to the north beyond the gateway.
0C61: There is an elevator platform to the north.
0C8D: Stairs through the west gateway lead down a level.
0CC0: You encounter a Human Wizard.
0CDE: This is the lowest level of Cleowyn's Palace, yet you are merely at the beginning of the dungeon proper.
0D47: The Human Wizard chortles softly.
0D69: You encounter a Gnome Thief.
0D86: In the king's quarters is an elevator that will lift you up to the King's Palace. Cleowyn used this elevator to  by-pass the traps around his throne.
0E1C: The Gnome Thief tiptoes away as you draw near.
0E4B: You encounter a Gnome Barbarian.
0E6C: The name of the Elemental bound by the wizard Arnakkian is En-li-kil. This Elemental commands Time itself.
0ED7: The Gnome Barbarian warns you to stay away.
