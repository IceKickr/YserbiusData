STRSTELE_01:
0003  0000        BEGIN
0006  0003        SetMoveMap(0x03, 0xE0, 0x03, 0x03)
0021  001E        RETURN

STRSTELE_02:
0023  0000        BEGIN
0026  0003        SetMoveMap(0x02, 0x8D, 0x01, 0x05)
0041  001E        RETURN

PLATFMUP_03:
0043  0000        BEGIN
0046  0003        SetMoveMap(0x03, 0xB4, 0x06, 0x02)
0061  001E        RETURN

TELPORTA_04:
0063  0000        BEGIN
0066  0003        SetMoveMap(0x01, 0x68, 0x03, 0x01)
0081  001E        RETURN

TELEPORT_05:
0083  0000        BEGIN
0086  0003        SetMoveMap(0x02, 0x24, 0x03, 0x03)
00A1  001E        RETURN

TELPORTC_06:
00A3  0000        BEGIN
00A6  0003        SetMoveMap(0x03, 0xAF, 0x02, 0x05)
00C1  001E        RETURN

TRAPDORA_07:
00C3  0000        BEGIN
00C6  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
00D2  000F        compare(ax, 0x000A)
00D5  0012        If (result.above or result.equal) jump to 0062
00D7  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
00E3  0020        RefreshCompareFlags(ax)
00E5  0022        If (result.notequal) jump to 0062
00E7  0024        ax = UsedItem(0xA2, 0xA2)
00FA  0037        If (result.notequal) jump to 0062
00FC  0039        ax = UsedItem(0xBE, 0xBE)
010F  004C        If (result.notequal) jump to 0062
0111  004E        ax = CheckState08(0x00, 0x01)
0123  0060        If (result.equal) jump to 0085
0125  0062        ShowMessage(0x03FC) = You found a trapdoor.
0132  006F        SetState00(0x00, 0x01, 0x01)
0146  0083        Jump to 00AC
0148  0085        SetMoveMap(00, 0x89, 0x02, 0x05)
0162  009F        ShowMessage(0x0412) = You fall through a trapdoor.
016F  00AC        RETURN

TRAPDORB_08:
0171  0000        BEGIN
0174  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0180  000F        compare(ax, 0x000A)
0183  0012        If (result.above or result.equal) jump to 0062
0185  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0191  0020        RefreshCompareFlags(ax)
0193  0022        If (result.notequal) jump to 0062
0195  0024        ax = UsedItem(0xA2, 0xA2)
01A8  0037        If (result.notequal) jump to 0062
01AA  0039        ax = UsedItem(0xBE, 0xBE)
01BD  004C        If (result.notequal) jump to 0062
01BF  004E        ax = CheckState08(0x00, 0x01)
01D1  0060        If (result.equal) jump to 0085
01D3  0062        ShowMessage(0x042F) = You spot a trapdoor.
01E0  006F        SetState00(0x00, 0x01, 0x01)
01F4  0083        Jump to 00AD
01F6  0085        SetMoveMap(0x01, 0x8C, 0x02, 0x05)
0211  00A0        ShowMessage(0x0444) = You fall through a trapdoor.
021E  00AD        RETURN

TRAPDORC_09:
0220  0000        BEGIN
0223  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
022F  000F        compare(ax, 0x000A)
0232  0012        If (result.above or result.equal) jump to 0062
0234  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0240  0020        RefreshCompareFlags(ax)
0242  0022        If (result.notequal) jump to 0062
0244  0024        ax = UsedItem(0xA2, 0xA2)
0257  0037        If (result.notequal) jump to 0062
0259  0039        ax = UsedItem(0xBE, 0xBE)
026C  004C        If (result.notequal) jump to 0062
026E  004E        ax = CheckState08(0x00, 0x01)
0280  0060        If (result.equal) jump to 0085
0282  0062        ShowMessage(0x0461) = You detect a trapdoor.
028F  006F        SetState00(0x00, 0x01, 0x01)
02A3  0083        Jump to 00AD
02A5  0085        SetMoveMap(0x03, 0x91, 0x02, 0x05)
02C0  00A0        ShowMessage(0x0478) = You fall through a trapdoor.
02CD  00AD        RETURN

TRAPDORD_0A:
02CF  0000        BEGIN
02D2  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
02DE  000F        compare(ax, 0x000A)
02E1  0012        If (result.above or result.equal) jump to 0062
02E3  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
02EF  0020        RefreshCompareFlags(ax)
02F1  0022        If (result.notequal) jump to 0062
02F3  0024        ax = UsedItem(0xA2, 0xA2)
0306  0037        If (result.notequal) jump to 0062
0308  0039        ax = UsedItem(0xBE, 0xBE)
031B  004C        If (result.notequal) jump to 0062
031D  004E        ax = CheckState08(0x00, 0x01)
032F  0060        If (result.equal) jump to 0085
0331  0062        ShowMessage(0x0495) = You escape a trapdoor.
033E  006F        SetState00(0x00, 0x01, 0x01)
0352  0083        Jump to 00AD
0354  0085        SetMoveMap(0x03, 0x9D, 0x02, 0x05)
036F  00A0        ShowMessage(0x04AC) = You fall through a trapdoor.
037C  00AD        RETURN

TRAPDORE_0B:
037E  0000        BEGIN
0381  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
038D  000F        compare(ax, 0x000A)
0390  0012        If (result.above or result.equal) jump to 0062
0392  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
039E  0020        RefreshCompareFlags(ax)
03A0  0022        If (result.notequal) jump to 0062
03A2  0024        ax = UsedItem(0xA2, 0xA2)
03B5  0037        If (result.notequal) jump to 0062
03B7  0039        ax = UsedItem(0xBE, 0xBE)
03CA  004C        If (result.notequal) jump to 0062
03CC  004E        ax = CheckState08(0x00, 0x01)
03DE  0060        If (result.equal) jump to 0085
03E0  0062        ShowMessage(0x04C9) = You notice a trapdoor.
03ED  006F        SetState00(0x00, 0x01, 0x01)
0401  0083        Jump to 00AD
0403  0085        SetMoveMap(0x03, 0xAB, 0x02, 0x05)
041E  00A0        ShowMessage(0x04E0) = You fall through a trapdoor.
042B  00AD        RETURN

TRAPDORF_0C:
042D  0000        BEGIN
0430  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
043C  000F        compare(ax, 0x000A)
043F  0012        If (result.above or result.equal) jump to 0062
0441  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
044D  0020        RefreshCompareFlags(ax)
044F  0022        If (result.notequal) jump to 0062
0451  0024        ax = UsedItem(0xA2, 0xA2)
0464  0037        If (result.notequal) jump to 0062
0466  0039        ax = UsedItem(0xBE, 0xBE)
0479  004C        If (result.notequal) jump to 0062
047B  004E        ax = CheckState08(0x00, 0x01)
048D  0060        If (result.equal) jump to 0085
048F  0062        ShowMessage(0x04FD) = There is a trapdoor in the floor.
049C  006F        SetState00(0x00, 0x01, 0x01)
04B0  0083        Jump to 00AD
04B2  0085        SetMoveMap(0x02, 0xBA, 0x02, 0x05)
04CD  00A0        ShowMessage(0x051F) = You fall through a trapdoor.
04DA  00AD        RETURN

TRAPDORG_0D:
04DC  0000        BEGIN
04DF  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
04EB  000F        compare(ax, 0x000A)
04EE  0012        If (result.above or result.equal) jump to 0062
04F0  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
04FC  0020        RefreshCompareFlags(ax)
04FE  0022        If (result.notequal) jump to 0062
0500  0024        ax = UsedItem(0xA2, 0xA2)
0513  0037        If (result.notequal) jump to 0062
0515  0039        ax = UsedItem(0xBE, 0xBE)
0528  004C        If (result.notequal) jump to 0062
052A  004E        ax = CheckState08(0x00, 0x01)
053C  0060        If (result.equal) jump to 0085
053E  0062        ShowMessage(0x053C) = You discover a trapdoor.
054B  006F        SetState00(0x00, 0x01, 0x01)
055F  0083        Jump to 00AD
0561  0085        SetMoveMap(0x01, 0xBF, 0x02, 0x05)
057C  00A0        ShowMessage(0x0555) = You fall through a trapdoor.
0589  00AD        RETURN

TRAPDORH_0E:
058B  0000        BEGIN
058E  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
059A  000F        compare(ax, 0x000A)
059D  0012        If (result.above or result.equal) jump to 0062
059F  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
05AB  0020        RefreshCompareFlags(ax)
05AD  0022        If (result.notequal) jump to 0062
05AF  0024        ax = UsedItem(0xA2, 0xA2)
05C2  0037        If (result.notequal) jump to 0062
05C4  0039        ax = UsedItem(0xBE, 0xBE)
05D7  004C        If (result.notequal) jump to 0062
05D9  004E        ax = CheckState08(0x00, 0x01)
05EB  0060        If (result.equal) jump to 0085
05ED  0062        ShowMessage(0x0572) = You detect a trapdoor.
05FA  006F        SetState00(0x00, 0x01, 0x01)
060E  0083        Jump to 00AD
0610  0085        SetMoveMap(0x02, 0xCA, 0x02, 0x05)
062B  00A0        ShowMessage(0x0589) = You fall through a trapdoor.
0638  00AD        RETURN

TRAPDORI_0F:
063A  0000        BEGIN
063D  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0649  000F        compare(ax, 0x000A)
064C  0012        If (result.above or result.equal) jump to 0062
064E  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
065A  0020        RefreshCompareFlags(ax)
065C  0022        If (result.notequal) jump to 0062
065E  0024        ax = UsedItem(0xA2, 0xA2)
0671  0037        If (result.notequal) jump to 0062
0673  0039        ax = UsedItem(0xBE, 0xBE)
0686  004C        If (result.notequal) jump to 0062
0688  004E        ax = CheckState08(0x00, 0x01)
069A  0060        If (result.equal) jump to 0085
069C  0062        ShowMessage(0x05A6) = You spot a trapdoor.
06A9  006F        SetState00(0x00, 0x01, 0x01)
06BD  0083        Jump to 00AD
06BF  0085        SetMoveMap(0x01, 0xD6, 0x02, 0x05)
06DA  00A0        ShowMessage(0x05BB) = You fall through a trapdoor.
06E7  00AD        RETURN

TRAPDORJ_10:
06E9  0000        BEGIN
06EC  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
06F8  000F        compare(ax, 0x000A)
06FB  0012        If (result.above or result.equal) jump to 0062
06FD  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0709  0020        RefreshCompareFlags(ax)
070B  0022        If (result.notequal) jump to 0062
070D  0024        ax = UsedItem(0xA2, 0xA2)
0720  0037        If (result.notequal) jump to 0062
0722  0039        ax = UsedItem(0xBE, 0xBE)
0735  004C        If (result.notequal) jump to 0062
0737  004E        ax = CheckState08(0x00, 0x01)
0749  0060        If (result.equal) jump to 0085
074B  0062        ShowMessage(0x05D8) = You detect a trapdoor.
0758  006F        SetState00(0x00, 0x01, 0x01)
076C  0083        Jump to 00AD
076E  0085        SetMoveMap(0x03, 0xD9, 0x02, 0x05)
0789  00A0        ShowMessage(0x05EF) = You fall through a trapdoor.
0796  00AD        RETURN

TRAPDORK_11:
0798  0000        BEGIN
079B  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
07A7  000F        compare(ax, 0x000A)
07AA  0012        If (result.above or result.equal) jump to 0062
07AC  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
07B8  0020        RefreshCompareFlags(ax)
07BA  0022        If (result.notequal) jump to 0062
07BC  0024        ax = UsedItem(0xA2, 0xA2)
07CF  0037        If (result.notequal) jump to 0062
07D1  0039        ax = UsedItem(0xBE, 0xBE)
07E4  004C        If (result.notequal) jump to 0062
07E6  004E        ax = CheckState08(0x00, 0x01)
07F8  0060        If (result.equal) jump to 0085
07FA  0062        ShowMessage(0x060C) = A trapdoor is in this room.
0807  006F        SetState00(0x00, 0x01, 0x01)
081B  0083        Jump to 00AD
081D  0085        SetMoveMap(0x01, 0xEC, 0x02, 0x05)
0838  00A0        ShowMessage(0x0628) = You fall through a trapdoor.
0845  00AD        RETURN

TRAPDORL_12:
0847  0000        BEGIN
084A  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0856  000F        compare(ax, 0x000A)
0859  0012        If (result.above or result.equal) jump to 0062
085B  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0867  0020        RefreshCompareFlags(ax)
0869  0022        If (result.notequal) jump to 0062
086B  0024        ax = UsedItem(0xA2, 0xA2)
087E  0037        If (result.notequal) jump to 0062
0880  0039        ax = UsedItem(0xBE, 0xBE)
0893  004C        If (result.notequal) jump to 0062
0895  004E        ax = CheckState08(0x00, 0x01)
08A7  0060        If (result.equal) jump to 0085
08A9  0062        ShowMessage(0x0645) = You sidestep a trapdoor.
08B6  006F        SetState00(0x00, 0x01, 0x01)
08CA  0083        Jump to 00AC
08CC  0085        SetMoveMap(00, 0xF4, 0x02, 0x05)
08E6  009F        ShowMessage(0x065E) = You fall through a trapdoor.
08F3  00AC        RETURN

TRAPDORM_13:
08F5  0000        BEGIN
08F8  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0904  000F        compare(ax, 0x000A)
0907  0012        If (result.above or result.equal) jump to 0062
0909  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0915  0020        RefreshCompareFlags(ax)
0917  0022        If (result.notequal) jump to 0062
0919  0024        ax = UsedItem(0xA2, 0xA2)
092C  0037        If (result.notequal) jump to 0062
092E  0039        ax = UsedItem(0xBE, 0xBE)
0941  004C        If (result.notequal) jump to 0062
0943  004E        ax = CheckState08(0x00, 0x01)
0955  0060        If (result.equal) jump to 0085
0957  0062        ShowMessage(0x067B) = You avoid a trapdoor.
0964  006F        SetState00(0x00, 0x01, 0x01)
0978  0083        Jump to 00AD
097A  0085        SetMoveMap(0x02, 0xFD, 0x02, 0x05)
0995  00A0        ShowMessage(0x0691) = You fall through a trapdoor.
09A2  00AD        RETURN

LKPKDORA_14:
09A4  0000        BEGIN
09A7  0003        ax = UsedItem(0xC1, 0xC4)
09BA  0016        If (result.notequal) jump to 0029
09BC  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
09C8  0024        compare(ax, 0x0006)
09CB  0027        If (result.below) jump to 0074
09CD  0029        Push(01)
09D1  002D        ax = GetFacing()
09D8  0034        Push(ax)
09D9  0035        ax = GetNextTile()
09E0  003C        Push(ax)
09E1  003D        SetMove2C(stk[0], stk[1], stk[2])
09EB  0047        ax = GetFacing()
09F2  004E        Push(ax)
09F3  004F        ax = GetNextTile()
09FA  0056        Push(ax)
09FB  0057        Push(01)
09FF  005B        SetUnblocked()
0A09  0065        ShowMessage(0x06AE) = You soon have the door unlocked.
0A16  0072        Jump to 009E
0A18  0074        Push(00)
0A1B  0077        ax = GetFacing()
0A22  007E        Push(ax)
0A23  007F        ax = GetNextTile()
0A2A  0086        Push(ax)
0A2B  0087        SetMove2C(stk[0], stk[1], stk[2])
0A35  0091        ShowMessage(0x06CF) = The door is locked.
0A42  009E        RETURN

LKPKDORB_15:
0A44  0000        BEGIN
0A47  0003        ax = UsedItem(0xC2, 0xC4)
0A5A  0016        If (result.notequal) jump to 0029
0A5C  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0A68  0024        compare(ax, 0x0007)
0A6B  0027        If (result.below) jump to 0074
0A6D  0029        Push(01)
0A71  002D        ax = GetFacing()
0A78  0034        Push(ax)
0A79  0035        ax = GetNextTile()
0A80  003C        Push(ax)
0A81  003D        SetMove2C(stk[0], stk[1], stk[2])
0A8B  0047        ax = GetFacing()
0A92  004E        Push(ax)
0A93  004F        ax = GetNextTile()
0A9A  0056        Push(ax)
0A9B  0057        Push(01)
0A9F  005B        SetUnblocked()
0AA9  0065        ShowMessage(0x06E3) = Your aptitude at opening locks pays off.
0AB6  0072        Jump to 009E
0AB8  0074        Push(00)
0ABB  0077        ax = GetFacing()
0AC2  007E        Push(ax)
0AC3  007F        ax = GetNextTile()
0ACA  0086        Push(ax)
0ACB  0087        SetMove2C(stk[0], stk[1], stk[2])
0AD5  0091        ShowMessage(0x070C) = The door is locked.
0AE2  009E        RETURN

LKPKDORC_16:
0AE4  0000        BEGIN
0AE7  0003        ax = UsedItem(0xC3, 0xC4)
0AFA  0016        If (result.notequal) jump to 0029
0AFC  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0B08  0024        compare(ax, 0x0009)
0B0B  0027        If (result.below) jump to 0074
0B0D  0029        Push(01)
0B11  002D        ax = GetFacing()
0B18  0034        Push(ax)
0B19  0035        ax = GetNextTile()
0B20  003C        Push(ax)
0B21  003D        SetMove2C(stk[0], stk[1], stk[2])
0B2B  0047        ax = GetFacing()
0B32  004E        Push(ax)
0B33  004F        ax = GetNextTile()
0B3A  0056        Push(ax)
0B3B  0057        Push(01)
0B3F  005B        SetUnblocked()
0B49  0065        ShowMessage(0x0720) = You succeed at picking the door lock.
0B56  0072        Jump to 009E
0B58  0074        Push(00)
0B5B  0077        ax = GetFacing()
0B62  007E        Push(ax)
0B63  007F        ax = GetNextTile()
0B6A  0086        Push(ax)
0B6B  0087        SetMove2C(stk[0], stk[1], stk[2])
0B75  0091        ShowMessage(0x0746) = The door is locked.
0B82  009E        RETURN

KEYDOORA_17:
0B84  0000        BEGIN
0B87  0003        ax = UsedItem(0xC3, 0xC4)
0B9A  0016        If (result.notequal) jump to 003E
0B9C  0018        ax = UsedItem(0xE1, 0xE1)
0BAF  002B        If (result.notequal) jump to 003E
0BB1  002D        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0BBD  0039        compare(ax, 0x000A)
0BC0  003C        If (result.below) jump to 0089
0BC2  003E        Push(01)
0BC6  0042        ax = GetFacing()
0BCD  0049        Push(ax)
0BCE  004A        ax = GetNextTile()
0BD5  0051        Push(ax)
0BD6  0052        SetMove2C(stk[0], stk[1], stk[2])
0BE0  005C        ax = GetFacing()
0BE7  0063        Push(ax)
0BE8  0064        ax = GetNextTile()
0BEF  006B        Push(ax)
0BF0  006C        Push(01)
0BF4  0070        SetUnblocked()
0BFE  007A        ShowMessage(0x075A) = The door lock is no match for your skills.
0C0B  0087        Jump to 00B3
0C0D  0089        Push(00)
0C10  008C        ax = GetFacing()
0C17  0093        Push(ax)
0C18  0094        ax = GetNextTile()
0C1F  009B        Push(ax)
0C20  009C        SetMove2C(stk[0], stk[1], stk[2])
0C2A  00A6        ShowMessage(0x0785) = The door is locked.
0C37  00B3        RETURN

KEYDOORB_18:
0C39  0000        BEGIN
0C3C  0003        ax = UsedItem(0xC3, 0xC4)
0C4F  0016        If (result.notequal) jump to 003E
0C51  0018        ax = UsedItem(0xE1, 0xE1)
0C64  002B        If (result.notequal) jump to 003E
0C66  002D        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0C72  0039        compare(ax, 0x000B)
0C75  003C        If (result.below) jump to 0089
0C77  003E        Push(01)
0C7B  0042        ax = GetFacing()
0C82  0049        Push(ax)
0C83  004A        ax = GetNextTile()
0C8A  0051        Push(ax)
0C8B  0052        SetMove2C(stk[0], stk[1], stk[2])
0C95  005C        ax = GetFacing()
0C9C  0063        Push(ax)
0C9D  0064        ax = GetNextTile()
0CA4  006B        Push(ax)
0CA5  006C        Push(01)
0CA9  0070        SetUnblocked()
0CB3  007A        ShowMessage(0x0799) = You deftly trip the door lock.
0CC0  0087        Jump to 00B3
0CC2  0089        Push(00)
0CC5  008C        ax = GetFacing()
0CCC  0093        Push(ax)
0CCD  0094        ax = GetNextTile()
0CD4  009B        Push(ax)
0CD5  009C        SetMove2C(stk[0], stk[1], stk[2])
0CDF  00A6        ShowMessage(0x07B8) = The door is locked.
0CEC  00B3        RETURN

KEYDOORC_19:
0CEE  0000        BEGIN
0CF1  0003        ax = UsedItem(0xC4, 0xC4)
0D04  0016        If (result.notequal) jump to 003E
0D06  0018        ax = UsedItem(0xE1, 0xE1)
0D19  002B        If (result.notequal) jump to 003E
0D1B  002D        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0D27  0039        compare(ax, 0x000C)
0D2A  003C        If (result.below) jump to 0089
0D2C  003E        Push(01)
0D30  0042        ax = GetFacing()
0D37  0049        Push(ax)
0D38  004A        ax = GetNextTile()
0D3F  0051        Push(ax)
0D40  0052        SetMove2C(stk[0], stk[1], stk[2])
0D4A  005C        ax = GetFacing()
0D51  0063        Push(ax)
0D52  0064        ax = GetNextTile()
0D59  006B        Push(ax)
0D5A  006C        Push(01)
0D5E  0070        SetUnblocked()
0D68  007A        ShowMessage(0x07CC) = You quickly have the door open.
0D75  0087        Jump to 00B3
0D77  0089        Push(00)
0D7A  008C        ax = GetFacing()
0D81  0093        Push(ax)
0D82  0094        ax = GetNextTile()
0D89  009B        Push(ax)
0D8A  009C        SetMove2C(stk[0], stk[1], stk[2])
0D94  00A6        ShowMessage(0x07EC) = The door is locked.
0DA1  00B3        RETURN

STRDOORA_1A:
0DA3  0000        BEGIN
0DA6  0003        ax = CheckStrength()
0DB2  000F        compare(ax, 0x000E)
0DB5  0012        If (result.below) jump to 005F
0DB7  0014        ShowMessage(0x0800) = You push on the door and open it.
0DC4  0021        ax = GetFacing()
0DCB  0028        Push(ax)
0DCC  0029        ax = GetNextTile()
0DD3  0030        Push(ax)
0DD4  0031        Push(01)
0DD8  0035        SetUnblocked()
0DE2  003F        Push(01)
0DE6  0043        ax = GetFacing()
0DED  004A        Push(ax)
0DEE  004B        ax = GetNextTile()
0DF5  0052        Push(ax)
0DF6  0053        SetMove2C(stk[0], stk[1], stk[2])
0E00  005D        Jump to 0089
0E02  005F        ShowMessage(0x0822) = The door is stuck shut.
0E0F  006C        Push(00)
0E12  006F        ax = GetFacing()
0E19  0076        Push(ax)
0E1A  0077        ax = GetNextTile()
0E21  007E        Push(ax)
0E22  007F        SetMove2C(stk[0], stk[1], stk[2])
0E2C  0089        RETURN

STRDOORB_1B:
0E2E  0000        BEGIN
0E31  0003        ax = CheckStrength()
0E3D  000F        compare(ax, 0x0010)
0E40  0012        If (result.below) jump to 005F
0E42  0014        ShowMessage(0x083A) = You force the door open by muscle power.
0E4F  0021        ax = GetFacing()
0E56  0028        Push(ax)
0E57  0029        ax = GetNextTile()
0E5E  0030        Push(ax)
0E5F  0031        Push(01)
0E63  0035        SetUnblocked()
0E6D  003F        Push(01)
0E71  0043        ax = GetFacing()
0E78  004A        Push(ax)
0E79  004B        ax = GetNextTile()
0E80  0052        Push(ax)
0E81  0053        SetMove2C(stk[0], stk[1], stk[2])
0E8B  005D        Jump to 0089
0E8D  005F        ShowMessage(0x0863) = The door is stuck shut.
0E9A  006C        Push(00)
0E9D  006F        ax = GetFacing()
0EA4  0076        Push(ax)
0EA5  0077        ax = GetNextTile()
0EAC  007E        Push(ax)
0EAD  007F        SetMove2C(stk[0], stk[1], stk[2])
0EB7  0089        RETURN

ITMDOORA_1C:
0EB9  0000        BEGIN
0EBC  0003        ax = UsedItem(0xE1, 0xE1)
0ECF  0016        If (result.equal) jump to 0063
0ED1  0018        Push(01)
0ED5  001C        ax = GetFacing()
0EDC  0023        Push(ax)
0EDD  0024        ax = GetNextTile()
0EE4  002B        Push(ax)
0EE5  002C        SetMove2C(stk[0], stk[1], stk[2])
0EEF  0036        ax = GetFacing()
0EF6  003D        Push(ax)
0EF7  003E        ax = GetNextTile()
0EFE  0045        Push(ax)
0EFF  0046        Push(01)
0F03  004A        SetUnblocked()
0F0D  0054        ShowMessage(0x087B) = The Domicile Key opens the door!
0F1A  0061        Jump to 008D
0F1C  0063        Push(00)
0F1F  0066        ax = GetFacing()
0F26  006D        Push(ax)
0F27  006E        ax = GetNextTile()
0F2E  0075        Push(ax)
0F2F  0076        SetMove2C(stk[0], stk[1], stk[2])
0F39  0080        ShowMessage(0x089C) = The door is locked.
0F46  008D        RETURN

DETCTDOR_1D:
0F48  0000        BEGIN
0F4B  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0F57  000F        compare(ax, 0x000A)
0F5A  0012        If (result.above or result.equal) jump to 004E
0F5C  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0F68  0020        RefreshCompareFlags(ax)
0F6A  0022        If (result.notequal) jump to 004E
0F6C  0024        ax = UsedItem(0xA2, 0xA2)
0F7F  0037        If (result.notequal) jump to 004E
0F81  0039        ax = UsedItem(0xBE, 0xBE)
0F94  004C        If (result.equal) jump to 0099
0F96  004E        ShowMessage(0x08B0) = You have spotted a secret door!
0FA3  005B        ax = GetFacing()
0FAA  0062        Push(ax)
0FAB  0063        ax = GetNextTile()
0FB2  006A        Push(ax)
0FB3  006B        Push(01)
0FB7  006F        SetUnblocked()
0FC1  0079        Push(01)
0FC5  007D        ax = GetFacing()
0FCC  0084        Push(ax)
0FCD  0085        ax = GetNextTile()
0FD4  008C        Push(ax)
0FD5  008D        SetMove2C(stk[0], stk[1], stk[2])
0FDF  0097        Jump to 00B6
0FE1  0099        Push(00)
0FE4  009C        ax = GetFacing()
0FEB  00A3        Push(ax)
0FEC  00A4        ax = GetNextTile()
0FF3  00AB        Push(ax)
0FF4  00AC        SetMove2C(stk[0], stk[1], stk[2])
0FFE  00B6        RETURN

LFTROTA_1E:
1000  0000        BEGIN
1003  0003        ax = CheckState0C(0x00, 0x02)
1015  0015        If (result.notequal) jump to 001A
1017  0017        Jump to 00C9
101A  001A        SetState00(0x00, 0x02, 0x01)
102E  002E        ax = GetFacing()
1035  0035        bx = ax
1037  0037        compare(bx, 0x03)
103A  003A        If (result.unsigned_equal_or_less_than) jump to 003F
103C  003C        Jump to 00C9
103F  003F        bx = bx * 2
1041  0041        Jump to mem[0x10CB+bx]
1046  0046        Push(00)
1049  0049        ax = GetNextTile()
1050  0050        SetMoveMap(stk[0], ax, 0x01, 0x04)
1064  0064        Jump to 00C9
1066  0066        Push(02)
106A  006A        ax = GetNextTile()
1071  0071        SetMoveMap(stk[0], ax, 0x01, 0x04)
1085  0085        Jump to 00C9
1087  0087        Push(03)
108B  008B        ax = GetNextTile()
1092  0092        SetMoveMap(stk[0], ax, 0x01, 0x04)
10A6  00A6        Jump to 00C9
10A8  00A8        Push(01)
10AC  00AC        ax = GetNextTile()
10B3  00B3        SetMoveMap(stk[0], ax, 0x01, 0x04)
10C7  00C7        Jump to 00C9
10C9  00C9        RETURN
10CB  00CB        A8 10 66 10 87 10 46 10 

LFTROTB_1F:
10D3  0000        BEGIN
10D6  0003        ax = CheckState0C(0x00, 0x02)
10E8  0015        If (result.notequal) jump to 001A
10EA  0017        Jump to 00EF
10ED  001A        SetState00(0x00, 0x02, 0x01)
1101  002E        ax = GetFacing()
1108  0035        bx = ax
110A  0037        compare(bx, 0x03)
110D  003A        If (result.unsigned_equal_or_less_than) jump to 003F
110F  003C        Jump to 00CA
1112  003F        bx = bx * 2
1114  0041        Jump to mem[0x11C4+bx]
1119  0046        Push(02)
111D  004A        ax = GetNextTile()
1124  0051        SetMoveMap(stk[0], ax, 0x01, 0x04)
1138  0065        Jump to 00EF
113B  0068        Push(00)
113E  006B        ax = GetNextTile()
1145  0072        SetMoveMap(stk[0], ax, 0x01, 0x04)
1159  0086        Jump to 00EF
115B  0088        Push(01)
115F  008C        ax = GetNextTile()
1166  0093        SetMoveMap(stk[0], ax, 0x01, 0x04)
117A  00A7        Jump to 00EF
117C  00A9        Push(03)
1180  00AD        ax = GetNextTile()
1187  00B4        SetMoveMap(stk[0], ax, 0x01, 0x04)
119B  00C8        Jump to 00EF
119D  00CA        ax = GetFacing()
11A4  00D1        Push(ax)
11A5  00D2        ax = GetNextTile()
11AC  00D9        SetMoveMap(stk[0], ax, 0x01, 0x04)
11C0  00ED        Jump to 00EF
11C2  00EF        RETURN
11C4  00F1        7C 11 3B 11 5B 11 19 11 

BACKROTL_20:
11CC  0000        BEGIN
11CF  0003        ax = CheckState0C(0x00, 0x02)
11E1  0015        If (result.notequal) jump to 001A
11E3  0017        Jump to 00EF
11E6  001A        SetState00(0x00, 0x02, 0x01)
11FA  002E        ax = GetFacing()
1201  0035        bx = ax
1203  0037        compare(bx, 0x03)
1206  003A        If (result.unsigned_equal_or_less_than) jump to 003F
1208  003C        Jump to 00CA
120B  003F        bx = bx * 2
120D  0041        Jump to mem[0x12BD+bx]
1212  0046        Push(01)
1216  004A        ax = GetNextTile()
121D  0051        SetMoveMap(stk[0], ax, 0x01, 0x04)
1231  0065        Jump to 00EF
1234  0068        Push(03)
1238  006C        ax = GetNextTile()
123F  0073        SetMoveMap(stk[0], ax, 0x01, 0x04)
1253  0087        Jump to 00EF
1255  0089        Push(00)
1258  008C        ax = GetNextTile()
125F  0093        SetMoveMap(stk[0], ax, 0x01, 0x04)
1273  00A7        Jump to 00EF
1275  00A9        Push(02)
1279  00AD        ax = GetNextTile()
1280  00B4        SetMoveMap(stk[0], ax, 0x01, 0x04)
1294  00C8        Jump to 00EF
1296  00CA        ax = GetFacing()
129D  00D1        Push(ax)
129E  00D2        ax = GetNextTile()
12A5  00D9        SetMoveMap(stk[0], ax, 0x01, 0x04)
12B9  00ED        Jump to 00EF
12BB  00EF        RETURN
12BD  00F1        75 12 34 12 55 12 12 12 

RTROTA_21:
12C5  0000        BEGIN
12C8  0003        ax = CheckState0C(0x00, 0x02)
12DA  0015        If (result.notequal) jump to 001A
12DC  0017        Jump to 00EF
12DF  001A        SetState00(0x00, 0x02, 0x01)
12F3  002E        ax = GetFacing()
12FA  0035        bx = ax
12FC  0037        compare(bx, 0x03)
12FF  003A        If (result.unsigned_equal_or_less_than) jump to 003F
1301  003C        Jump to 00CA
1304  003F        bx = bx * 2
1306  0041        Jump to mem[0x13B6+bx]
130B  0046        Push(02)
130F  004A        ax = GetNextTile()
1316  0051        SetMoveMap(stk[0], ax, 0x01, 0x04)
132A  0065        Jump to 00EF
132D  0068        Push(00)
1330  006B        ax = GetNextTile()
1337  0072        SetMoveMap(stk[0], ax, 0x01, 0x04)
134B  0086        Jump to 00EF
134D  0088        Push(01)
1351  008C        ax = GetNextTile()
1358  0093        SetMoveMap(stk[0], ax, 0x01, 0x04)
136C  00A7        Jump to 00EF
136E  00A9        Push(03)
1372  00AD        ax = GetNextTile()
1379  00B4        SetMoveMap(stk[0], ax, 0x01, 0x04)
138D  00C8        Jump to 00EF
138F  00CA        ax = GetFacing()
1396  00D1        Push(ax)
1397  00D2        ax = GetNextTile()
139E  00D9        SetMoveMap(stk[0], ax, 0x01, 0x04)
13B2  00ED        Jump to 00EF
13B4  00EF        RETURN
13B6  00F1        6E 13 2D 13 4D 13 0B 13 

RTROTB_22:
13BE  0000        BEGIN
13C1  0003        ax = CheckState0C(0x00, 0x02)
13D3  0015        If (result.notequal) jump to 001A
13D5  0017        Jump to 00EF
13D8  001A        SetState00(0x00, 0x02, 0x01)
13EC  002E        ax = GetFacing()
13F3  0035        bx = ax
13F5  0037        compare(bx, 0x03)
13F8  003A        If (result.unsigned_equal_or_less_than) jump to 003F
13FA  003C        Jump to 00CA
13FD  003F        bx = bx * 2
13FF  0041        Jump to mem[0x14AF+bx]
1404  0046        Push(00)
1407  0049        ax = GetNextTile()
140E  0050        SetMoveMap(stk[0], ax, 0x01, 0x04)
1422  0064        Jump to 00EF
1425  0067        Push(02)
1429  006B        ax = GetNextTile()
1430  0072        SetMoveMap(stk[0], ax, 0x01, 0x04)
1444  0086        Jump to 00EF
1446  0088        Push(03)
144A  008C        ax = GetNextTile()
1451  0093        SetMoveMap(stk[0], ax, 0x01, 0x04)
1465  00A7        Jump to 00EF
1467  00A9        Push(01)
146B  00AD        ax = GetNextTile()
1472  00B4        SetMoveMap(stk[0], ax, 0x01, 0x04)
1486  00C8        Jump to 00EF
1488  00CA        ax = GetFacing()
148F  00D1        Push(ax)
1490  00D2        ax = GetNextTile()
1497  00D9        SetMoveMap(stk[0], ax, 0x01, 0x04)
14AB  00ED        Jump to 00EF
14AD  00EF        RETURN
14AF  00F1        67 14 25 14 46 14 04 14 

EMPTY:
14B7  0000        <Empty Function>

EMPTY:
14BC  0000        <Empty Function>

BADMNSTR_25:
14C1  0000        BEGIN
14C4  0003        ax = PartyCount()
14CC  000B        compare(ax, 0x0001)
14CF  000E        If (result.notequal) jump to 0037
14D1  0010        AddEncounter(0x1F, 0x01)
14E3  0022        AddEncounter(0x20, 0x02)
14F5  0034        Jump to 0152
14F8  0037        ax = PartyCount()
1500  003F        compare(ax, 0x0002)
1503  0042        If (result.notequal) jump to 007D
1505  0044        AddEncounter(0x20, 0x01)
1517  0056        AddEncounter(0x20, 0x02)
1529  0068        AddEncounter(0x20, 0x03)
153B  007A        Jump to 0152
153E  007D        ax = PartyCount()
1546  0085        compare(ax, 0x0003)
1549  0088        If (result.notequal) jump to 00E6
154B  008A        AddEncounter(0x1F, 0x01)
155D  009C        AddEncounter(0x20, 0x02)
156F  00AE        AddEncounter(0x21, 0x03)
1581  00C0        AddEncounter(0x1F, 0x05)
1593  00D2        AddEncounter(0x21, 0x06)
15A5  00E4        Jump to 0152
15A7  00E6        AddEncounter(0x21, 0x01)
15B9  00F8        AddEncounter(0x21, 0x02)
15CB  010A        AddEncounter(0x21, 0x03)
15DD  011C        AddEncounter(0x21, 0x04)
15EF  012E        AddEncounter(0x21, 0x05)
1601  0140        AddEncounter(0x21, 0x06)
1613  0152        RETURN

EMPTY:
1615  0000        <Empty Function>

EMPTY:
161A  0000        <Empty Function>

ITEMAENC_28:
161F  0000        BEGIN
1622  0003        ax = HasItem(0xB1)
1630  0011        If (result.equal) jump to 0041
1632  0013        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0x00, 0xCE)
1651  0032        ShowMessage(0x08D0) = Clerics use this room as a sanctuary.
165E  003F        Jump to 006E
1660  0041        AddTreasure(0x0BB8, 0x00, 0x00, 0x00, 0xCF, 0xB1)
1680  0061        ShowMessage(0x08F6) = A scroll fall from a Cleric's robe.
168D  006E        ax = PartyCount()
1695  0076        compare(ax, 0x0001)
1698  0079        If (result.notequal) jump to 0090
169A  007B        AddEncounter(0x25, 0x01)
16AC  008D        Jump to 0151
16AF  0090        ax = PartyCount()
16B7  0098        compare(ax, 0x0002)
16BA  009B        If (result.notequal) jump to 00C4
16BC  009D        AddEncounter(0x25, 0x01)
16CE  00AF        AddEncounter(0x25, 0x02)
16E0  00C1        Jump to 0151
16E3  00C4        ax = PartyCount()
16EB  00CC        compare(ax, 0x0003)
16EE  00CF        If (result.notequal) jump to 0109
16F0  00D1        AddEncounter(0x25, 0x01)
1702  00E3        AddEncounter(0x25, 0x02)
1714  00F5        AddEncounter(0x25, 0x05)
1726  0107        Jump to 0151
1728  0109        AddEncounter(0x25, 0x01)
173A  011B        AddEncounter(0x25, 0x02)
174C  012D        AddEncounter(0x25, 0x05)
175E  013F        AddEncounter(0x25, 0x06)
1770  0151        RETURN

SPECITMB_29:
1772  0000        BEGIN
1775  0003        ax = HasItem(0xCD)
1783  0011        If (result.equal) jump to 0041
1785  0013        AddTreasure(0x004B, 0x00, 0x00, 0x00, 0x00, 0xCB)
17A4  0032        ShowMessage(0x091A) = Rogues use this room as a hideout.
17B1  003F        Jump to 006E
17B3  0041        AddTreasure(0x0DAC, 0x00, 0x00, 0x00, 0xD0, 0xCD)
17D3  0061        ShowMessage(0x093D) = A Barbarian drops some potions when she sees you.
17E0  006E        ax = PartyCount()
17E8  0076        compare(ax, 0x0001)
17EB  0079        If (result.notequal) jump to 00A2
17ED  007B        AddEncounter(0x23, 0x01)
17FF  008D        AddEncounter(0x23, 0x02)
1811  009F        Jump to 0153
1814  00A2        ax = PartyCount()
181C  00AA        compare(ax, 0x0002)
181F  00AD        If (result.notequal) jump to 00F9
1821  00AF        AddEncounter(0x23, 0x01)
1833  00C1        AddEncounter(0x23, 0x02)
1845  00D3        AddEncounter(0x04, 0x05)
1857  00E5        AddEncounter(0x04, 0x06)
1869  00F7        Jump to 0153
186B  00F9        AddEncounter(0x23, 0x01)
187D  010B        AddEncounter(0x23, 0x02)
188F  011D        AddEncounter(0x23, 0x03)
18A1  012F        AddEncounter(0x22, 0x05)
18B3  0141        AddEncounter(0x22, 0x06)
18C5  0153        RETURN

ITEMCENC_2A:
18C7  0000        BEGIN
18CA  0003        ax = HasItem(0xCA)
18D8  0011        If (result.equal) jump to 0041
18DA  0013        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0xB6)
18F9  0032        ShowMessage(0x096F) = You sense evil in the room.
1906  003F        Jump to 006D
1908  0041        AddTreasure(0x1388, 0x00, 0x00, 0x00, 0x00, 0xCA)
1927  0060        ShowMessage(0x098B) = You see a wand on the floor.
1934  006D        ax = PartyCount()
193C  0075        compare(ax, 0x0001)
193F  0078        If (result.notequal) jump to 00A1
1941  007A        AddEncounter(0x19, 0x02)
1953  008C        AddEncounter(0x1B, 0x06)
1965  009E        Jump to 0164
1968  00A1        ax = PartyCount()
1970  00A9        compare(ax, 0x0002)
1973  00AC        If (result.notequal) jump to 00F8
1975  00AE        AddEncounter(0x19, 0x01)
1987  00C0        AddEncounter(0x19, 0x02)
1999  00D2        AddEncounter(0x1B, 0x05)
19AB  00E4        AddEncounter(0x1B, 0x06)
19BD  00F6        Jump to 0164
19BF  00F8        AddEncounter(0x1A, 0x01)
19D1  010A        AddEncounter(0x1A, 0x02)
19E3  011C        AddEncounter(0x19, 0x03)
19F5  012E        AddEncounter(0x19, 0x04)
1A07  0140        AddEncounter(0x1B, 0x05)
1A19  0152        AddEncounter(0x1B, 0x06)
1A2B  0164        RETURN

ITEMDECN_2B:
1A2D  0000        BEGIN
1A30  0003        ax = HasItem(0x92)
1A3E  0011        If (result.equal) jump to 0041
1A40  0013        AddTreasure(0x02EE, 0x00, 0x00, 0x00, 0x00, 0xCF)
1A5F  0032        ShowMessage(0x09A8) = The stench of reptiles assails you.
1A6C  003F        Jump to 006E
1A6E  0041        AddTreasure(0x09C4, 0x00, 0x00, 0x00, 0xB7, 0x92)
1A8E  0061        ShowMessage(0x09CC) = You hear hissing.
1A9B  006E        ax = PartyCount()
1AA3  0076        compare(ax, 0x0001)
1AA6  0079        If (result.notequal) jump to 00A2
1AA8  007B        AddEncounter(0x1C, 0x01)
1ABA  008D        AddEncounter(0x1E, 0x02)
1ACC  009F        Jump to 0165
1ACF  00A2        ax = PartyCount()
1AD7  00AA        compare(ax, 0x0002)
1ADA  00AD        If (result.notequal) jump to 00F9
1ADC  00AF        AddEncounter(0x1C, 0x01)
1AEE  00C1        AddEncounter(0x1E, 0x02)
1B00  00D3        AddEncounter(0x1C, 0x03)
1B12  00E5        AddEncounter(0x1E, 0x04)
1B24  00F7        Jump to 0165
1B26  00F9        AddEncounter(0x1D, 0x01)
1B38  010B        AddEncounter(0x1D, 0x02)
1B4A  011D        AddEncounter(0x1E, 0x03)
1B5C  012F        AddEncounter(0x1E, 0x04)
1B6E  0141        AddEncounter(0x1C, 0x05)
1B80  0153        AddEncounter(0x1C, 0x06)
1B92  0165        RETURN

WEAPAENC_2C:
1B94  0000        BEGIN
1B97  0003        ax = HasItem(0x3A)
1BA5  0011        If (result.equal) jump to 0042
1BA7  0013        AddTreasure(0x023F, 0x00, 0x00, 0x00, 0xCC, 0xCF)
1BC7  0033        ShowMessage(0x09DE) = Rogues surprise you.
1BD4  0040        Jump to 006E
1BD6  0042        AddTreasure(0x04B0, 0x00, 0x00, 0x00, 0x00, 0x3A)
1BF5  0061        ShowMessage(0x09F3) = A Knight drops a poleaxe as you approach.
1C02  006E        ax = PartyCount()
1C0A  0076        compare(ax, 0x0001)
1C0D  0079        If (result.notequal) jump to 00A2
1C0F  007B        AddEncounter(0x26, 0x01)
1C21  008D        AddEncounter(0x27, 0x02)
1C33  009F        Jump to 01BD
1C36  00A2        ax = PartyCount()
1C3E  00AA        compare(ax, 0x0002)
1C41  00AD        If (result.notequal) jump to 00E8
1C43  00AF        AddEncounter(0x26, 0x01)
1C55  00C1        AddEncounter(0x27, 0x02)
1C67  00D3        AddEncounter(0x25, 0x05)
1C79  00E5        Jump to 01BD
1C7C  00E8        ax = PartyCount()
1C84  00F0        compare(ax, 0x0003)
1C87  00F3        If (result.notequal) jump to 0151
1C89  00F5        AddEncounter(0x26, 0x01)
1C9B  0107        AddEncounter(0x25, 0x02)
1CAD  0119        AddEncounter(0x27, 0x03)
1CBF  012B        AddEncounter(0x25, 0x05)
1CD1  013D        AddEncounter(0x27, 0x06)
1CE3  014F        Jump to 01BD
1CE5  0151        AddEncounter(0x26, 0x01)
1CF7  0163        AddEncounter(0x26, 0x02)
1D09  0175        AddEncounter(0x24, 0x03)
1D1B  0187        AddEncounter(0x23, 0x04)
1D2D  0199        AddEncounter(0x27, 0x05)
1D3F  01AB        AddEncounter(0x25, 0x06)
1D51  01BD        RETURN

WEAPBENC_2D:
1D53  0000        BEGIN
1D56  0003        ax = HasItem(0x49)
1D64  0011        If (result.equal) jump to 0041
1D66  0013        AddTreasure(0x0384, 0x00, 0x00, 0x00, 0x00, 0xC9)
1D85  0032        ShowMessage(0x0A1D) = Nightmares loom up before you.
1D92  003F        Jump to 006E
1D94  0041        AddTreasure(0x1388, 0x00, 0x00, 0x00, 0xCB, 0x49)
1DB4  0061        ShowMessage(0x0A3C) = A Nightmare throws a bow aside to attack.
1DC1  006E        ax = PartyCount()
1DC9  0076        compare(ax, 0x0001)
1DCC  0079        If (result.notequal) jump to 0090
1DCE  007B        AddEncounter(0x13, 0x01)
1DE0  008D        Jump to 0151
1DE3  0090        ax = PartyCount()
1DEB  0098        compare(ax, 0x0002)
1DEE  009B        If (result.notequal) jump to 00C4
1DF0  009D        AddEncounter(0x13, 0x01)
1E02  00AF        AddEncounter(0x14, 0x02)
1E14  00C1        Jump to 0151
1E17  00C4        ax = PartyCount()
1E1F  00CC        compare(ax, 0x0003)
1E22  00CF        If (result.notequal) jump to 0109
1E24  00D1        AddEncounter(0x14, 0x01)
1E36  00E3        AddEncounter(0x13, 0x02)
1E48  00F5        AddEncounter(0x14, 0x03)
1E5A  0107        Jump to 0151
1E5C  0109        AddEncounter(0x13, 0x01)
1E6E  011B        AddEncounter(0x13, 0x02)
1E80  012D        AddEncounter(0x14, 0x03)
1E92  013F        AddEncounter(0x14, 0x04)
1EA4  0151        RETURN

ARMRAENC_2E:
1EA6  0000        BEGIN
1EA9  0003        ax = HasItem(0x7F)
1EB7  0011        If (result.equal) jump to 0042
1EB9  0013        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x4F, 0x02)
1ED9  0033        ShowMessage(0x0A66) = You stumble on some Dwarf Knights.
1EE6  0040        Jump to 006F
1EE8  0042        AddTreasure(0x1770, 0x00, 0x00, 0x00, 0xCF, 0x7F)
1F08  0062        ShowMessage(0x0A89) = The brilliant chainmail worn by a Knight blinds you.
1F15  006F        ax = PartyCount()
1F1D  0077        compare(ax, 0x0001)
1F20  007A        If (result.notequal) jump to 0091
1F22  007C        AddEncounter(0x28, 0x01)
1F34  008E        Jump to 0152
1F37  0091        ax = PartyCount()
1F3F  0099        compare(ax, 0x0002)
1F42  009C        If (result.notequal) jump to 00C5
1F44  009E        AddEncounter(0x28, 0x01)
1F56  00B0        AddEncounter(0x28, 0x02)
1F68  00C2        Jump to 0152
1F6B  00C5        ax = PartyCount()
1F73  00CD        compare(ax, 0x0003)
1F76  00D0        If (result.notequal) jump to 010A
1F78  00D2        AddEncounter(0x28, 0x01)
1F8A  00E4        AddEncounter(0x28, 0x02)
1F9C  00F6        AddEncounter(0x28, 0x04)
1FAE  0108        Jump to 0152
1FB0  010A        AddEncounter(0x28, 0x01)
1FC2  011C        AddEncounter(0x28, 0x02)
1FD4  012E        AddEncounter(0x28, 0x03)
1FE6  0140        AddEncounter(0x28, 0x06)
1FF8  0152        RETURN

ARMRBENC_2F:
1FFA  0000        BEGIN
1FFD  0003        ax = HasItem(0x5A)
200B  0011        If (result.equal) jump to 0040
200D  0013        AddTreasure(0x0000, 0x00, 0x00, 0x00, 0x00, 0xCE)
202B  0031        ShowMessage(0x0ABE) = You enter a den of thieves.
2038  003E        Jump to 006B
203A  0040        AddTreasure(0x0000, 0x00, 0x00, 0x00, 0x00, 0x5A)
2058  005E        ShowMessage(0x0ADA) = A Halfling Thief tries to wield a large shield.
2065  006B        ax = PartyCount()
206D  0073        compare(ax, 0x0001)
2070  0076        If (result.notequal) jump to 00B0
2072  0078        AddEncounter(0x24, 0x01)
2084  008A        AddEncounter(0x24, 0x02)
2096  009C        AddEncounter(0x24, 0x05)
20A8  00AE        Jump to 011C
20AA  00B0        AddEncounter(0x24, 0x01)
20BC  00C2        AddEncounter(0x24, 0x02)
20CE  00D4        AddEncounter(0x24, 0x03)
20E0  00E6        AddEncounter(0x24, 0x04)
20F2  00F8        AddEncounter(0x24, 0x05)
2104  010A        AddEncounter(0x24, 0x06)
2116  011C        RETURN

KEYENC_30:
2118  0000        BEGIN
211B  0003        ax = HasItem(0xE1)
2129  0011        If (result.equal) jump to 0042
212B  0013        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0xB7, 0xCE)
214B  0033        ShowMessage(0x0B0A) = The room is jammed with Rogues.
2158  0040        Jump to 006D
215A  0042        AddTreasure(0x0000, 0x00, 0x00, 0x00, 0x00, 0xE1)
2178  0060        ShowMessage(0x0B2A) = A Ranger wears the King's Domicile Key around his neck.
2185  006D        ax = PartyCount()
218D  0075        compare(ax, 0x0001)
2190  0078        If (result.notequal) jump to 00A1
2192  007A        AddEncounter(0x27, 0x01)
21A4  008C        AddEncounter(0x25, 0x05)
21B6  009E        Jump to 0176
21B9  00A1        ax = PartyCount()
21C1  00A9        compare(ax, 0x0002)
21C4  00AC        If (result.notequal) jump to 010A
21C6  00AE        AddEncounter(0x27, 0x01)
21D8  00C0        AddEncounter(0x26, 0x02)
21EA  00D2        AddEncounter(0x28, 0x03)
21FC  00E4        AddEncounter(0x25, 0x05)
220E  00F6        AddEncounter(0x25, 0x06)
2220  0108        Jump to 0176
2222  010A        AddEncounter(0x27, 0x01)
2234  011C        AddEncounter(0x28, 0x02)
2246  012E        AddEncounter(0x26, 0x03)
2258  0140        AddEncounter(0x28, 0x04)
226A  0152        AddEncounter(0x27, 0x05)
227C  0164        AddEncounter(0x25, 0x06)
228E  0176        RETURN

TELMESGA_31:
2290  0000        BEGIN
2293  0003        ShowMessage(0x0B62) = There is a teleport in the south wall.
22A0  0010        RETURN

TELMESGB_32:
22A2  0000        BEGIN
22A5  0003        ShowMessage(0x0B89) = There is a teleport to the south.
22B2  0010        RETURN

TELMESSC_33:
22B4  0000        BEGIN
22B7  0003        ShowMessage(0x0BAB) = There is a teleport to the north.
22C4  0010        RETURN

GOLDAENC_34:
22C6  0000        BEGIN
22C9  0003        ax = CheckState04(0x02, 0x38)
22DA  0014        compare(ax, 0x0001)
22DD  0017        If (result.notequal) jump to 003A
22DF  0019        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0x00, 0xB5)
22FE  0038        Jump to 006F
2300  003A        AddTreasure(0x1388, 0x00, 0x00, 0x00, 0xAB, 0xA8)
2320  005A        SetState00(0x02, 0x1F, 0x01)
2335  006F        ShowMessage(0x0BCD) = Banshees haunt this room.
2342  007C        ax = PartyCount()
234A  0084        compare(ax, 0x0001)
234D  0087        If (result.notequal) jump to 009E
234F  0089        AddEncounter(0x0E, 0x01)
2361  009B        Jump to 013D
2364  009E        ax = PartyCount()
236C  00A6        compare(ax, 0x0002)
236F  00A9        If (result.notequal) jump to 00E3
2371  00AB        AddEncounter(0x0E, 0x01)
2383  00BD        AddEncounter(0x0E, 0x02)
2395  00CF        AddEncounter(0x0E, 0x03)
23A7  00E1        Jump to 013D
23A9  00E3        AddEncounter(0x0F, 0x01)
23BB  00F5        AddEncounter(0x10, 0x02)
23CD  0107        AddEncounter(0x0F, 0x03)
23DF  0119        AddEncounter(0x11, 0x05)
23F1  012B        AddEncounter(0x10, 0x06)
2403  013D        RETURN

GOLDBENC_35:
2405  0000        BEGIN
2408  0003        ShowMessage(0x0BE7) = Deinons protect a chest.
2415  0010        ax = CheckState04(0x02, 0x39)
2426  0021        compare(ax, 0x0001)
2429  0024        If (result.notequal) jump to 0047
242B  0026        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0x04)
244A  0045        Jump to 007C
244C  0047        AddTreasure(0x1770, 0x00, 0x00, 0x00, 0xB6, 0xCE)
246C  0067        SetState00(0x02, 0x20, 0x01)
2481  007C        ax = PartyCount()
2489  0084        compare(ax, 0x0001)
248C  0087        If (result.notequal) jump to 009E
248E  0089        AddEncounter(0x1E, 0x01)
24A0  009B        Jump to 015F
24A3  009E        ax = PartyCount()
24AB  00A6        compare(ax, 0x0002)
24AE  00A9        If (result.notequal) jump to 00D2
24B0  00AB        AddEncounter(0x1E, 0x01)
24C2  00BD        AddEncounter(0x1E, 0x02)
24D4  00CF        Jump to 015F
24D7  00D2        ax = PartyCount()
24DF  00DA        compare(ax, 0x0003)
24E2  00DD        If (result.notequal) jump to 0117
24E4  00DF        AddEncounter(0x1E, 0x01)
24F6  00F1        AddEncounter(0x1E, 0x02)
2508  0103        AddEncounter(0x1E, 0x04)
251A  0115        Jump to 015F
251C  0117        AddEncounter(0x1E, 0x01)
252E  0129        AddEncounter(0x1E, 0x02)
2540  013B        AddEncounter(0x1E, 0x03)
2552  014D        AddEncounter(0x1E, 0x04)
2564  015F        RETURN

BACKROTR_36:
2566  0000        BEGIN
2569  0003        ax = CheckState0C(0x00, 0x02)
257B  0015        If (result.notequal) jump to 001A
257D  0017        Jump to 00EF
2580  001A        SetState00(0x00, 0x02, 0x01)
2594  002E        ax = GetFacing()
259B  0035        bx = ax
259D  0037        compare(bx, 0x03)
25A0  003A        If (result.unsigned_equal_or_less_than) jump to 003F
25A2  003C        Jump to 00CA
25A5  003F        bx = bx * 2
25A7  0041        Jump to mem[0x2657+bx]
25AC  0046        Push(01)
25B0  004A        ax = GetNextTile()
25B7  0051        SetMoveMap(stk[0], ax, 0x01, 0x04)
25CB  0065        Jump to 00EF
25CE  0068        Push(03)
25D2  006C        ax = GetNextTile()
25D9  0073        SetMoveMap(stk[0], ax, 0x01, 0x04)
25ED  0087        Jump to 00EF
25EF  0089        Push(00)
25F2  008C        ax = GetNextTile()
25F9  0093        SetMoveMap(stk[0], ax, 0x01, 0x04)
260D  00A7        Jump to 00EF
260F  00A9        Push(02)
2613  00AD        ax = GetNextTile()
261A  00B4        SetMoveMap(stk[0], ax, 0x01, 0x04)
262E  00C8        Jump to 00EF
2630  00CA        ax = GetFacing()
2637  00D1        Push(ax)
2638  00D2        ax = GetNextTile()
263F  00D9        SetMoveMap(stk[0], ax, 0x01, 0x04)
2653  00ED        Jump to 00EF
2655  00EF        RETURN
2657  00F1        0F 26 CE 25 EF 25 AC 25 

STRSMESA_37:
265F  0000        BEGIN
2662  0003        ShowMessage(0x0C00) = Stairs through the east gateway lead upstairs.
266F  0010        RETURN

STRSMESB_38:
2671  0000        BEGIN
2674  0003        ShowMessage(0x0C2F) = There are stairs to the north beyond the gateway.
2681  0010        RETURN

PLATFMMS_39:
2683  0000        BEGIN
2686  0003        ShowMessage(0x0C61) = There is an elevator platform to the north.
2693  0010        RETURN

STRSMESS_3A:
2695  0000        BEGIN
2698  0003        ShowMessage(0x0C8D) = Stairs through the west gateway lead down a level.
26A5  0010        RETURN

NPCCHATA_3B:
26A7  0000        BEGIN
26AA  0003        ShowMessage(0x0CC0) = You encounter a Human Wizard.
26B7  0010        ShowPortrait(0x002B)
26C4  001D        ax = UnknownFunctionEC(0x000F)
26D1  002A        compare(ax, 0x000A)
26D4  002D        If (result.unsigned_greater_than) jump to 003E
26D6  002F        ShowMessage(0x0CDE) = This is the lowest level of Cleowyn's Palace, yet you are merely at the beginning of the dungeon proper.
26E3  003C        Jump to 004B
26E5  003E        ShowMessage(0x0D47) = The Human Wizard chortles softly.
26F2  004B        RETURN

NPCCHATB_3C:
26F4  0000        BEGIN
26F7  0003        ShowMessage(0x0D69) = You encounter a Gnome Thief.
2704  0010        ShowPortrait(0x0024)
2711  001D        ax = UnknownFunctionEC(0x000F)
271E  002A        compare(ax, 0x0009)
2721  002D        If (result.unsigned_greater_than) jump to 003E
2723  002F        ShowMessage(0x0D86) = In the king's quarters is an elevator that will lift you up to the King's Palace. Cleowyn used this elevator to  by-pass the traps around his throne.
2730  003C        Jump to 004B
2732  003E        ShowMessage(0x0E1C) = The Gnome Thief tiptoes away as you draw near.
273F  004B        RETURN

NPCCHATC_3D:
2741  0000        BEGIN
2744  0003        ShowMessage(0x0E4B) = You encounter a Gnome Barbarian.
2751  0010        ShowPortrait(0x0019)
275E  001D        ax = UnknownFunctionEC(0x000F)
276B  002A        compare(ax, 0x0005)
276E  002D        If (result.unsigned_greater_than) jump to 003E
2770  002F        ShowMessage(0x0E6C) = The name of the Elemental bound by the wizard Arnakkian is En-li-kil. This Elemental commands Time itself.
277D  003C        Jump to 0058
277F  003E        DoDamage(0x004B)
278C  004B        ShowMessage(0x0ED7) = The Gnome Barbarian warns you to stay away.
2799  0058        RETURN

STRSTELE_3E:
279B  0000        BEGIN
279E  0003        SetMoveMap(0x03, 0xE0, 0x03, 0x03)
27B9  001E        RETURN

EMPTY:
27BB  0000        <Empty Function>

EMPTY:
27C0  0000        <Empty Function>

EMPTY:
27C5  0000        <Empty Function>

EMPTY:
27CA  0000        <Empty Function>

EMPTY:
27CF  0000        <Empty Function>

EMPTY:
27D4  0000        <Empty Function>

EMPTY:
27D9  0000        <Empty Function>

EMPTY:
27DE  0000        <Empty Function>

EMPTY:
27E3  0000        <Empty Function>

EMPTY:
27E8  0000        <Empty Function>

EMPTY:
27ED  0000        <Empty Function>

EMPTY:
27F2  0000        <Empty Function>

EMPTY:
27F7  0000        <Empty Function>

EMPTY:
27FC  0000        <Empty Function>

EMPTY:
2801  0000        <Empty Function>

EMPTY:
2806  0000        <Empty Function>

EMPTY:
280B  0000        <Empty Function>

EMPTY:
2810  0000        <Empty Function>

EMPTY:
2815  0000        <Empty Function>

EMPTY:
281A  0000        <Empty Function>

EMPTY:
281F  0000        <Empty Function>

EMPTY:
2824  0000        <Empty Function>

EMPTY:
2829  0000        <Empty Function>

EMPTY:
282E  0000        <Empty Function>

EMPTY:
2833  0000        <Empty Function>

EMPTY:
2838  0000        <Empty Function>

EMPTY:
283D  0000        <Empty Function>

EMPTY:
2842  0000        <Empty Function>

EMPTY:
2847  0000        <Empty Function>

EMPTY:
284C  0000        <Empty Function>

EMPTY:
2851  0000        <Empty Function>

EMPTY:
2856  0000        <Empty Function>

EMPTY:
285B  0000        <Empty Function>

EMPTY:
2860  0000        <Empty Function>

EMPTY:
2865  0000        <Empty Function>

EMPTY:
286A  0000        <Empty Function>

EMPTY:
286F  0000        <Empty Function>

EMPTY:
2874  0000        <Empty Function>

EMPTY:
2879  0000        <Empty Function>

EMPTY:
287E  0000        <Empty Function>

EMPTY:
2883  0000        <Empty Function>

EMPTY:
2888  0000        <Empty Function>

EMPTY:
288D  0000        <Empty Function>

EMPTY:
2892  0000        <Empty Function>

EMPTY:
2897  0000        <Empty Function>

EMPTY:
289C  0000        <Empty Function>

EMPTY:
28A1  0000        <Empty Function>

EMPTY:
28A6  0000        <Empty Function>

EMPTY:
28AB  0000        <Empty Function>

EMPTY:
28B0  0000        <Empty Function>

EMPTY:
28B5  0000        <Empty Function>

EMPTY:
28BA  0000        <Empty Function>

EMPTY:
28BF  0000        <Empty Function>

EMPTY:
28C4  0000        <Empty Function>

EMPTY:
28C9  0000        <Empty Function>

EMPTY:
28CE  0000        <Empty Function>

EMPTY:
28D3  0000        <Empty Function>

EMPTY:
28D8  0000        <Empty Function>

EMPTY:
28DD  0000        <Empty Function>

EMPTY:
28E2  0000        <Empty Function>

EMPTY:
28E7  0000        <Empty Function>

EMPTY:
28EC  0000        <Empty Function>

EMPTY:
28F1  0000        <Empty Function>

EMPTY:
28F6  0000        <Empty Function>

EMPTY:
28FB  0000        <Empty Function>

EMPTY:
2900  0000        <Empty Function>

EMPTY:
2905  0000        <Empty Function>

EMPTY:
290A  0000        <Empty Function>

EMPTY:
290F  0000        <Empty Function>

EMPTY:
2914  0000        <Empty Function>

EMPTY:
2919  0000        <Empty Function>

EMPTY:
291E  0000        <Empty Function>

EMPTY:
2923  0000        <Empty Function>

EMPTY:
2928  0000        <Empty Function>

EMPTY:
292D  0000        <Empty Function>

EMPTY:
2932  0000        <Empty Function>

EMPTY:
2937  0000        <Empty Function>

EMPTY:
293C  0000        <Empty Function>

EMPTY:
2941  0000        <Empty Function>

EMPTY:
2946  0000        <Empty Function>

EMPTY:
294B  0000        <Empty Function>

EMPTY:
2950  0000        <Empty Function>

EMPTY:
2955  0000        <Empty Function>

EMPTY:
295A  0000        <Empty Function>

EMPTY:
295F  0000        <Empty Function>

EMPTY:
2964  0000        <Empty Function>

EMPTY:
2969  0000        <Empty Function>

EMPTY:
296E  0000        <Empty Function>

EMPTY:
2973  0000        <Empty Function>

EMPTY:
2978  0000        <Empty Function>

EMPTY:
297D  0000        <Empty Function>

EMPTY:
2982  0000        <Empty Function>

EMPTY:
2987  0000        <Empty Function>

EMPTY:
298C  0000        <Empty Function>

EMPTY:
2991  0000        <Empty Function>

EMPTY:
2996  0000        <Empty Function>

EMPTY:
299B  0000        <Empty Function>

EMPTY:
29A0  0000        <Empty Function>

EMPTY:
29A5  0000        <Empty Function>

EMPTY:
29AA  0000        <Empty Function>

EMPTY:
29AF  0000        <Empty Function>

EMPTY:
29B4  0000        <Empty Function>

EMPTY:
29B9  0000        <Empty Function>

EMPTY:
29BE  0000        <Empty Function>

EMPTY:
29C3  0000        <Empty Function>

EMPTY:
29C8  0000        <Empty Function>

EMPTY:
29CD  0000        <Empty Function>

EMPTY:
29D2  0000        <Empty Function>

EMPTY:
29D7  0000        <Empty Function>

EMPTY:
29DC  0000        <Empty Function>

EMPTY:
29E1  0000        <Empty Function>

EMPTY:
29E6  0000        <Empty Function>

EMPTY:
29EB  0000        <Empty Function>

EMPTY:
29F0  0000        <Empty Function>

EMPTY:
29F5  0000        <Empty Function>

EMPTY:
29FA  0000        <Empty Function>

EMPTY:
29FF  0000        <Empty Function>

EMPTY:
2A04  0000        <Empty Function>

EMPTY:
2A09  0000        <Empty Function>

EMPTY:
2A0E  0000        <Empty Function>

EMPTY:
2A13  0000        <Empty Function>

EMPTY:
2A18  0000        <Empty Function>

EMPTY:
2A1D  0000        <Empty Function>

EMPTY:
2A22  0000        <Empty Function>

EMPTY:
2A27  0000        <Empty Function>

EMPTY:
2A2C  0000        <Empty Function>

EMPTY:
2A31  0000        <Empty Function>

EMPTY:
2A36  0000        <Empty Function>

EMPTY:
2A3B  0000        <Empty Function>

EMPTY:
2A40  0000        <Empty Function>

EMPTY:
2A45  0000        <Empty Function>

EMPTY:
2A4A  0000        <Empty Function>

EMPTY:
2A4F  0000        <Empty Function>

EMPTY:
2A54  0000        <Empty Function>

EMPTY:
2A59  0000        <Empty Function>

EMPTY:
2A5E  0000        <Empty Function>

EMPTY:
2A63  0000        <Empty Function>

EMPTY:
2A68  0000        <Empty Function>

EMPTY:
2A6D  0000        <Empty Function>

EMPTY:
2A72  0000        <Empty Function>

EMPTY:
2A77  0000        <Empty Function>

EMPTY:
2A7C  0000        <Empty Function>

EMPTY:
2A81  0000        <Empty Function>

EMPTY:
2A86  0000        <Empty Function>

EMPTY:
2A8B  0000        <Empty Function>

EMPTY:
2A90  0000        <Empty Function>

EMPTY:
2A95  0000        <Empty Function>

EMPTY:
2A9A  0000        <Empty Function>

EMPTY:
2A9F  0000        <Empty Function>

EMPTY:
2AA4  0000        <Empty Function>

EMPTY:
2AA9  0000        <Empty Function>

EMPTY:
2AAE  0000        <Empty Function>

EMPTY:
2AB3  0000        <Empty Function>

EMPTY:
2AB8  0000        <Empty Function>

EMPTY:
2ABD  0000        <Empty Function>

EMPTY:
2AC2  0000        <Empty Function>

EMPTY:
2AC7  0000        <Empty Function>

EMPTY:
2ACC  0000        <Empty Function>

EMPTY:
2AD1  0000        <Empty Function>

EMPTY:
2AD6  0000        <Empty Function>

EMPTY:
2ADB  0000        <Empty Function>

EMPTY:
2AE0  0000        <Empty Function>

EMPTY:
2AE5  0000        <Empty Function>

EMPTY:
2AEA  0000        <Empty Function>

EMPTY:
2AEF  0000        <Empty Function>

EMPTY:
2AF4  0000        <Empty Function>

EMPTY:
2AF9  0000        <Empty Function>

EMPTY:
2AFE  0000        <Empty Function>

EMPTY:
2B03  0000        <Empty Function>

EMPTY:
2B08  0000        <Empty Function>

EMPTY:
2B0D  0000        <Empty Function>

EMPTY:
2B12  0000        <Empty Function>

EMPTY:
2B17  0000        <Empty Function>

EMPTY:
2B1C  0000        <Empty Function>

EMPTY:
2B21  0000        <Empty Function>

EMPTY:
2B26  0000        <Empty Function>

EMPTY:
2B2B  0000        <Empty Function>

EMPTY:
2B30  0000        <Empty Function>

EMPTY:
2B35  0000        <Empty Function>

EMPTY:
2B3A  0000        <Empty Function>

EMPTY:
2B3F  0000        <Empty Function>

EMPTY:
2B44  0000        <Empty Function>

EMPTY:
2B49  0000        <Empty Function>

EMPTY:
2B4E  0000        <Empty Function>

EMPTY:
2B53  0000        <Empty Function>

EMPTY:
2B58  0000        <Empty Function>

EMPTY:
2B5D  0000        <Empty Function>

EMPTY:
2B62  0000        <Empty Function>

EMPTY:
2B67  0000        <Empty Function>

EMPTY:
2B6C  0000        <Empty Function>

EMPTY:
2B71  0000        <Empty Function>

EMPTY:
2B76  0000        <Empty Function>

EMPTY:
2B7B  0000        <Empty Function>

STRINGS:
03FC: You found a trapdoor.
0412: You fall through a trapdoor.
042F: You spot a trapdoor.
0444: You fall through a trapdoor.
0461: You detect a trapdoor.
0478: You fall through a trapdoor.
0495: You escape a trapdoor.
04AC: You fall through a trapdoor.
04C9: You notice a trapdoor.
04E0: You fall through a trapdoor.
04FD: There is a trapdoor in the floor.
051F: You fall through a trapdoor.
053C: You discover a trapdoor.
0555: You fall through a trapdoor.
0572: You detect a trapdoor.
0589: You fall through a trapdoor.
05A6: You spot a trapdoor.
05BB: You fall through a trapdoor.
05D8: You detect a trapdoor.
05EF: You fall through a trapdoor.
060C: A trapdoor is in this room.
0628: You fall through a trapdoor.
0645: You sidestep a trapdoor.
065E: You fall through a trapdoor.
067B: You avoid a trapdoor.
0691: You fall through a trapdoor.
06AE: You soon have the door unlocked.
06CF: The door is locked.
06E3: Your aptitude at opening locks pays off.
070C: The door is locked.
0720: You succeed at picking the door lock.
0746: The door is locked.
075A: The door lock is no match for your skills.
0785: The door is locked.
0799: You deftly trip the door lock.
07B8: The door is locked.
07CC: You quickly have the door open.
07EC: The door is locked.
0800: You push on the door and open it.
0822: The door is stuck shut.
083A: You force the door open by muscle power.
0863: The door is stuck shut.
087B: The Domicile Key opens the door!
089C: The door is locked.
08B0: You have spotted a secret door!
08D0: Clerics use this room as a sanctuary.
08F6: A scroll fall from a Cleric's robe.
091A: Rogues use this room as a hideout.
093D: A Barbarian drops some potions when she sees you.
096F: You sense evil in the room.
098B: You see a wand on the floor.
09A8: The stench of reptiles assails you.
09CC: You hear hissing.
09DE: Rogues surprise you.
09F3: A Knight drops a poleaxe as you approach.
0A1D: Nightmares loom up before you.
0A3C: A Nightmare throws a bow aside to attack.
0A66: You stumble on some Dwarf Knights.
0A89: The brilliant chainmail worn by a Knight blinds you.
0ABE: You enter a den of thieves.
0ADA: A Halfling Thief tries to wield a large shield.
0B0A: The room is jammed with Rogues.
0B2A: A Ranger wears the King's Domicile Key around his neck.
0B62: There is a teleport in the south wall.
0B89: There is a teleport to the south.
0BAB: There is a teleport to the north.
0BCD: Banshees haunt this room.
0BE7: Deinons protect a chest.
0C00: Stairs through the east gateway lead upstairs.
0C2F: There are stairs to the north beyond the gateway.
0C61: There is an elevator platform to the north.
0C8D: Stairs through the west gateway lead down a level.
0CC0: You encounter a Human Wizard.
0CDE: This is the lowest level of Cleowyn's Palace, yet you are merely at the beginning of the dungeon proper.
0D47: The Human Wizard chortles softly.
0D69: You encounter a Gnome Thief.
0D86: In the king's quarters is an elevator that will lift you up to the King's Palace. Cleowyn used this elevator to  by-pass the traps around his throne.
0E1C: The Gnome Thief tiptoes away as you draw near.
0E4B: You encounter a Gnome Barbarian.
0E6C: The name of the Elemental bound by the wizard Arnakkian is En-li-kil. This Elemental commands Time itself.
0ED7: The Gnome Barbarian warns you to stay away.
