STARSADN_01:
0003  0000        BEGIN
0006  0003        ax = CheckLevel(0x0014)
0014  0011        If (result.equal) jump to 002F
0016  0013        GoMap(00, 0x4D, 0x01, 0x33)
0030  002D        Jump to 0059
0032  002F        Push(00)
0035  0032        ax = SetExitability(ax) // ax is usually 0 following equality check
003C  0039        Push(ax)
003D  003A        ax = GetNextTile()
0044  0041        Push(ax)
0045  0042        Move(stk[0], stk[1], stk[2])
004F  004C        ShowMessage(0x03FC) = Heroes of level 20 or more may go on.
005C  0059        RETURN

STRSMESA_02:
005E  0000        BEGIN
0061  0003        TileIsNoJoinArea()
0069  000B        ShowMessage(0x0422) = The gate to the North leads down a level.
0076  0018        RETURN

TELPRTUP_03:
0078  0000        BEGIN
007B  0003        GoMap(0x02, 0xD8, 0x01, 0x04)
0096  001E        RETURN

TELEMESS_04:
0098  0000        BEGIN
009B  0003        ShowMessage(0x044C) = The gate to the North leads upward.
00A8  0010        RETURN

TELETAVR_05:
00AA  0000        BEGIN
00AD  0003        ax = CheckLevel(0x0014)
00BB  0011        If (result.equal) jump to 0030
00BD  0013        GoMap(0x02, 0x4D, 0x01, 0x33)
00D8  002E        Jump to 005A
00DA  0030        Push(00)
00DD  0033        ax = SetExitability(ax) // ax is usually 0 following equality check
00E4  003A        Push(ax)
00E5  003B        ax = GetNextTile()
00EC  0042        Push(ax)
00ED  0043        Move(stk[0], stk[1], stk[2])
00F7  004D        ShowMessage(0x0470) = Heroes of level 20 or more may enter.
0104  005A        RETURN

TELPRTMS_06:
0106  0000        BEGIN
0109  0003        TileIsNoJoinArea()
0111  000B        ShowMessage(0x0496) = The gate to the south leads downward.
011E  0018        RETURN

STAIRMSS_07:
0120  0000        BEGIN
0123  0003        ShowMessage(0x04BC) = The stairs to the south lead to the Tavern
0130  0010        RETURN

TAVERN_08:
0132  0000        BEGIN
0135  0003        ExitDungeon()
013D  000B        RETURN

SPECIALD_09:
013F  0000        BEGIN
0142  0003        ax = CheckState(0x02, 0x42)
0153  0014        compare(ax, 0x0005)
0156  0017        If (result.notequal) jump to 0028
0158  0019        ShowMessage(0x04E7) = You have used up the supplies in the Infirmary.
0165  0026        Jump to 0066
0167  0028        SetState(0x02, 0x42, 0x43)
017C  003D        ax = GetMaxHits()
0183  0044        Push(ax)
0184  0045        ax = GetCurrentHits()
018B  004C        dx = Pop()
018C  004D        dx = dx - ax
018E  004F        AddHealth(dx)
0198  0059        ShowMessage(0x0517) = You have discovered the Thieves' Infirmary.  All your wounds have been cured!
01A5  0066        RETURN

MONENCA_0A:
01A7  0000        BEGIN
01AA  0003        ShowMessage(0x0565) = You surprise creatures eating lunch!
01B7  0010        AddEncounter(0x19, 0x01)
01C9  0022        AddEncounter(0x1A, 0x02)
01DB  0034        AddEncounter(0x1D, 0x03)
01ED  0046        RETURN

MONENCB_0B:
01EF  0000        BEGIN
01F2  0003        ShowMessage(0x058A) = You stumble upon some rather nasty monsters.
01FF  0010        AddTreasure(0x1194, 0x00, 0x00, 0x00, 0xB2, 0xCD)
021F  0030        AddEncounter(0x1E, 0x01)
0231  0042        AddEncounter(0x22, 0x02)
0243  0054        AddEncounter(0x1B, 0x03)
0255  0066        AddEncounter(0x25, 0x04)
0267  0078        RETURN

MONENCC_0C:
0269  0000        BEGIN
026C  0003        ShowMessage(0x05B7) = A group of restless undead surprise you!
0279  0010        ax = PartyCount()
0281  0018        compare(ax, 0x0001)
0284  001B        If (result.equal) jump to 002A
0286  001D        ax = PartyCount()
028E  0025        compare(ax, 0x0002)
0291  0028        If (result.notequal) jump to 0062
0293  002A        AddEncounter(0x1C, 0x01)
02A5  003C        AddEncounter(0x1F, 0x02)
02B7  004E        AddEncounter(0x1D, 0x03)
02C9  0060        Jump to 00BC
02CB  0062        AddEncounter(0x1C, 0x01)
02DD  0074        AddEncounter(0x1C, 0x02)
02EF  0086        AddEncounter(0x1D, 0x03)
0301  0098        AddEncounter(0x1D, 0x04)
0313  00AA        AddEncounter(0x1F, 0x05)
0325  00BC        RETURN

EMPTY:
0327  0000        <Empty Function>

MONENCE_0E:
032C  0000        BEGIN
032F  0003        ax = HasItem(0xBE)
033D  0011        If (result.equal) jump to 0035
033F  0013        AddTreasure(0x06D6, 0x00, 0x00, 0x00, 0xBB, 0xC6)
035F  0033        Jump to 0055
0361  0035        AddTreasure(0x0BB8, 0x00, 0x00, 0x00, 0xBB, 0xBE)
0381  0055        ShowMessage(0x05E0) = You are attacked by Mages of the Thieves' Guild out walking their pets!
038E  0062        AddEncounter(0x25, 0x01)
03A0  0074        AddEncounter(0x26, 0x05)
03B2  0086        AddEncounter(0x27, 0x06)
03C4  0098        RETURN

MONENCF_0F:
03C6  0000        BEGIN
03C9  0003        ax = HasItem(0x68)
03D7  0011        If (result.equal) jump to 0041
03D9  0013        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0x00, 0xB6)
03F8  0032        ShowMessage(0x0628) = You stumble upon mean animals out foraging!
0405  003F        Jump to 006D
0407  0041        AddTreasure(0x2EE0, 0x00, 0x00, 0x00, 0x00, 0x68)
0426  0060        ShowMessage(0x0654) = You stumble upon foraging animals! They found something shiny!
0433  006D        AddEncounter(0x19, 0x01)
0445  007F        AddEncounter(0x20, 0x02)
0457  0091        AddEncounter(0x21, 0x05)
0469  00A3        RETURN

FLSPECA_10:
046B  0000        BEGIN
046E  0003        ax = CheckState(0x02, 0x41)
047F  0014        compare(ax, 0x0001)
0482  0017        If (result.notequal) jump to 0028
0484  0019        ShowMessage(0x0693) = The storage room has been emptied by other adventurers.
0491  0026        Jump to 007F
0493  0028        GiveItem(0x59)
049F  0034        GiveItem(0x48)
04AB  0040        GiveItem(0xBD)
04B7  004C        ModifyGold(0x2710)
04C8  005D        SetState(0x02, 0x41, 0x01)
04DD  0072        ShowMessage(0x06CB) = You found a storage room.  Most items are worthless, but in the refuse are a few treasures.
04EA  007F        RETURN

FLSPECB_11:
04EC  0000        BEGIN
04EF  0003        ax = CheckState(0x02, 0x3E)
0500  0014        compare(ax, 0x0001)
0503  0017        If (result.notequal) jump to 0028
0505  0019        ShowMessage(0x0727) = Thieves have emptied this room.
0512  0026        Jump to 0097
0514  0028        GiveItem(0xB0)
0520  0034        GiveItem(0xB0)
052C  0040        GiveItem(0xB4)
0538  004C        GiveItem(0xCD)
0544  0058        GiveItem(0xD0)
0550  0064        ModifyGold(0x3A98)
0561  0075        SetState(0x02, 0x3E, 0x01)
0576  008A        ShowMessage(0x0747) = In a cabinet are some scrolls and potions, and 15,000 Gold Pieces in a sack.
0583  0097        RETURN

FLSPECC_12:
0585  0000        BEGIN
0588  0003        ax = CheckState(0x02, 0x43)
0599  0014        compare(ax, 0x0001)
059C  0017        If (result.notequal) jump to 0039
059E  0019        ModifyGold(0x0001)
05AF  002A        ShowMessage(0x0794) = You find 1 gold piece in an empty safe.
05BC  0037        Jump to 0090
05BE  0039        GiveItem(0x7F)
05CA  0045        GiveItem(0xB1)
05D6  0051        GiveItem(0x6B)
05E2  005D        ModifyGold(0x61A8)
05F3  006E        SetState(0x02, 0x43, 0x01)
0608  0083        ShowMessage(0x07BC) = The safe contains several treasures and 25,000 gold pieces!
0615  0090        RETURN

FLSPECD_13:
0617  0000        BEGIN
061A  0003        ax = HasItem(0xFB)
0628  0011        If (result.equal) jump to 0023
062A  0013        ShowMessage(0x07F8) = The room has been ransacked!
0637  0020        Jump to 0150
063A  0023        ax = GetGuild()
0641  002A        compare(ax, 0x0003)
0644  002D        If (result.equal) jump to 0032
0646  002F        Jump to 00B1
0649  0032        SetState(0x02, 0x3F, 0x01)
065E  0047        ShowMessage(0x0815) = Your familiarity with thieving helps you avoid a vicious trap!
066B  0054        ShowMessage(0x0854) = You find some items and 5000 pieces of gold.
0678  0061        GiveItem(0xFB)
0684  006D        GiveItem(0x33)
0690  0079        GiveItem(0x4C)
069C  0085        GiveItem(0xC9)
06A8  0091        GiveItem(0xB7)
06B4  009D        ModifyGold(0x1388)
06C5  00AE        Jump to 0150
06C8  00B1        ShowMessage(0x0881) = You find several items and 5000 pieces of gold.
06D5  00BE        ShowMessage(0x08B1) = Unfortunately, you overlook the cleverly hidden trap that protects the treasure.
06E2  00CB        GiveItem(0xFB)
06EE  00D7        GiveItem(0x33)
06FA  00E3        GiveItem(0x4C)
0706  00EF        GiveItem(0xC9)
0712  00FB        GiveItem(0xB7)
071E  0107        ModifyGold(0x1388)
072F  0118        ax = UnknownFunction1C(01)
073B  0124        ax = GetCurrentHits()
0742  012B        bx = 0x0002
0745  012E        ax = ax / bx (signed, dx = quotient)
0748  0131        DoDamage(ax)
0752  013B        SetState(0x02, 0x3F, 0x01)
0767  0150        RETURN

FLSPECE_14:
0769  0000        BEGIN
076C  0003        ax = CheckState(0x02, 0x44)
077D  0014        compare(ax, 0x0001)
0780  0017        If (result.notequal) jump to 0028
0782  0019        ShowMessage(0x0902) = You found a sleeping thief who cannot be roused from deep slumber.
078F  0026        Jump to 005B
0791  0028        AddExperience(0x00003A98)
07A2  0039        SetState(0x02, 0x44, 0x01)
07B7  004E        ShowMessage(0x0945) = A wise old thief bends your ear with stories of his exploits.  His story is very helpful.
07C4  005B        RETURN

FLSPECF_15:
07C6  0000        BEGIN
07C9  0003        ShowPortrait(0x0022)
07D6  0010        ShowMessage(0x099F) = The Club and Axe Training Center.  All who lack this skill gain enlightenment and training.
07E3  001D        ax = GetSkillLevel(0x01)
07EF  0029        RefreshCompareFlags(ax)
07F1  002B        If (result.notequal) jump to 004D
07F3  002D        SetSkillLevel(0x01, 0x02)
0804  003E        ShowMessage(0x09FB) = Thieves provide you with training in Clubs and Axes!
0811  004B        Jump to 005A
0813  004D        ShowMessage(0x0A30) = You have already trained in this skill. The thieves cannot help you any further.
0820  005A        RETURN

FLSPECG_16:
0822  0000        BEGIN
0825  0003        ax = CheckState3(0x02, 0x45)
0838  0016        If (result.equal) jump to 007A
083A  0018        ShowPortrait(0x0023)
0847  0025        ShowMessage(0x0A81) = A wise old thief will teach you the Bard Skill!
0854  0032        SetState(0x02, 0x45, 0x01)
0869  0047        ax = GetSkillLevel(0x0C)
0875  0053        compare(ax, 0x000C)
0878  0056        If (result.unsigned_greater_than) jump to 006B
087A  0058        SetSkillLevel(0x0C, 0x02)
088B  0069        Jump to 0078
088D  006B        ShowMessage(0x0AB1) = You are already pretty good at Barding, and he cannot help you further.
089A  0078        Jump to 0094
089C  007A        ShowPortrait(0x0023)
08A9  0087        ShowMessage(0x0AF9) = The wise old thief has already taught you all he knows.
08B6  0094        RETURN

FLSPECH_17:
08B8  0000        BEGIN
08BB  0003        ShowPortrait(0x0026)
08C8  0010        ShowMessage(0x0B31) = The Fencing Training Center.  All who lack this skill gain enlightenment and training.
08D5  001D        ax = GetSkillLevel(0x05)
08E1  0029        RefreshCompareFlags(ax)
08E3  002B        If (result.notequal) jump to 004D
08E5  002D        SetSkillLevel(0x05, 0x02)
08F6  003E        ShowMessage(0x0B88) = Thieves provide you with training in the use of Swords!
0903  004B        Jump to 005A
0905  004D        ShowMessage(0x0BC0) = You have already trained in this skill. The thieves cannot help you any further.
0912  005A        RETURN

FLSPECI_18:
0914  0000        BEGIN
0917  0003        ax = CheckState3(0x02, 0x64)
092A  0016        If (result.equal) jump to 007A
092C  0018        ShowPortrait(0x0024)
0939  0025        ShowMessage(0x0C11) = A wise young thief will teach you the Detect Skill!
0946  0032        SetState(0x02, 0x64, 0x01)
095B  0047        ax = GetSkillLevel(0x0D)
0967  0053        compare(ax, 0x000C)
096A  0056        If (result.unsigned_greater_than) jump to 006B
096C  0058        SetSkillLevel(0x0D, 0x02)
097D  0069        Jump to 0078
097F  006B        ShowMessage(0x0C45) = You are already pretty good at detection, and she cannot help you further.
098C  0078        Jump to 0094
098E  007A        ShowPortrait(0x0024)
099B  0087        ShowMessage(0x0C90) = The young thief has already taught you all she knows.
09A8  0094        RETURN

FLSPECJ_19:
09AA  0000        BEGIN
09AD  0003        ShowMessage(0x0CC6) = The Staff Training Center.  All who lack this skill gain enlightenment and training.
09BA  0010        ax = GetSkillLevel(0x15)
09C6  001C        RefreshCompareFlags(ax)
09C8  001E        If (result.notequal) jump to 004D
09CA  0020        SetSkillLevel(0x15, 0x02)
09DB  0031        ShowPortrait(0x0023)
09E8  003E        ShowMessage(0x0D1B) = Thieves provide you with training in the use of Staves!
09F5  004B        Jump to 0067
09F7  004D        ShowPortrait(0x0023)
0A04  005A        ShowMessage(0x0D53) = You have already trained in this skill. The thieves cannot help you any further.
0A11  0067        RETURN

FLSPECK_1A:
0A13  0000        BEGIN
0A16  0003        ax = CheckState3(0x02, 0x65)
0A29  0016        If (result.equal) jump to 007A
0A2B  0018        ShowPortrait(0x0025)
0A38  0025        ShowMessage(0x0DA4) = A wise old thief will teach you the Lockpick Skill!
0A45  0032        SetState(0x02, 0x65, 0x01)
0A5A  0047        ax = GetSkillLevel(0x0E)
0A66  0053        compare(ax, 0x000C)
0A69  0056        If (result.unsigned_greater_than) jump to 006B
0A6B  0058        SetSkillLevel(0x0E, 0x02)
0A7C  0069        Jump to 0078
0A7E  006B        ShowMessage(0x0DD8) = You are already pretty good at picking locks, and he cannot help you further.
0A8B  0078        Jump to 0094
0A8D  007A        ShowPortrait(0x0025)
0A9A  0087        ShowMessage(0x0E26) = The old thief has already taught you all he knows.
0AA7  0094        RETURN

FLSPECL_1B:
0AA9  0000        BEGIN
0AAC  0003        ax = CheckState2(0x02, 0x68)
0ABF  0016        If (result.equal) jump to 0034
0AC1  0018        ShowPortrait(0x0042)
0ACE  0025        ShowMessage(0x0E59) = The waters from Sinestra's Fountain are invigorating, but have no further effect.
0ADB  0032        Jump to 0090
0ADD  0034        SetState(0x02, 0x68, 0x01)
0AF2  0049        ShowPortrait(0x0042)
0AFF  0056        ax = GetMaxHits()
0B06  005D        Push(ax)
0B07  005E        ax = GetCurrentHits()
0B0E  0065        dx = Pop()
0B0F  0066        dx = dx - ax
0B11  0068        AddHealth(dx)
0B1B  0072        AddExperience(0x00003A98)
0B2C  0083        ShowMessage(0x0EAB) = You have discovered Sinestra's Fountain.  You feel healthier and more experienced after drinking the waters!
0B39  0090        RETURN

EMPTY:
0B3B  0000        <Empty Function>

FLSPECN_1D:
0B40  0000        BEGIN
0B43  0003        ShowPortrait(0x0026)
0B50  0010        ShowMessage(0x0F18) = The Archery Training Center.  All who lack this skill gain enlightenment and training.
0B5D  001D        ax = GetSkillLevel(0x08)
0B69  0029        RefreshCompareFlags(ax)
0B6B  002B        If (result.notequal) jump to 004D
0B6D  002D        SetSkillLevel(0x08, 0x02)
0B7E  003E        ShowMessage(0x0F6F) = Thieves provide you with training in Archery!
0B8B  004B        Jump to 005A
0B8D  004D        ShowMessage(0x0F9D) = You have already trained in this skill. The thieves cannot help you any further.
0B9A  005A        RETURN

HIDEDOOR_1E:
0B9C  0000        BEGIN
0B9F  0003        Push(01)
0BA3  0007        ax = SetExitability(ax) // ax is usually 0 following equality check
0BAA  000E        Push(ax)
0BAB  000F        ax = GetNextTile()
0BB2  0016        Push(ax)
0BB3  0017        Move(stk[0], stk[1], stk[2])
0BBD  0021        RETURN

EMPTY:
0BBF  0000        <Empty Function>

EMPTY:
0BC4  0000        <Empty Function>

EMPTY:
0BC9  0000        <Empty Function>

EMPTY:
0BCE  0000        <Empty Function>

EMPTY:
0BD3  0000        <Empty Function>

HIDDORG_24:
0BD8  0000        BEGIN
0BDB  0003        ax = UsedItem(0xFB, 0xFB)
0BEE  0016        If (result.equal) jump to 0063
0BF0  0018        Push(01)
0BF4  001C        ax = SetExitability(ax) // ax is usually 0 following equality check
0BFB  0023        Push(ax)
0BFC  0024        ax = GetNextTile()
0C03  002B        Push(ax)
0C04  002C        Move(stk[0], stk[1], stk[2])
0C0E  0036        ax = SetExitability(ax) // ax is usually 0 following equality check
0C15  003D        Push(ax)
0C16  003E        ax = GetNextTile()
0C1D  0045        Push(ax)
0C1E  0046        Push(01)
0C22  004A        SetUnblocked()
0C2C  0054        ShowMessage(0x0FEE) = The Thieves' Key unlocks the door!
0C39  0061        Jump to 008D
0C3B  0063        Push(00)
0C3E  0066        ax = SetExitability(ax) // ax is usually 0 following equality check
0C45  006D        Push(ax)
0C46  006E        ax = GetNextTile()
0C4D  0075        Push(ax)
0C4E  0076        Move(stk[0], stk[1], stk[2])
0C58  0080        ShowMessage(0x1011) = The door is locked.  You need a special key.
0C65  008D        RETURN

HIDDORH_25:
0C67  0000        BEGIN
0C6A  0003        ax = UsedItem(0xC2, 0xC4)
0C7D  0016        If (result.notequal) jump to 0029
0C7F  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0C8B  0024        compare(ax, 0x000A)
0C8E  0027        If (result.below) jump to 0074
0C90  0029        Push(01)
0C94  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
0C9B  0034        Push(ax)
0C9C  0035        ax = GetNextTile()
0CA3  003C        Push(ax)
0CA4  003D        Move(stk[0], stk[1], stk[2])
0CAE  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
0CB5  004E        Push(ax)
0CB6  004F        ax = GetNextTile()
0CBD  0056        Push(ax)
0CBE  0057        Push(01)
0CC2  005B        SetUnblocked()
0CCC  0065        ShowMessage(0x103E) = The wall springs open.  A musky odor fills the room.
0CD9  0072        Jump to 009E
0CDB  0074        Push(00)
0CDE  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
0CE5  007E        Push(ax)
0CE6  007F        ax = GetNextTile()
0CED  0086        Push(ax)
0CEE  0087        Move(stk[0], stk[1], stk[2])
0CF8  0091        ShowMessage(0x1073) = Cracks in the wall reveal what could be a doorway. If only you could open it...
0D05  009E        RETURN

HIDDORI_26:
0D07  0000        BEGIN
0D0A  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0D16  000F        compare(ax, 0x000C)
0D19  0012        If (result.above or result.equal) jump to 007A
0D1B  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0D27  0020        RefreshCompareFlags(ax)
0D29  0022        If (result.notequal) jump to 007A
0D2B  0024        ax = UsedItem(0xA2, 0xA2)
0D3E  0037        If (result.notequal) jump to 007A
0D40  0039        ax = UsedItem(0xBD, 0xBD)
0D53  004C        If (result.notequal) jump to 007A
0D55  004E        ax = UsedItem(0xBE, 0xBE)
0D68  0061        If (result.notequal) jump to 007A
0D6A  0063        ax = CheckState2(0x00, 0x01)
0D7C  0075        If (result.notequal) jump to 007A
0D7E  0077        Jump to 0149
0D81  007A        SetState(0x00, 0x01, 0x01)
0D95  008E        ax = UsedItem(0xC3, 0xC4)
0DA8  00A1        If (result.notequal) jump to 00B4
0DAA  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0DB6  00AF        compare(ax, 0x000C)
0DB9  00B2        If (result.below) jump to 00FF
0DBB  00B4        Push(01)
0DBF  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
0DC6  00BF        Push(ax)
0DC7  00C0        ax = GetNextTile()
0DCE  00C7        Push(ax)
0DCF  00C8        Move(stk[0], stk[1], stk[2])
0DD9  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
0DE0  00D9        Push(ax)
0DE1  00DA        ax = GetNextTile()
0DE8  00E1        Push(ax)
0DE9  00E2        Push(01)
0DED  00E6        SetUnblocked()
0DF7  00F0        ShowMessage(0x10C3) = You skillfully open the entrance to a passage!
0E04  00FD        Jump to 0147
0E06  00FF        Push(00)
0E09  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
0E10  0109        Push(ax)
0E11  010A        ax = GetNextTile()
0E18  0111        Push(ax)
0E19  0112        Move(stk[0], stk[1], stk[2])
0E23  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
0E2A  0123        Push(ax)
0E2B  0124        ax = GetNextTile()
0E32  012B        Push(ax)
0E33  012C        Push(01)
0E37  0130        SetUnblocked()
0E41  013A        ShowMessage(0x10F2) = You found a very well-hidden entrance to what might be a passage.  Unfortunately, it seems to be locked.
0E4E  0147        Jump to 0166
0E50  0149        Push(00)
0E53  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
0E5A  0153        Push(ax)
0E5B  0154        ax = GetNextTile()
0E62  015B        Push(ax)
0E63  015C        Move(stk[0], stk[1], stk[2])
0E6D  0166        RETURN

HIDDORJ_27:
0E6F  0000        BEGIN
0E72  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0E7E  000F        compare(ax, 0x000A)
0E81  0012        If (result.above or result.equal) jump to 007A
0E83  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0E8F  0020        RefreshCompareFlags(ax)
0E91  0022        If (result.notequal) jump to 007A
0E93  0024        ax = UsedItem(0xA2, 0xA2)
0EA6  0037        If (result.notequal) jump to 007A
0EA8  0039        ax = UsedItem(0xBD, 0xBD)
0EBB  004C        If (result.notequal) jump to 007A
0EBD  004E        ax = UsedItem(0xBE, 0xBE)
0ED0  0061        If (result.notequal) jump to 007A
0ED2  0063        ax = CheckState2(0x00, 0x01)
0EE4  0075        If (result.notequal) jump to 007A
0EE6  0077        Jump to 0149
0EE9  007A        SetState(0x00, 0x01, 0x01)
0EFD  008E        ax = UsedItem(0xC3, 0xC4)
0F10  00A1        If (result.notequal) jump to 00B4
0F12  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0F1E  00AF        compare(ax, 0x000A)
0F21  00B2        If (result.below) jump to 00FF
0F23  00B4        Push(01)
0F27  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
0F2E  00BF        Push(ax)
0F2F  00C0        ax = GetNextTile()
0F36  00C7        Push(ax)
0F37  00C8        Move(stk[0], stk[1], stk[2])
0F41  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
0F48  00D9        Push(ax)
0F49  00DA        ax = GetNextTile()
0F50  00E1        Push(ax)
0F51  00E2        Push(01)
0F55  00E6        SetUnblocked()
0F5F  00F0        ShowMessage(0x115B) = You release the stonework, revealing a secret passage!
0F6C  00FD        Jump to 0147
0F6E  00FF        Push(00)
0F71  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
0F78  0109        Push(ax)
0F79  010A        ax = GetNextTile()
0F80  0111        Push(ax)
0F81  0112        Move(stk[0], stk[1], stk[2])
0F8B  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
0F92  0123        Push(ax)
0F93  0124        ax = GetNextTile()
0F9A  012B        Push(ax)
0F9B  012C        Push(01)
0F9F  0130        SetUnblocked()
0FA9  013A        ShowMessage(0x1192) = A piece of stonework looks like it could be moved, if you can pick the mechanism.
0FB6  0147        Jump to 0166
0FB8  0149        Push(00)
0FBB  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
0FC2  0153        Push(ax)
0FC3  0154        ax = GetNextTile()
0FCA  015B        Push(ax)
0FCB  015C        Move(stk[0], stk[1], stk[2])
0FD5  0166        RETURN

HIDDORK_28:
0FD7  0000        BEGIN
0FDA  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
0FE6  000F        compare(ax, 0x0009)
0FE9  0012        If (result.above or result.equal) jump to 007A
0FEB  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
0FF7  0020        RefreshCompareFlags(ax)
0FF9  0022        If (result.notequal) jump to 007A
0FFB  0024        ax = UsedItem(0xA2, 0xA2)
100E  0037        If (result.notequal) jump to 007A
1010  0039        ax = UsedItem(0xBD, 0xBD)
1023  004C        If (result.notequal) jump to 007A
1025  004E        ax = UsedItem(0xBE, 0xBE)
1038  0061        If (result.notequal) jump to 007A
103A  0063        ax = CheckState2(0x00, 0x01)
104C  0075        If (result.notequal) jump to 007A
104E  0077        Jump to 0149
1051  007A        SetState(0x00, 0x01, 0x01)
1065  008E        ax = UsedItem(0xC3, 0xC4)
1078  00A1        If (result.notequal) jump to 00B4
107A  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1086  00AF        compare(ax, 0x0009)
1089  00B2        If (result.below) jump to 00FF
108B  00B4        Push(01)
108F  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
1096  00BF        Push(ax)
1097  00C0        ax = GetNextTile()
109E  00C7        Push(ax)
109F  00C8        Move(stk[0], stk[1], stk[2])
10A9  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
10B0  00D9        Push(ax)
10B1  00DA        ax = GetNextTile()
10B8  00E1        Push(ax)
10B9  00E2        Push(01)
10BD  00E6        SetUnblocked()
10C7  00F0        ShowMessage(0x11E4) = The wall slides open.
10D4  00FD        Jump to 0147
10D6  00FF        Push(00)
10D9  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
10E0  0109        Push(ax)
10E1  010A        ax = GetNextTile()
10E8  0111        Push(ax)
10E9  0112        Move(stk[0], stk[1], stk[2])
10F3  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
10FA  0123        Push(ax)
10FB  0124        ax = GetNextTile()
1102  012B        Push(ax)
1103  012C        Push(01)
1107  0130        SetUnblocked()
1111  013A        ShowMessage(0x11FA) = You located a sliding door which must be picked to be opened. Curious sounds can be heard through the stonework.
111E  0147        Jump to 0166
1120  0149        Push(00)
1123  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
112A  0153        Push(ax)
112B  0154        ax = GetNextTile()
1132  015B        Push(ax)
1133  015C        Move(stk[0], stk[1], stk[2])
113D  0166        RETURN

HIDDORL_29:
113F  0000        BEGIN
1142  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
114E  000F        compare(ax, 0x0008)
1151  0012        If (result.above or result.equal) jump to 007A
1153  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
115F  0020        RefreshCompareFlags(ax)
1161  0022        If (result.notequal) jump to 007A
1163  0024        ax = UsedItem(0xA2, 0xA2)
1176  0037        If (result.notequal) jump to 007A
1178  0039        ax = UsedItem(0xBD, 0xBD)
118B  004C        If (result.notequal) jump to 007A
118D  004E        ax = UsedItem(0xBE, 0xBE)
11A0  0061        If (result.notequal) jump to 007A
11A2  0063        ax = CheckState2(0x00, 0x01)
11B4  0075        If (result.notequal) jump to 007A
11B6  0077        Jump to 0149
11B9  007A        SetState(0x00, 0x01, 0x01)
11CD  008E        ax = UsedItem(0xC2, 0xC4)
11E0  00A1        If (result.notequal) jump to 00B4
11E2  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
11EE  00AF        compare(ax, 0x0008)
11F1  00B2        If (result.below) jump to 00FF
11F3  00B4        Push(01)
11F7  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
11FE  00BF        Push(ax)
11FF  00C0        ax = GetNextTile()
1206  00C7        Push(ax)
1207  00C8        Move(stk[0], stk[1], stk[2])
1211  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1218  00D9        Push(ax)
1219  00DA        ax = GetNextTile()
1220  00E1        Push(ax)
1221  00E2        Push(01)
1225  00E6        SetUnblocked()
122F  00F0        ShowMessage(0x126B) = You successfully opened the locked door.
123C  00FD        Jump to 0147
123E  00FF        Push(00)
1241  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1248  0109        Push(ax)
1249  010A        ax = GetNextTile()
1250  0111        Push(ax)
1251  0112        Move(stk[0], stk[1], stk[2])
125B  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1262  0123        Push(ax)
1263  0124        ax = GetNextTile()
126A  012B        Push(ax)
126B  012C        Push(01)
126F  0130        SetUnblocked()
1279  013A        ShowMessage(0x1294) = You found a secret door, but it's locked.
1286  0147        Jump to 0166
1288  0149        Push(00)
128B  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
1292  0153        Push(ax)
1293  0154        ax = GetNextTile()
129A  015B        Push(ax)
129B  015C        Move(stk[0], stk[1], stk[2])
12A5  0166        RETURN

HIDDORM_2A:
12A7  0000        BEGIN
12AA  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
12B6  000F        compare(ax, 0x000C)
12B9  0012        If (result.above or result.equal) jump to 007A
12BB  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
12C7  0020        RefreshCompareFlags(ax)
12C9  0022        If (result.notequal) jump to 007A
12CB  0024        ax = UsedItem(0xA2, 0xA2)
12DE  0037        If (result.notequal) jump to 007A
12E0  0039        ax = UsedItem(0xBD, 0xBD)
12F3  004C        If (result.notequal) jump to 007A
12F5  004E        ax = UsedItem(0xBE, 0xBE)
1308  0061        If (result.notequal) jump to 007A
130A  0063        ax = CheckState2(0x00, 0x01)
131C  0075        If (result.notequal) jump to 007A
131E  0077        Jump to 0149
1321  007A        SetState(0x00, 0x01, 0x01)
1335  008E        ax = UsedItem(0xC4, 0xC4)
1348  00A1        If (result.notequal) jump to 00B4
134A  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1356  00AF        compare(ax, 0x000C)
1359  00B2        If (result.below) jump to 00FF
135B  00B4        Push(01)
135F  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
1366  00BF        Push(ax)
1367  00C0        ax = GetNextTile()
136E  00C7        Push(ax)
136F  00C8        Move(stk[0], stk[1], stk[2])
1379  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1380  00D9        Push(ax)
1381  00DA        ax = GetNextTile()
1388  00E1        Push(ax)
1389  00E2        Push(01)
138D  00E6        SetUnblocked()
1397  00F0        ShowMessage(0x12BE) = You successfully opened the locked door.
13A4  00FD        Jump to 0147
13A6  00FF        Push(00)
13A9  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
13B0  0109        Push(ax)
13B1  010A        ax = GetNextTile()
13B8  0111        Push(ax)
13B9  0112        Move(stk[0], stk[1], stk[2])
13C3  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
13CA  0123        Push(ax)
13CB  0124        ax = GetNextTile()
13D2  012B        Push(ax)
13D3  012C        Push(01)
13D7  0130        SetUnblocked()
13E1  013A        ShowMessage(0x12E7) = You found a secret door.
13EE  0147        Jump to 0166
13F0  0149        Push(00)
13F3  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
13FA  0153        Push(ax)
13FB  0154        ax = GetNextTile()
1402  015B        Push(ax)
1403  015C        Move(stk[0], stk[1], stk[2])
140D  0166        RETURN

HIDDORN_2B:
140F  0000        BEGIN
1412  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
141E  000F        compare(ax, 0x000C)
1421  0012        If (result.above or result.equal) jump to 007A
1423  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
142F  0020        RefreshCompareFlags(ax)
1431  0022        If (result.notequal) jump to 007A
1433  0024        ax = UsedItem(0xA2, 0xA2)
1446  0037        If (result.notequal) jump to 007A
1448  0039        ax = UsedItem(0xBD, 0xBD)
145B  004C        If (result.notequal) jump to 007A
145D  004E        ax = UsedItem(0xBE, 0xBE)
1470  0061        If (result.notequal) jump to 007A
1472  0063        ax = CheckState2(0x00, 0x01)
1484  0075        If (result.notequal) jump to 007A
1486  0077        Jump to 0149
1489  007A        SetState(0x00, 0x01, 0x01)
149D  008E        ax = UsedItem(0xC4, 0xC4)
14B0  00A1        If (result.notequal) jump to 00B4
14B2  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
14BE  00AF        compare(ax, 0x000C)
14C1  00B2        If (result.below) jump to 00FF
14C3  00B4        Push(01)
14C7  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
14CE  00BF        Push(ax)
14CF  00C0        ax = GetNextTile()
14D6  00C7        Push(ax)
14D7  00C8        Move(stk[0], stk[1], stk[2])
14E1  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
14E8  00D9        Push(ax)
14E9  00DA        ax = GetNextTile()
14F0  00E1        Push(ax)
14F1  00E2        Push(01)
14F5  00E6        SetUnblocked()
14FF  00F0        ShowMessage(0x1300) = You successfully opened the locked door.
150C  00FD        Jump to 0147
150E  00FF        Push(00)
1511  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1518  0109        Push(ax)
1519  010A        ax = GetNextTile()
1520  0111        Push(ax)
1521  0112        Move(stk[0], stk[1], stk[2])
152B  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1532  0123        Push(ax)
1533  0124        ax = GetNextTile()
153A  012B        Push(ax)
153B  012C        Push(01)
153F  0130        SetUnblocked()
1549  013A        ShowMessage(0x1329) = You spot a well hidden secret door. It's locked.
1556  0147        Jump to 0166
1558  0149        Push(00)
155B  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
1562  0153        Push(ax)
1563  0154        ax = GetNextTile()
156A  015B        Push(ax)
156B  015C        Move(stk[0], stk[1], stk[2])
1575  0166        RETURN

EMPTY:
1577  0000        <Empty Function>

EMPTY:
157C  0000        <Empty Function>

HIDDORQ_2E:
1581  0000        BEGIN
1584  0003        ax = UsedItem(0xC2, 0xC4)
1597  0016        If (result.notequal) jump to 0029
1599  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
15A5  0024        compare(ax, 0x0008)
15A8  0027        If (result.below) jump to 0074
15AA  0029        Push(01)
15AE  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
15B5  0034        Push(ax)
15B6  0035        ax = GetNextTile()
15BD  003C        Push(ax)
15BE  003D        Move(stk[0], stk[1], stk[2])
15C8  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
15CF  004E        Push(ax)
15D0  004F        ax = GetNextTile()
15D7  0056        Push(ax)
15D8  0057        Push(01)
15DC  005B        SetUnblocked()
15E6  0065        ShowMessage(0x135A) = You skillfully pick the door lock.
15F3  0072        Jump to 009E
15F5  0074        Push(00)
15F8  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
15FF  007E        Push(ax)
1600  007F        ax = GetNextTile()
1607  0086        Push(ax)
1608  0087        Move(stk[0], stk[1], stk[2])
1612  0091        ShowMessage(0x137D) = The door is locked.
161F  009E        RETURN

EMPTY:
1621  0000        <Empty Function>

EMPTY:
1626  0000        <Empty Function>

HIDDORT_31:
162B  0000        BEGIN
162E  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
163A  000F        compare(ax, 0x0006)
163D  0012        If (result.above or result.equal) jump to 0024
163F  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
164B  0020        RefreshCompareFlags(ax)
164D  0022        If (result.equal) jump to 0051
164F  0024        Push(01)
1653  0028        ax = SetExitability(ax) // ax is usually 0 following equality check
165A  002F        Push(ax)
165B  0030        ax = GetNextTile()
1662  0037        Push(ax)
1663  0038        Move(stk[0], stk[1], stk[2])
166D  0042        ShowMessage(0x1391) = You found a hidden door!
167A  004F        Jump to 006E
167C  0051        Push(00)
167F  0054        ax = SetExitability(ax) // ax is usually 0 following equality check
1686  005B        Push(ax)
1687  005C        ax = GetNextTile()
168E  0063        Push(ax)
168F  0064        Move(stk[0], stk[1], stk[2])
1699  006E        RETURN

HIDDORU_32:
169B  0000        BEGIN
169E  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
16AA  000F        compare(ax, 0x0008)
16AD  0012        If (result.above or result.equal) jump to 007A
16AF  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
16BB  0020        RefreshCompareFlags(ax)
16BD  0022        If (result.notequal) jump to 007A
16BF  0024        ax = UsedItem(0xA2, 0xA2)
16D2  0037        If (result.notequal) jump to 007A
16D4  0039        ax = UsedItem(0xBD, 0xBD)
16E7  004C        If (result.notequal) jump to 007A
16E9  004E        ax = UsedItem(0xBE, 0xBE)
16FC  0061        If (result.notequal) jump to 007A
16FE  0063        ax = CheckState2(0x00, 0x01)
1710  0075        If (result.notequal) jump to 007A
1712  0077        Jump to 0149
1715  007A        SetState(0x00, 0x01, 0x01)
1729  008E        ax = UsedItem(0xC2, 0xC4)
173C  00A1        If (result.notequal) jump to 00B4
173E  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
174A  00AF        compare(ax, 0x0008)
174D  00B2        If (result.below) jump to 00FF
174F  00B4        Push(01)
1753  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
175A  00BF        Push(ax)
175B  00C0        ax = GetNextTile()
1762  00C7        Push(ax)
1763  00C8        Move(stk[0], stk[1], stk[2])
176D  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1774  00D9        Push(ax)
1775  00DA        ax = GetNextTile()
177C  00E1        Push(ax)
177D  00E2        Push(01)
1781  00E6        SetUnblocked()
178B  00F0        ShowMessage(0x13AA) = You successfully opened the locked door.
1798  00FD        Jump to 0147
179A  00FF        Push(00)
179D  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
17A4  0109        Push(ax)
17A5  010A        ax = GetNextTile()
17AC  0111        Push(ax)
17AD  0112        Move(stk[0], stk[1], stk[2])
17B7  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
17BE  0123        Push(ax)
17BF  0124        ax = GetNextTile()
17C6  012B        Push(ax)
17C7  012C        Push(01)
17CB  0130        SetUnblocked()
17D5  013A        ShowMessage(0x13D3) = You found a secret door, but it's locked.
17E2  0147        Jump to 0166
17E4  0149        Push(00)
17E7  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
17EE  0153        Push(ax)
17EF  0154        ax = GetNextTile()
17F6  015B        Push(ax)
17F7  015C        Move(stk[0], stk[1], stk[2])
1801  0166        RETURN

HIDDORV_33:
1803  0000        BEGIN
1806  0003        Push(01)
180A  0007        ax = SetExitability(ax) // ax is usually 0 following equality check
1811  000E        Push(ax)
1812  000F        ax = GetNextTile()
1819  0016        Push(ax)
181A  0017        Move(stk[0], stk[1], stk[2])
1824  0021        RETURN

EMPTY:
1826  0000        <Empty Function>

HIDDORX_35:
182B  0000        BEGIN
182E  0003        Push(01)
1832  0007        ax = SetExitability(ax) // ax is usually 0 following equality check
1839  000E        Push(ax)
183A  000F        ax = GetNextTile()
1841  0016        Push(ax)
1842  0017        Move(stk[0], stk[1], stk[2])
184C  0021        RETURN

HIDDORY_36:
184E  0000        BEGIN
1851  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
185D  000F        compare(ax, 0x000A)
1860  0012        If (result.above or result.equal) jump to 007A
1862  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
186E  0020        RefreshCompareFlags(ax)
1870  0022        If (result.notequal) jump to 007A
1872  0024        ax = UsedItem(0xA2, 0xA2)
1885  0037        If (result.notequal) jump to 007A
1887  0039        ax = UsedItem(0xBD, 0xBD)
189A  004C        If (result.notequal) jump to 007A
189C  004E        ax = UsedItem(0xBE, 0xBE)
18AF  0061        If (result.notequal) jump to 007A
18B1  0063        ax = CheckState2(0x00, 0x01)
18C3  0075        If (result.notequal) jump to 007A
18C5  0077        Jump to 0149
18C8  007A        SetState(0x00, 0x01, 0x01)
18DC  008E        ax = UsedItem(0xC3, 0xC4)
18EF  00A1        If (result.notequal) jump to 00B4
18F1  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
18FD  00AF        compare(ax, 0x000A)
1900  00B2        If (result.below) jump to 00FF
1902  00B4        Push(01)
1906  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
190D  00BF        Push(ax)
190E  00C0        ax = GetNextTile()
1915  00C7        Push(ax)
1916  00C8        Move(stk[0], stk[1], stk[2])
1920  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1927  00D9        Push(ax)
1928  00DA        ax = GetNextTile()
192F  00E1        Push(ax)
1930  00E2        Push(01)
1934  00E6        SetUnblocked()
193E  00F0        ShowMessage(0x13FD) = You successfully opened the locked door.
194B  00FD        Jump to 0147
194D  00FF        Push(00)
1950  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1957  0109        Push(ax)
1958  010A        ax = GetNextTile()
195F  0111        Push(ax)
1960  0112        Move(stk[0], stk[1], stk[2])
196A  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1971  0123        Push(ax)
1972  0124        ax = GetNextTile()
1979  012B        Push(ax)
197A  012C        Push(01)
197E  0130        SetUnblocked()
1988  013A        ShowMessage(0x1426) = You found a locked door. You hear strange noises on the other side of the door.
1995  0147        Jump to 0166
1997  0149        Push(00)
199A  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
19A1  0153        Push(ax)
19A2  0154        ax = GetNextTile()
19A9  015B        Push(ax)
19AA  015C        Move(stk[0], stk[1], stk[2])
19B4  0166        RETURN

HIDDORZ_37:
19B6  0000        BEGIN
19B9  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
19C5  000F        compare(ax, 0x0008)
19C8  0012        If (result.above or result.equal) jump to 0063
19CA  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
19D6  0020        RefreshCompareFlags(ax)
19D8  0022        If (result.notequal) jump to 0063
19DA  0024        ax = UsedItem(0xA2, 0xA2)
19ED  0037        If (result.notequal) jump to 0063
19EF  0039        ax = UsedItem(0xBD, 0xBD)
1A02  004C        If (result.notequal) jump to 0063
1A04  004E        ax = UsedItem(0xBE, 0xBE)
1A17  0061        If (result.equal) jump to 008E
1A19  0063        Push(01)
1A1D  0067        ax = SetExitability(ax) // ax is usually 0 following equality check
1A24  006E        Push(ax)
1A25  006F        ax = GetNextTile()
1A2C  0076        Push(ax)
1A2D  0077        Move(stk[0], stk[1], stk[2])
1A37  0081        ShowMessage(0x1476) = You found a hidden door!
1A44  008E        RETURN

HIDDORAA_38:
1A46  0000        BEGIN
1A49  0003        Push(01)
1A4D  0007        ax = SetExitability(ax) // ax is usually 0 following equality check
1A54  000E        Push(ax)
1A55  000F        ax = GetNextTile()
1A5C  0016        Push(ax)
1A5D  0017        Move(stk[0], stk[1], stk[2])
1A67  0021        RETURN

HIDDORBB_39:
1A69  0000        BEGIN
1A6C  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
1A78  000F        compare(ax, 0x0009)
1A7B  0012        If (result.above or result.equal) jump to 007A
1A7D  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
1A89  0020        RefreshCompareFlags(ax)
1A8B  0022        If (result.notequal) jump to 007A
1A8D  0024        ax = UsedItem(0xA2, 0xA2)
1AA0  0037        If (result.notequal) jump to 007A
1AA2  0039        ax = UsedItem(0xBD, 0xBD)
1AB5  004C        If (result.notequal) jump to 007A
1AB7  004E        ax = UsedItem(0xBE, 0xBE)
1ACA  0061        If (result.notequal) jump to 007A
1ACC  0063        ax = CheckState2(0x00, 0x01)
1ADE  0075        If (result.notequal) jump to 007A
1AE0  0077        Jump to 0149
1AE3  007A        SetState(0x00, 0x01, 0x01)
1AF7  008E        ax = UsedItem(0xC3, 0xC4)
1B0A  00A1        If (result.notequal) jump to 00B4
1B0C  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1B18  00AF        compare(ax, 0x0009)
1B1B  00B2        If (result.below) jump to 00FF
1B1D  00B4        Push(01)
1B21  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
1B28  00BF        Push(ax)
1B29  00C0        ax = GetNextTile()
1B30  00C7        Push(ax)
1B31  00C8        Move(stk[0], stk[1], stk[2])
1B3B  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1B42  00D9        Push(ax)
1B43  00DA        ax = GetNextTile()
1B4A  00E1        Push(ax)
1B4B  00E2        Push(01)
1B4F  00E6        SetUnblocked()
1B59  00F0        ShowMessage(0x148F) = You successfully opened the locked door. You also feel a cool breeze.
1B66  00FD        Jump to 0147
1B68  00FF        Push(00)
1B6B  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1B72  0109        Push(ax)
1B73  010A        ax = GetNextTile()
1B7A  0111        Push(ax)
1B7B  0112        Move(stk[0], stk[1], stk[2])
1B85  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1B8C  0123        Push(ax)
1B8D  0124        ax = GetNextTile()
1B94  012B        Push(ax)
1B95  012C        Push(01)
1B99  0130        SetUnblocked()
1BA3  013A        ShowMessage(0x14D5) = You found a secret door, but it's locked.
1BB0  0147        Jump to 0166
1BB2  0149        Push(00)
1BB5  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
1BBC  0153        Push(ax)
1BBD  0154        ax = GetNextTile()
1BC4  015B        Push(ax)
1BC5  015C        Move(stk[0], stk[1], stk[2])
1BCF  0166        RETURN

HIDDORCC_3A:
1BD1  0000        BEGIN
1BD4  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
1BE0  000F        compare(ax, 0x0008)
1BE3  0012        If (result.above or result.equal) jump to 007A
1BE5  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
1BF1  0020        RefreshCompareFlags(ax)
1BF3  0022        If (result.notequal) jump to 007A
1BF5  0024        ax = UsedItem(0xA2, 0xA2)
1C08  0037        If (result.notequal) jump to 007A
1C0A  0039        ax = UsedItem(0xBD, 0xBD)
1C1D  004C        If (result.notequal) jump to 007A
1C1F  004E        ax = UsedItem(0xBE, 0xBE)
1C32  0061        If (result.notequal) jump to 007A
1C34  0063        ax = CheckState2(0x00, 0x01)
1C46  0075        If (result.notequal) jump to 007A
1C48  0077        Jump to 0149
1C4B  007A        SetState(0x00, 0x01, 0x01)
1C5F  008E        ax = UsedItem(0xC2, 0xC4)
1C72  00A1        If (result.notequal) jump to 00B4
1C74  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1C80  00AF        compare(ax, 0x0009)
1C83  00B2        If (result.below) jump to 00FF
1C85  00B4        Push(01)
1C89  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
1C90  00BF        Push(ax)
1C91  00C0        ax = GetNextTile()
1C98  00C7        Push(ax)
1C99  00C8        Move(stk[0], stk[1], stk[2])
1CA3  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1CAA  00D9        Push(ax)
1CAB  00DA        ax = GetNextTile()
1CB2  00E1        Push(ax)
1CB3  00E2        Push(01)
1CB7  00E6        SetUnblocked()
1CC1  00F0        ShowMessage(0x14FF) = You opened the locked chamber door.
1CCE  00FD        Jump to 0147
1CD0  00FF        Push(00)
1CD3  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1CDA  0109        Push(ax)
1CDB  010A        ax = GetNextTile()
1CE2  0111        Push(ax)
1CE3  0112        Move(stk[0], stk[1], stk[2])
1CED  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1CF4  0123        Push(ax)
1CF5  0124        ax = GetNextTile()
1CFC  012B        Push(ax)
1CFD  012C        Push(01)
1D01  0130        SetUnblocked()
1D0B  013A        ShowMessage(0x1523) = You found a hidden chamber door, but it's locked.
1D18  0147        Jump to 0166
1D1A  0149        Push(00)
1D1D  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
1D24  0153        Push(ax)
1D25  0154        ax = GetNextTile()
1D2C  015B        Push(ax)
1D2D  015C        Move(stk[0], stk[1], stk[2])
1D37  0166        RETURN

EMPTY:
1D39  0000        <Empty Function>

EMPTY:
1D3E  0000        <Empty Function>

HIDDORFF_3D:
1D43  0000        BEGIN
1D46  0003        ax = UsedItem(0xC4, 0xC4)
1D59  0016        If (result.notequal) jump to 0029
1D5B  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1D67  0024        compare(ax, 0x000C)
1D6A  0027        If (result.below) jump to 0074
1D6C  0029        Push(01)
1D70  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
1D77  0034        Push(ax)
1D78  0035        ax = GetNextTile()
1D7F  003C        Push(ax)
1D80  003D        Move(stk[0], stk[1], stk[2])
1D8A  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
1D91  004E        Push(ax)
1D92  004F        ax = GetNextTile()
1D99  0056        Push(ax)
1D9A  0057        Push(01)
1D9E  005B        SetUnblocked()
1DA8  0065        ShowMessage(0x1555) = With great effort, you unlock the door.
1DB5  0072        Jump to 009E
1DB7  0074        Push(00)
1DBA  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
1DC1  007E        Push(ax)
1DC2  007F        ax = GetNextTile()
1DC9  0086        Push(ax)
1DCA  0087        Move(stk[0], stk[1], stk[2])
1DD4  0091        ShowMessage(0x157D) = This door has a nasty looking lock on it.
1DE1  009E        RETURN

EMPTY:
1DE3  0000        <Empty Function>

EMPTY:
1DE8  0000        <Empty Function>

HIDDORII_40:
1DED  0000        BEGIN
1DF0  0003        ax = UsedSkill(0x0D) // returns 0 if did not use, compares to 2nd op if did use
1DFC  000F        compare(ax, 0x0006)
1DFF  0012        If (result.above or result.equal) jump to 007A
1E01  0014        ax = UsedSpell(0x17) // returns 0 if did not use on map, level if used
1E0D  0020        RefreshCompareFlags(ax)
1E0F  0022        If (result.notequal) jump to 007A
1E11  0024        ax = UsedItem(0xA2, 0xA2)
1E24  0037        If (result.notequal) jump to 007A
1E26  0039        ax = UsedItem(0xBD, 0xBD)
1E39  004C        If (result.notequal) jump to 007A
1E3B  004E        ax = UsedItem(0xBE, 0xBE)
1E4E  0061        If (result.notequal) jump to 007A
1E50  0063        ax = CheckState2(0x00, 0x01)
1E62  0075        If (result.notequal) jump to 007A
1E64  0077        Jump to 0149
1E67  007A        SetState(0x00, 0x01, 0x01)
1E7B  008E        ax = UsedItem(0xC3, 0xC4)
1E8E  00A1        If (result.notequal) jump to 00B4
1E90  00A3        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
1E9C  00AF        compare(ax, 0x0009)
1E9F  00B2        If (result.below) jump to 00FF
1EA1  00B4        Push(01)
1EA5  00B8        ax = SetExitability(ax) // ax is usually 0 following equality check
1EAC  00BF        Push(ax)
1EAD  00C0        ax = GetNextTile()
1EB4  00C7        Push(ax)
1EB5  00C8        Move(stk[0], stk[1], stk[2])
1EBF  00D2        ax = SetExitability(ax) // ax is usually 0 following equality check
1EC6  00D9        Push(ax)
1EC7  00DA        ax = GetNextTile()
1ECE  00E1        Push(ax)
1ECF  00E2        Push(01)
1ED3  00E6        SetUnblocked()
1EDD  00F0        ShowMessage(0x15A7) = The door is opened with a lot of effort.
1EEA  00FD        Jump to 0147
1EEC  00FF        Push(00)
1EEF  0102        ax = SetExitability(ax) // ax is usually 0 following equality check
1EF6  0109        Push(ax)
1EF7  010A        ax = GetNextTile()
1EFE  0111        Push(ax)
1EFF  0112        Move(stk[0], stk[1], stk[2])
1F09  011C        ax = SetExitability(ax) // ax is usually 0 following equality check
1F10  0123        Push(ax)
1F11  0124        ax = GetNextTile()
1F18  012B        Push(ax)
1F19  012C        Push(01)
1F1D  0130        SetUnblocked()
1F27  013A        ShowMessage(0x15D0) = You found another secret door, but it is locked.
1F34  0147        Jump to 0166
1F36  0149        Push(00)
1F39  014C        ax = SetExitability(ax) // ax is usually 0 following equality check
1F40  0153        Push(ax)
1F41  0154        ax = GetNextTile()
1F48  015B        Push(ax)
1F49  015C        Move(stk[0], stk[1], stk[2])
1F53  0166        RETURN

EXITMSG_41:
1F55  0000        BEGIN
1F58  0003        ShowMessage(0x1601) = Can't take any more?  The door is marked 'Exit!'
1F65  0010        RETURN

STRTMSG_42:
1F67  0000        BEGIN
1F6A  0003        ShowMessage(0x1632) = A message on the wall:  'Welcome to the Den of Thieves!'
1F77  0010        RETURN

GOODYA_43:
1F79  0000        BEGIN
1F7C  0003        ax = HasItem(0xC3)
1F8A  0011        If (result.equal) jump to 0022
1F8C  0013        ShowMessage(0x166B) = You find an empty chest.
1F99  0020        Jump to 004C
1F9B  0022        GiveItem(0xC3)
1FA7  002E        ModifyGold(0x04E2)
1FB8  003F        ShowMessage(0x1684) = You find a Purple Lockpick and 1250 gold inside a small chest.
1FC5  004C        RETURN

EMPTY:
1FC7  0000        <Empty Function>

EMPTY:
1FCC  0000        <Empty Function>

EMPTY:
1FD1  0000        <Empty Function>

EMPTY:
1FD6  0000        <Empty Function>

EMPTY:
1FDB  0000        <Empty Function>

EMPTY:
1FE0  0000        <Empty Function>

EMPTY:
1FE5  0000        <Empty Function>

EMPTY:
1FEA  0000        <Empty Function>

EMPTY:
1FEF  0000        <Empty Function>

EMPTY:
1FF4  0000        <Empty Function>

EMPTY:
1FF9  0000        <Empty Function>

EMPTY:
1FFE  0000        <Empty Function>

EMPTY:
2003  0000        <Empty Function>

EMPTY:
2008  0000        <Empty Function>

EMPTY:
200D  0000        <Empty Function>

EMPTY:
2012  0000        <Empty Function>

EMPTY:
2017  0000        <Empty Function>

EMPTY:
201C  0000        <Empty Function>

EMPTY:
2021  0000        <Empty Function>

EMPTY:
2026  0000        <Empty Function>

EMPTY:
202B  0000        <Empty Function>

EMPTY:
2030  0000        <Empty Function>

EMPTY:
2035  0000        <Empty Function>

EMPTY:
203A  0000        <Empty Function>

EMPTY:
203F  0000        <Empty Function>

EMPTY:
2044  0000        <Empty Function>

EMPTY:
2049  0000        <Empty Function>

EMPTY:
204E  0000        <Empty Function>

EMPTY:
2053  0000        <Empty Function>

EMPTY:
2058  0000        <Empty Function>

EMPTY:
205D  0000        <Empty Function>

EMPTY:
2062  0000        <Empty Function>

EMPTY:
2067  0000        <Empty Function>

EMPTY:
206C  0000        <Empty Function>

EMPTY:
2071  0000        <Empty Function>

EMPTY:
2076  0000        <Empty Function>

EMPTY:
207B  0000        <Empty Function>

EMPTY:
2080  0000        <Empty Function>

EMPTY:
2085  0000        <Empty Function>

EMPTY:
208A  0000        <Empty Function>

EMPTY:
208F  0000        <Empty Function>

EMPTY:
2094  0000        <Empty Function>

EMPTY:
2099  0000        <Empty Function>

EMPTY:
209E  0000        <Empty Function>

EMPTY:
20A3  0000        <Empty Function>

EMPTY:
20A8  0000        <Empty Function>

EMPTY:
20AD  0000        <Empty Function>

EMPTY:
20B2  0000        <Empty Function>

EMPTY:
20B7  0000        <Empty Function>

EMPTY:
20BC  0000        <Empty Function>

EMPTY:
20C1  0000        <Empty Function>

EMPTY:
20C6  0000        <Empty Function>

EMPTY:
20CB  0000        <Empty Function>

EMPTY:
20D0  0000        <Empty Function>

EMPTY:
20D5  0000        <Empty Function>

EMPTY:
20DA  0000        <Empty Function>

EMPTY:
20DF  0000        <Empty Function>

EMPTY:
20E4  0000        <Empty Function>

EMPTY:
20E9  0000        <Empty Function>

EMPTY:
20EE  0000        <Empty Function>

EMPTY:
20F3  0000        <Empty Function>

EMPTY:
20F8  0000        <Empty Function>

EMPTY:
20FD  0000        <Empty Function>

EMPTY:
2102  0000        <Empty Function>

EMPTY:
2107  0000        <Empty Function>

EMPTY:
210C  0000        <Empty Function>

EMPTY:
2111  0000        <Empty Function>

EMPTY:
2116  0000        <Empty Function>

EMPTY:
211B  0000        <Empty Function>

EMPTY:
2120  0000        <Empty Function>

EMPTY:
2125  0000        <Empty Function>

EMPTY:
212A  0000        <Empty Function>

EMPTY:
212F  0000        <Empty Function>

EMPTY:
2134  0000        <Empty Function>

EMPTY:
2139  0000        <Empty Function>

EMPTY:
213E  0000        <Empty Function>

EMPTY:
2143  0000        <Empty Function>

EMPTY:
2148  0000        <Empty Function>

EMPTY:
214D  0000        <Empty Function>

EMPTY:
2152  0000        <Empty Function>

EMPTY:
2157  0000        <Empty Function>

EMPTY:
215C  0000        <Empty Function>

EMPTY:
2161  0000        <Empty Function>

EMPTY:
2166  0000        <Empty Function>

EMPTY:
216B  0000        <Empty Function>

EMPTY:
2170  0000        <Empty Function>

EMPTY:
2175  0000        <Empty Function>

EMPTY:
217A  0000        <Empty Function>

EMPTY:
217F  0000        <Empty Function>

EMPTY:
2184  0000        <Empty Function>

EMPTY:
2189  0000        <Empty Function>

EMPTY:
218E  0000        <Empty Function>

EMPTY:
2193  0000        <Empty Function>

EMPTY:
2198  0000        <Empty Function>

EMPTY:
219D  0000        <Empty Function>

EMPTY:
21A2  0000        <Empty Function>

EMPTY:
21A7  0000        <Empty Function>

EMPTY:
21AC  0000        <Empty Function>

EMPTY:
21B1  0000        <Empty Function>

EMPTY:
21B6  0000        <Empty Function>

EMPTY:
21BB  0000        <Empty Function>

EMPTY:
21C0  0000        <Empty Function>

EMPTY:
21C5  0000        <Empty Function>

EMPTY:
21CA  0000        <Empty Function>

EMPTY:
21CF  0000        <Empty Function>

EMPTY:
21D4  0000        <Empty Function>

EMPTY:
21D9  0000        <Empty Function>

EMPTY:
21DE  0000        <Empty Function>

EMPTY:
21E3  0000        <Empty Function>

EMPTY:
21E8  0000        <Empty Function>

EMPTY:
21ED  0000        <Empty Function>

EMPTY:
21F2  0000        <Empty Function>

EMPTY:
21F7  0000        <Empty Function>

EMPTY:
21FC  0000        <Empty Function>

EMPTY:
2201  0000        <Empty Function>

EMPTY:
2206  0000        <Empty Function>

EMPTY:
220B  0000        <Empty Function>

EMPTY:
2210  0000        <Empty Function>

EMPTY:
2215  0000        <Empty Function>

EMPTY:
221A  0000        <Empty Function>

EMPTY:
221F  0000        <Empty Function>

EMPTY:
2224  0000        <Empty Function>

EMPTY:
2229  0000        <Empty Function>

EMPTY:
222E  0000        <Empty Function>

EMPTY:
2233  0000        <Empty Function>

EMPTY:
2238  0000        <Empty Function>

EMPTY:
223D  0000        <Empty Function>

EMPTY:
2242  0000        <Empty Function>

EMPTY:
2247  0000        <Empty Function>

EMPTY:
224C  0000        <Empty Function>

EMPTY:
2251  0000        <Empty Function>

EMPTY:
2256  0000        <Empty Function>

EMPTY:
225B  0000        <Empty Function>

EMPTY:
2260  0000        <Empty Function>

EMPTY:
2265  0000        <Empty Function>

EMPTY:
226A  0000        <Empty Function>

EMPTY:
226F  0000        <Empty Function>

EMPTY:
2274  0000        <Empty Function>

EMPTY:
2279  0000        <Empty Function>

EMPTY:
227E  0000        <Empty Function>

EMPTY:
2283  0000        <Empty Function>

EMPTY:
2288  0000        <Empty Function>

EMPTY:
228D  0000        <Empty Function>

EMPTY:
2292  0000        <Empty Function>

EMPTY:
2297  0000        <Empty Function>

EMPTY:
229C  0000        <Empty Function>

EMPTY:
22A1  0000        <Empty Function>

EMPTY:
22A6  0000        <Empty Function>

EMPTY:
22AB  0000        <Empty Function>

EMPTY:
22B0  0000        <Empty Function>

EMPTY:
22B5  0000        <Empty Function>

EMPTY:
22BA  0000        <Empty Function>

EMPTY:
22BF  0000        <Empty Function>

EMPTY:
22C4  0000        <Empty Function>

EMPTY:
22C9  0000        <Empty Function>

EMPTY:
22CE  0000        <Empty Function>

EMPTY:
22D3  0000        <Empty Function>

EMPTY:
22D8  0000        <Empty Function>

EMPTY:
22DD  0000        <Empty Function>

EMPTY:
22E2  0000        <Empty Function>

EMPTY:
22E7  0000        <Empty Function>

EMPTY:
22EC  0000        <Empty Function>

EMPTY:
22F1  0000        <Empty Function>

EMPTY:
22F6  0000        <Empty Function>

EMPTY:
22FB  0000        <Empty Function>

EMPTY:
2300  0000        <Empty Function>

EMPTY:
2305  0000        <Empty Function>

EMPTY:
230A  0000        <Empty Function>

EMPTY:
230F  0000        <Empty Function>

EMPTY:
2314  0000        <Empty Function>

EMPTY:
2319  0000        <Empty Function>

EMPTY:
231E  0000        <Empty Function>

EMPTY:
2323  0000        <Empty Function>

EMPTY:
2328  0000        <Empty Function>

EMPTY:
232D  0000        <Empty Function>

EMPTY:
2332  0000        <Empty Function>

EMPTY:
2337  0000        <Empty Function>

EMPTY:
233C  0000        <Empty Function>

EMPTY:
2341  0000        <Empty Function>

EMPTY:
2346  0000        <Empty Function>

EMPTY:
234B  0000        <Empty Function>

EMPTY:
2350  0000        <Empty Function>

EMPTY:
2355  0000        <Empty Function>

EMPTY:
235A  0000        <Empty Function>

EMPTY:
235F  0000        <Empty Function>

EMPTY:
2364  0000        <Empty Function>

EMPTY:
2369  0000        <Empty Function>

EMPTY:
236E  0000        <Empty Function>

STRINGS:
03FC: Heroes of level 20 or more may go on.
0422: The gate to the North leads down a level.
044C: The gate to the North leads upward.
0470: Heroes of level 20 or more may enter.
0496: The gate to the south leads downward.
04BC: The stairs to the south lead to the Tavern
04E7: You have used up the supplies in the Infirmary.
0517: You have discovered the Thieves' Infirmary.  All your wounds have been cured!
0565: You surprise creatures eating lunch!
058A: You stumble upon some rather nasty monsters.
05B7: A group of restless undead surprise you!
05E0: You are attacked by Mages of the Thieves' Guild out walking their pets!
0628: You stumble upon mean animals out foraging!
0654: You stumble upon foraging animals! They found something shiny!
0693: The storage room has been emptied by other adventurers.
06CB: You found a storage room.  Most items are worthless, but in the refuse are a few treasures.
0727: Thieves have emptied this room.
0747: In a cabinet are some scrolls and potions, and 15,000 Gold Pieces in a sack.
0794: You find 1 gold piece in an empty safe.
07BC: The safe contains several treasures and 25,000 gold pieces!
07F8: The room has been ransacked!
0815: Your familiarity with thieving helps you avoid a vicious trap!
0854: You find some items and 5000 pieces of gold.
0881: You find several items and 5000 pieces of gold.
08B1: Unfortunately, you overlook the cleverly hidden trap that protects the treasure.
0902: You found a sleeping thief who cannot be roused from deep slumber.
0945: A wise old thief bends your ear with stories of his exploits.  His story is very helpful.
099F: The Club and Axe Training Center.  All who lack this skill gain enlightenment and training.
09FB: Thieves provide you with training in Clubs and Axes!
0A30: You have already trained in this skill. The thieves cannot help you any further.
0A81: A wise old thief will teach you the Bard Skill!
0AB1: You are already pretty good at Barding, and he cannot help you further.
0AF9: The wise old thief has already taught you all he knows.
0B31: The Fencing Training Center.  All who lack this skill gain enlightenment and training.
0B88: Thieves provide you with training in the use of Swords!
0BC0: You have already trained in this skill. The thieves cannot help you any further.
0C11: A wise young thief will teach you the Detect Skill!
0C45: You are already pretty good at detection, and she cannot help you further.
0C90: The young thief has already taught you all she knows.
0CC6: The Staff Training Center.  All who lack this skill gain enlightenment and training.
0D1B: Thieves provide you with training in the use of Staves!
0D53: You have already trained in this skill. The thieves cannot help you any further.
0DA4: A wise old thief will teach you the Lockpick Skill!
0DD8: You are already pretty good at picking locks, and he cannot help you further.
0E26: The old thief has already taught you all he knows.
0E59: The waters from Sinestra's Fountain are invigorating, but have no further effect.
0EAB: You have discovered Sinestra's Fountain.  You feel healthier and more experienced after drinking the waters!
0F18: The Archery Training Center.  All who lack this skill gain enlightenment and training.
0F6F: Thieves provide you with training in Archery!
0F9D: You have already trained in this skill. The thieves cannot help you any further.
0FEE: The Thieves' Key unlocks the door!
1011: The door is locked.  You need a special key.
103E: The wall springs open.  A musky odor fills the room.
1073: Cracks in the wall reveal what could be a doorway. If only you could open it...
10C3: You skillfully open the entrance to a passage!
10F2: You found a very well-hidden entrance to what might be a passage.  Unfortunately, it seems to be locked.
115B: You release the stonework, revealing a secret passage!
1192: A piece of stonework looks like it could be moved, if you can pick the mechanism.
11E4: The wall slides open.
11FA: You located a sliding door which must be picked to be opened. Curious sounds can be heard through the stonework.
126B: You successfully opened the locked door.
1294: You found a secret door, but it's locked.
12BE: You successfully opened the locked door.
12E7: You found a secret door.
1300: You successfully opened the locked door.
1329: You spot a well hidden secret door. It's locked.
135A: You skillfully pick the door lock.
137D: The door is locked.
1391: You found a hidden door!
13AA: You successfully opened the locked door.
13D3: You found a secret door, but it's locked.
13FD: You successfully opened the locked door.
1426: You found a locked door. You hear strange noises on the other side of the door.
1476: You found a hidden door!
148F: You successfully opened the locked door. You also feel a cool breeze.
14D5: You found a secret door, but it's locked.
14FF: You opened the locked chamber door.
1523: You found a hidden chamber door, but it's locked.
1555: With great effort, you unlock the door.
157D: This door has a nasty looking lock on it.
15A7: The door is opened with a lot of effort.
15D0: You found another secret door, but it is locked.
1601: Can't take any more?  The door is marked 'Exit!'
1632: A message on the wall:  'Welcome to the Den of Thieves!'
166B: You find an empty chest.
1684: You find a Purple Lockpick and 1250 gold inside a small chest.
