TORUNERM_01:
000C  0000        BEGIN
000F  0003        SetMoveMap(00, 0x1F, 0x01, 0x03)
0029  001D        RETURN

TOMAUS_02:
002B  0000        BEGIN
002E  0003        SetMoveMap(0x03, 0xF8, 0x04, 0x03)
0049  001E        RETURN

SPECDOOR_03:
004B  0000        BEGIN
004E  0003        ax = UsedItem(0xD2, 0xD2)
0061  0016        If (result.notequal) jump to 0028
0063  0018        ax = HasItem(0xF8)
0071  0026        If (result.equal) jump to 0073
0073  0028        Push(01)
0077  002C        ax = GetFacing()
007E  0033        Push(ax)
007F  0034        ax = GetNextTile()
0086  003B        Push(ax)
0087  003C        SetMove2C(stk[0], stk[1], stk[2])
0091  0046        ax = GetFacing()
0098  004D        Push(ax)
0099  004E        ax = GetNextTile()
00A0  0055        Push(ax)
00A1  0056        Push(01)
00A5  005A        SetUnblocked()
00AF  0064        ShowMessage(0x03FC) = The door opens.
00BC  0071        Jump to 009D
00BE  0073        Push(00)
00C1  0076        ax = GetFacing()
00C8  007D        Push(ax)
00C9  007E        ax = GetNextTile()
00D0  0085        Push(ax)
00D1  0086        SetMove2C(stk[0], stk[1], stk[2])
00DB  0090        ShowMessage(0x040C) = This door is locked.
00E8  009D        RETURN

QUESTDOR_04:
00EA  0000        BEGIN
00ED  0003        ax = CheckState04(0x02, 0x2E)
00FE  0014        compare(ax, 0x0001)
0101  0017        If (result.notequal) jump to 0078
0103  0019        SetState00(0x02, 0x2E, 0x00)
0117  002D        Push(01)
011B  0031        ax = GetFacing()
0122  0038        Push(ax)
0123  0039        ax = GetNextTile()
012A  0040        Push(ax)
012B  0041        SetMove2C(stk[0], stk[1], stk[2])
0135  004B        ax = GetFacing()
013C  0052        Push(ax)
013D  0053        ax = GetNextTile()
0144  005A        Push(ax)
0145  005B        Push(01)
0149  005F        SetUnblocked()
0153  0069        ShowMessage(0x0421) = The door magically opens!
0160  0076        Jump to 00A2
0162  0078        Push(00)
0165  007B        ax = GetFacing()
016C  0082        Push(ax)
016D  0083        ax = GetNextTile()
0174  008A        Push(ax)
0175  008B        SetMove2C(stk[0], stk[1], stk[2])
017F  0095        ShowMessage(0x043B) = This door will not open.
018C  00A2        RETURN

STRSTELE_05:
018E  0000        BEGIN
0191  0003        SetMoveMap(0x01, 0x1F, 0x01, 0x04)
01AC  001E        RETURN

QSTCHARA_06:
01AE  0000        BEGIN
01B1  0003        ax = HasItem(0xF9)
01BF  0011        If (result.equal) jump to 008C
01C1  0013        Push(01)
01C5  0017        ax = GetFacing()
01CC  001E        Push(ax)
01CD  001F        ax = GetNextTile()
01D4  0026        Push(ax)
01D5  0027        SetMove2C(stk[0], stk[1], stk[2])
01DF  0031        ax = GetFacing()
01E6  0038        Push(ax)
01E7  0039        ax = GetNextTile()
01EE  0040        Push(ax)
01EF  0041        Push(01)
01F3  0045        SetUnblocked()
01FD  004F        SetState00(0x02, 0x2E, 0x01)
0212  0064        ShowPortrait(0x001C)
021F  0071        RemoveItem(0xF9)
022B  007D        ShowMessage(0x0454) = That is indeed the King's Pass. You may continue. If you ever return, I'll need to see another pass.
0238  008A        Jump to 00D0
023A  008C        Push(00)
023D  008F        ax = GetFacing()
0244  0096        Push(ax)
0245  0097        ax = GetNextTile()
024C  009E        Push(ax)
024D  009F        SetMove2C(stk[0], stk[1], stk[2])
0257  00A9        ShowPortrait(0x001C)
0264  00B6        ShowMessage(0x04B9) = None may pass. I am pledged to guard King Cleowyn's Apartments for eternity. Of course, if you had the King's Pass, I could let you through.
0271  00C3        ShowMessage(0x0546) = Seek the Pass where Ranger and Troll are blessed.
027E  00D0        RETURN

QSTCHARB_07:
0280  0000        BEGIN
0283  0003        ax = CheckState04(0x02, 0x22)
0294  0014        compare(ax, 0x0001)
0297  0017        If (result.notequal) jump to 0035
0299  0019        ShowPortrait(0x002C)
02A6  0026        ShowMessage(0x0578) = You have passed the Trial of Harmony. A great reward is yours, if you but look for it.
02B3  0033        Jump to 004F
02B5  0035        ShowPortrait(0x002C)
02C2  0042        ShowMessage(0x05CF) = You have mastered our Challenge. Congratulations! Behold the door of Harmony. Only those pledged to Harmony should enter.
02CF  004F        RETURN

QSTCHARC_08:
02D1  0000        BEGIN
02D4  0003        ax = CheckState04(0x02, 0x23)
02E5  0014        compare(ax, 0x0001)
02E8  0017        If (result.notequal) jump to 0035
02EA  0019        ShowPortrait(0x002D)
02F7  0026        ShowMessage(0x0649) = You have passed the Trial of Chaos. A great reward is yours, if you but look for it.
0304  0033        Jump to 004F
0306  0035        ShowPortrait(0x002D)
0313  0042        ShowMessage(0x069E) = You have mastered our Challenge. Congratulations! Behold the door of Chaos. Only those pledged to Chaos should enter.
0320  004F        RETURN

TELEPORT_09:
0322  0000        BEGIN
0325  0003        SetMoveMap(0x02, 0xF0, 0x01, 0x02)
0340  001E        RETURN

TELEPORT_0A:
0342  0000        BEGIN
0345  0003        SetMoveMap(0x02, 0x87, 0x01, 0x04)
0360  001E        RETURN

HUTHDOOR_0B:
0362  0000        BEGIN
0365  0003        ax = GetRace()
036C  000A        RefreshCompareFlags(ax)
036E  000C        If (result.equal) jump to 001A
0370  000E        ax = GetGuild()
0377  0015        compare(ax, 0x0003)
037A  0018        If (result.notequal) jump to 0065
037C  001A        Push(01)
0380  001E        ax = GetFacing()
0387  0025        Push(ax)
0388  0026        ax = GetNextTile()
038F  002D        Push(ax)
0390  002E        SetMove2C(stk[0], stk[1], stk[2])
039A  0038        ax = GetFacing()
03A1  003F        Push(ax)
03A2  0040        ax = GetNextTile()
03A9  0047        Push(ax)
03AA  0048        Push(01)
03AE  004C        SetUnblocked()
03B8  0056        ShowMessage(0x0714) = The door is opened
03C5  0063        Jump to 008F
03C7  0065        Push(00)
03CA  0068        ax = GetFacing()
03D1  006F        Push(ax)
03D2  0070        ax = GetNextTile()
03D9  0077        Push(ax)
03DA  0078        SetMove2C(stk[0], stk[1], stk[2])
03E4  0082        ShowMessage(0x0727) = The door can be opened only by a Human or Thief.
03F1  008F        RETURN

ORCLDOOR_0C:
03F3  0000        BEGIN
03F6  0003        ax = GetRace()
03FD  000A        compare(ax, 0x0001)
0400  000D        If (result.equal) jump to 001B
0402  000F        ax = GetGuild()
0409  0016        compare(ax, 0x0004)
040C  0019        If (result.notequal) jump to 0066
040E  001B        Push(01)
0412  001F        ax = GetFacing()
0419  0026        Push(ax)
041A  0027        ax = GetNextTile()
0421  002E        Push(ax)
0422  002F        SetMove2C(stk[0], stk[1], stk[2])
042C  0039        ax = GetFacing()
0433  0040        Push(ax)
0434  0041        ax = GetNextTile()
043B  0048        Push(ax)
043C  0049        Push(01)
0440  004D        SetUnblocked()
044A  0057        ShowMessage(0x0758) = The lock of the door opens as you step forward.
0457  0064        Jump to 0090
0459  0066        Push(00)
045C  0069        ax = GetFacing()
0463  0070        Push(ax)
0464  0071        ax = GetNextTile()
046B  0078        Push(ax)
046C  0079        SetMove2C(stk[0], stk[1], stk[2])
0476  0083        ShowMessage(0x0788) = The door can be opened only by an Orc or Cleric.
0483  0090        RETURN

ELBADOOR_0D:
0485  0000        BEGIN
0488  0003        ax = GetRace()
048F  000A        compare(ax, 0x0002)
0492  000D        If (result.equal) jump to 001A
0494  000F        ax = GetGuild()
049B  0016        RefreshCompareFlags(ax)
049D  0018        If (result.notequal) jump to 0065
049F  001A        Push(01)
04A3  001E        ax = GetFacing()
04AA  0025        Push(ax)
04AB  0026        ax = GetNextTile()
04B2  002D        Push(ax)
04B3  002E        SetMove2C(stk[0], stk[1], stk[2])
04BD  0038        ax = GetFacing()
04C4  003F        Push(ax)
04C5  0040        ax = GetNextTile()
04CC  0047        Push(ax)
04CD  0048        Push(01)
04D1  004C        SetUnblocked()
04DB  0056        ShowMessage(0x07B9) = The lock opens as you approach.
04E8  0063        Jump to 008F
04EA  0065        Push(00)
04ED  0068        ax = GetFacing()
04F4  006F        Push(ax)
04F5  0070        ax = GetNextTile()
04FC  0077        Push(ax)
04FD  0078        SetMove2C(stk[0], stk[1], stk[2])
0507  0082        ShowMessage(0x07D9) = The door can be opened only by an Elf or Barbarian.
0514  008F        RETURN

TRRADOOR_0E:
0516  0000        BEGIN
0519  0003        ax = GetRace()
0520  000A        compare(ax, 0x0003)
0523  000D        If (result.equal) jump to 001B
0525  000F        ax = GetGuild()
052C  0016        compare(ax, 0x0002)
052F  0019        If (result.notequal) jump to 0066
0531  001B        Push(01)
0535  001F        ax = GetFacing()
053C  0026        Push(ax)
053D  0027        ax = GetNextTile()
0544  002E        Push(ax)
0545  002F        SetMove2C(stk[0], stk[1], stk[2])
054F  0039        ax = GetFacing()
0556  0040        Push(ax)
0557  0041        ax = GetNextTile()
055E  0048        Push(ax)
055F  0049        Push(01)
0563  004D        SetUnblocked()
056D  0057        ShowMessage(0x080D) = The door unlocks when you test it.
057A  0064        Jump to 0090
057C  0066        Push(00)
057F  0069        ax = GetFacing()
0586  0070        Push(ax)
0587  0071        ax = GetNextTile()
058E  0078        Push(ax)
058F  0079        SetMove2C(stk[0], stk[1], stk[2])
0599  0083        ShowMessage(0x0830) = The door can be opened only by a Troll or Ranger.
05A6  0090        RETURN

DWKNDOOR_0F:
05A8  0000        BEGIN
05AB  0003        ax = GetRace()
05B2  000A        compare(ax, 0x0004)
05B5  000D        If (result.equal) jump to 001B
05B7  000F        ax = GetGuild()
05BE  0016        compare(ax, 0x0001)
05C1  0019        If (result.notequal) jump to 0066
05C3  001B        Push(01)
05C7  001F        ax = GetFacing()
05CE  0026        Push(ax)
05CF  0027        ax = GetNextTile()
05D6  002E        Push(ax)
05D7  002F        SetMove2C(stk[0], stk[1], stk[2])
05E1  0039        ax = GetFacing()
05E8  0040        Push(ax)
05E9  0041        ax = GetNextTile()
05F0  0048        Push(ax)
05F1  0049        Push(01)
05F5  004D        SetUnblocked()
05FF  0057        ShowMessage(0x0862) = The door opens as you advance.
060C  0064        Jump to 0090
060E  0066        Push(00)
0611  0069        ax = GetFacing()
0618  0070        Push(ax)
0619  0071        ax = GetNextTile()
0620  0078        Push(ax)
0621  0079        SetMove2C(stk[0], stk[1], stk[2])
062B  0083        ShowMessage(0x0881) = The door can be opened only by a Dwarf or Knight.
0638  0090        RETURN

GNWIDOOR_10:
063A  0000        BEGIN
063D  0003        ax = GetRace()
0644  000A        compare(ax, 0x0005)
0647  000D        If (result.equal) jump to 001B
0649  000F        ax = GetGuild()
0650  0016        compare(ax, 0x0005)
0653  0019        If (result.notequal) jump to 0066
0655  001B        Push(01)
0659  001F        ax = GetFacing()
0660  0026        Push(ax)
0661  0027        ax = GetNextTile()
0668  002E        Push(ax)
0669  002F        SetMove2C(stk[0], stk[1], stk[2])
0673  0039        ax = GetFacing()
067A  0040        Push(ax)
067B  0041        ax = GetNextTile()
0682  0048        Push(ax)
0683  0049        Push(01)
0687  004D        SetUnblocked()
0691  0057        ShowMessage(0x08B3) = The door is opened.
069E  0064        Jump to 0090
06A0  0066        Push(00)
06A3  0069        ax = GetFacing()
06AA  0070        Push(ax)
06AB  0071        ax = GetNextTile()
06B2  0078        Push(ax)
06B3  0079        SetMove2C(stk[0], stk[1], stk[2])
06BD  0083        ShowMessage(0x08C7) = The door can be opened only by a Gnome or Wizard.
06CA  0090        RETURN

HAITDOOR_11:
06CC  0000        BEGIN
06CF  0003        ax = GetRace()
06D6  000A        compare(ax, 0x0006)
06D9  000D        If (result.equal) jump to 001F
06DB  000F        ax = HasItem(0xD3)
06E9  001D        If (result.equal) jump to 006A
06EB  001F        Push(01)
06EF  0023        ax = GetFacing()
06F6  002A        Push(ax)
06F7  002B        ax = GetNextTile()
06FE  0032        Push(ax)
06FF  0033        SetMove2C(stk[0], stk[1], stk[2])
0709  003D        ax = GetFacing()
0710  0044        Push(ax)
0711  0045        ax = GetNextTile()
0718  004C        Push(ax)
0719  004D        Push(01)
071D  0051        SetUnblocked()
0727  005B        ShowMessage(0x08F9) = The door clicks open.
0734  0068        Jump to 0094
0736  006A        Push(00)
0739  006D        ax = GetFacing()
0740  0074        Push(ax)
0741  0075        ax = GetNextTile()
0748  007C        Push(ax)
0749  007D        SetMove2C(stk[0], stk[1], stk[2])
0753  0087        ShowMessage(0x090F) = The door can be opened only by a Halfling or by Cleowyn's Key.
0760  0094        RETURN

GRITDOOR_12:
0762  0000        BEGIN
0765  0003        ax = GetRace()
076C  000A        compare(ax, 0x0007)
076F  000D        If (result.equal) jump to 001F
0771  000F        ax = HasItem(0xD2)
077F  001D        If (result.equal) jump to 006A
0781  001F        Push(01)
0785  0023        ax = GetFacing()
078C  002A        Push(ax)
078D  002B        ax = GetNextTile()
0794  0032        Push(ax)
0795  0033        SetMove2C(stk[0], stk[1], stk[2])
079F  003D        ax = GetFacing()
07A6  0044        Push(ax)
07A7  0045        ax = GetNextTile()
07AE  004C        Push(ax)
07AF  004D        Push(01)
07B3  0051        SetUnblocked()
07BD  005B        ShowMessage(0x094E) = The lock opens for you.
07CA  0068        Jump to 0094
07CC  006A        Push(00)
07CF  006D        ax = GetFacing()
07D6  0074        Push(ax)
07D7  0075        ax = GetNextTile()
07DE  007C        Push(ax)
07DF  007D        SetMove2C(stk[0], stk[1], stk[2])
07E9  0087        ShowMessage(0x0966) = The door can be opened only by a Gremlin or by Cleowyn's Lockpick.
07F6  0094        RETURN

OTGGDOOR_13:
07F8  0000        BEGIN
07FB  0003        ShowMessage(0x09A9) = A warning is on the door -
0808  0010        ax = GetAlignment()
0810  0018        RefreshCompareFlags(ax)
0812  001A        If (result.notequal) jump to 002B
0814  001C        ShowMessage(0x09C4) = 'Those honoring Harmony may safely enter.'
0821  0029        Jump to 0038
0823  002B        ShowMessage(0x09EF) = 'Woe to you who serve Chaos, if you dare cross the threshold.'
0830  0038        RETURN

HEDHDOOR_14:
0832  0000        BEGIN
0835  0003        ShowMessage(0x0A2E) = A warning is on the door -
0842  0010        ax = GetAlignment()
084A  0018        compare(ax, 0x0001)
084D  001B        If (result.notequal) jump to 002C
084F  001D        ShowMessage(0x0A49) = 'Those honoring Chaos may safely enter.'
085C  002A        Jump to 0039
085E  002C        ShowMessage(0x0A72) = 'Woe to you who serve Harmony, if you dare cross the threshold.'
086B  0039        RETURN

CHAOSDOR_15:
086D  0000        BEGIN
0870  0003        ShowMessage(0x0AB3) = A sign is on the door -
087D  0010        ax = GetFacing()
0884  0017        Push(ax)
0885  0018        ax = GetNextTile()
088C  001F        Push(ax)
088D  0020        Push(01)
0891  0024        SetUnblocked()
089B  002E        ax = GetAlignment()
08A3  0036        compare(ax, 0x0001)
08A6  0039        If (result.notequal) jump to 0068
08A8  003B        Push(01)
08AC  003F        ax = GetFacing()
08B3  0046        Push(ax)
08B4  0047        ax = GetNextTile()
08BB  004E        Push(ax)
08BC  004F        SetMove2C(stk[0], stk[1], stk[2])
08C6  0059        ShowMessage(0x0ACB) = The way is clear for members of Chaos.
08D3  0066        Jump to 00C8
08D5  0068        ModifyGold(0xFFFF78BA)
08E7  007A        ModifyAttribute(0x00, 0xFFFE)
08F8  008B        ModifyAttribute(0x01, 0xFFFE)
090A  009D        Push(01)
090E  00A1        ax = GetFacing()
0915  00A8        Push(ax)
0916  00A9        ax = GetNextTile()
091D  00B0        Push(ax)
091E  00B1        SetMove2C(stk[0], stk[1], stk[2])
0928  00BB        ShowMessage(0x0AF2) = Those not sworn to Chaos have been duly chastised.
0935  00C8        RETURN

HARMDOOR_16:
0937  0000        BEGIN
093A  0003        ShowMessage(0x0B25) = A sign is on the door -
0947  0010        ax = GetFacing()
094E  0017        Push(ax)
094F  0018        ax = GetNextTile()
0956  001F        Push(ax)
0957  0020        Push(01)
095B  0024        SetUnblocked()
0965  002E        ax = GetAlignment()
096D  0036        RefreshCompareFlags(ax)
096F  0038        If (result.notequal) jump to 0067
0971  003A        Push(01)
0975  003E        ax = GetFacing()
097C  0045        Push(ax)
097D  0046        ax = GetNextTile()
0984  004D        Push(ax)
0985  004E        SetMove2C(stk[0], stk[1], stk[2])
098F  0058        ShowMessage(0x0B3D) = The way is clear for members of Harmony.
099C  0065        Jump to 00C7
099E  0067        ModifyGold(0xFFFF78BA)
09B0  0079        ModifyAttribute(0x00, 0xFFFE)
09C1  008A        ModifyAttribute(0x01, 0xFFFE)
09D3  009C        Push(01)
09D7  00A0        ax = GetFacing()
09DE  00A7        Push(ax)
09DF  00A8        ax = GetNextTile()
09E6  00AF        Push(ax)
09E7  00B0        SetMove2C(stk[0], stk[1], stk[2])
09F1  00BA        ShowMessage(0x0B66) = Those not sworn to Harmony have been duly chastised.
09FE  00C7        RETURN

PAYAENC_17:
0A00  0000        BEGIN
0A03  0003        ax = CheckState04(0x02, 0x23)
0A14  0014        compare(ax, 0x0001)
0A17  0017        If (result.equal) jump to 0025
0A19  0019        ax = GetAlignment()
0A21  0021        RefreshCompareFlags(ax)
0A23  0023        If (result.notequal) jump to 0048
0A25  0025        AddTreasure(0x0064, 0x00, 0x00, 0x00, 0xCE, 0xB7)
0A45  0045        Jump to 00E1
0A48  0048        SetState00(0x02, 0x23, 0x01)
0A5D  005D        ax = GetGuild()
0A64  0064        compare(ax, 0x0005)
0A67  0067        If (result.equal) jump to 0075
0A69  0069        ax = GetGuild()
0A70  0070        compare(ax, 0x0004)
0A73  0073        If (result.notequal) jump to 0096
0A75  0075        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x0E)
0A94  0094        Jump to 00E1
0A96  0096        ax = GetGuild()
0A9D  009D        RefreshCompareFlags(ax)
0A9F  009F        If (result.notequal) jump to 00C2
0AA1  00A1        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x2A)
0AC0  00C0        Jump to 00E1
0AC2  00C2        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x4B)
0AE1  00E1        ShowMessage(0x0B9B) = Rogues bar the way to Chaos.
0AEE  00EE        ax = PartyCount()
0AF6  00F6        compare(ax, 0x0001)
0AF9  00F9        If (result.notequal) jump to 0134
0AFB  00FB        AddEncounter(0x26, 0x01)
0B0D  010D        AddEncounter(0x1C, 0x02)
0B1F  011F        AddEncounter(0x1D, 0x06)
0B31  0131        Jump to 0209
0B34  0134        ax = PartyCount()
0B3C  013C        compare(ax, 0x0002)
0B3F  013F        If (result.notequal) jump to 019D
0B41  0141        AddEncounter(0x26, 0x01)
0B53  0153        AddEncounter(0x24, 0x02)
0B65  0165        AddEncounter(0x1F, 0x03)
0B77  0177        AddEncounter(0x1C, 0x04)
0B89  0189        AddEncounter(0x1D, 0x05)
0B9B  019B        Jump to 0209
0B9D  019D        AddEncounter(0x26, 0x01)
0BAF  01AF        AddEncounter(0x26, 0x02)
0BC1  01C1        AddEncounter(0x24, 0x03)
0BD3  01D3        AddEncounter(0x24, 0x04)
0BE5  01E5        AddEncounter(0x21, 0x05)
0BF7  01F7        AddEncounter(0x1D, 0x06)
0C09  0209        RETURN

PAYBENC_18:
0C0B  0000        BEGIN
0C0E  0003        ax = CheckState04(0x02, 0x22)
0C1F  0014        compare(ax, 0x0001)
0C22  0017        If (result.equal) jump to 0026
0C24  0019        ax = GetAlignment()
0C2C  0021        compare(ax, 0x0001)
0C2F  0024        If (result.notequal) jump to 0049
0C31  0026        AddTreasure(0x0064, 0x00, 0x00, 0x00, 0xCE, 0xB7)
0C51  0046        Jump to 011C
0C54  0049        SetState00(0x02, 0x22, 0x01)
0C69  005E        ax = GetGuild()
0C70  0065        RefreshCompareFlags(ax)
0C72  0067        If (result.equal) jump to 0075
0C74  0069        ax = GetGuild()
0C7B  0070        compare(ax, 0x0004)
0C7E  0073        If (result.notequal) jump to 0097
0C80  0075        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x22)
0C9F  0094        Jump to 011C
0CA2  0097        ax = GetGuild()
0CA9  009E        compare(ax, 0x0001)
0CAC  00A1        If (result.notequal) jump to 00C4
0CAE  00A3        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x10)
0CCD  00C2        Jump to 011C
0CCF  00C4        ax = GetGuild()
0CD6  00CB        compare(ax, 0x0002)
0CD9  00CE        If (result.equal) jump to 00DC
0CDB  00D0        ax = GetGuild()
0CE2  00D7        compare(ax, 0x0003)
0CE5  00DA        If (result.notequal) jump to 00FD
0CE7  00DC        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x45)
0D06  00FB        Jump to 011C
0D08  00FD        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x06)
0D27  011C        ShowMessage(0x0BB8) = Rogues bar the way to Harmony.
0D34  0129        ax = PartyCount()
0D3C  0131        compare(ax, 0x0001)
0D3F  0134        If (result.notequal) jump to 016F
0D41  0136        AddEncounter(0x26, 0x01)
0D53  0148        AddEncounter(0x1C, 0x02)
0D65  015A        AddEncounter(0x1D, 0x06)
0D77  016C        Jump to 0244
0D7A  016F        ax = PartyCount()
0D82  0177        compare(ax, 0x0002)
0D85  017A        If (result.notequal) jump to 01D8
0D87  017C        AddEncounter(0x26, 0x01)
0D99  018E        AddEncounter(0x24, 0x02)
0DAB  01A0        AddEncounter(0x1F, 0x03)
0DBD  01B2        AddEncounter(0x1C, 0x04)
0DCF  01C4        AddEncounter(0x1D, 0x05)
0DE1  01D6        Jump to 0244
0DE3  01D8        AddEncounter(0x26, 0x01)
0DF5  01EA        AddEncounter(0x26, 0x02)
0E07  01FC        AddEncounter(0x24, 0x03)
0E19  020E        AddEncounter(0x24, 0x04)
0E2B  0220        AddEncounter(0x21, 0x05)
0E3D  0232        AddEncounter(0x1D, 0x06)
0E4F  0244        RETURN

BLESSMES_19:
0E51  0000        BEGIN
0E54  0003        ax = CheckState0C(0x02, 0x2F)
0E67  0016        If (result.equal) jump to 0076
0E69  0018        ax = GetRace()
0E70  001F        RefreshCompareFlags(ax)
0E72  0021        If (result.equal) jump to 002F
0E74  0023        ax = GetGuild()
0E7B  002A        compare(ax, 0x0003)
0E7E  002D        If (result.notequal) jump to 0076
0E80  002F        SetState00(0x02, 0x2F, 0x01)
0E95  0044        ModifyAttribute(0x00, 0x0001)
0EA6  0055        ModifyAttribute(0x01, 0x0001)
0EB8  0067        ShowMessage(0x0BD7) = Blessed Human or Thief, you may continue the quest.
0EC5  0074        Jump to 0098
0EC7  0076        SetState00(0x02, 0x2F, 0x01)
0EDC  008B        ShowMessage(0x0C0B) = The tapestry shows nothing of interest.
0EE9  0098        RETURN

BLESSMES_1A:
0EEB  0000        BEGIN
0EEE  0003        ax = CheckState0C(0x02, 0x30)
0F01  0016        If (result.equal) jump to 0077
0F03  0018        ax = GetRace()
0F0A  001F        compare(ax, 0x0001)
0F0D  0022        If (result.equal) jump to 0030
0F0F  0024        ax = GetGuild()
0F16  002B        compare(ax, 0x0004)
0F19  002E        If (result.notequal) jump to 0077
0F1B  0030        SetState00(0x02, 0x30, 0x01)
0F30  0045        ModifyAttribute(0x00, 0x0001)
0F41  0056        ModifyAttribute(0x01, 0x0001)
0F53  0068        ShowMessage(0x0C33) = Blessed Orc or Cleric, you may continue the quest.
0F60  0075        Jump to 0099
0F62  0077        SetState00(0x02, 0x30, 0x01)
0F77  008C        ShowMessage(0x0C66) = The tapestry shows a jumble of runes.
0F84  0099        RETURN

BLESSMES_1B:
0F86  0000        BEGIN
0F89  0003        ax = CheckState0C(0x02, 0x31)
0F9C  0016        If (result.equal) jump to 0076
0F9E  0018        ax = GetRace()
0FA5  001F        compare(ax, 0x0002)
0FA8  0022        If (result.equal) jump to 002F
0FAA  0024        ax = GetGuild()
0FB1  002B        RefreshCompareFlags(ax)
0FB3  002D        If (result.notequal) jump to 0076
0FB5  002F        SetState00(0x02, 0x31, 0x01)
0FCA  0044        ModifyAttribute(0x00, 0x0001)
0FDB  0055        ModifyAttribute(0x01, 0x0001)
0FED  0067        ShowMessage(0x0C8C) = Blessed Elf or Barbarian, you may continue the quest.
0FFA  0074        Jump to 0098
0FFC  0076        SetState00(0x02, 0x31, 0x01)
1011  008B        ShowMessage(0x0CC2) = The tapestry is blank.
101E  0098        RETURN

BLESSMES_1C:
1020  0000        BEGIN
1023  0003        ax = CheckState0C(0x02, 0x32)
1036  0016        If (result.equal) jump to 0077
1038  0018        ax = GetRace()
103F  001F        compare(ax, 0x0003)
1042  0022        If (result.equal) jump to 0030
1044  0024        ax = GetGuild()
104B  002B        compare(ax, 0x0002)
104E  002E        If (result.notequal) jump to 0077
1050  0030        SetState00(0x02, 0x32, 0x01)
1065  0045        ModifyAttribute(0x00, 0x0001)
1076  0056        ModifyAttribute(0x01, 0x0001)
1088  0068        ShowMessage(0x0CD9) = Blessed Troll or Ranger, you may continue the quest.
1095  0075        Jump to 0099
1097  0077        SetState00(0x02, 0x32, 0x01)
10AC  008C        ShowMessage(0x0D0E) = The tapestry is blank.
10B9  0099        RETURN

BLESSMES_1D:
10BB  0000        BEGIN
10BE  0003        ax = CheckState0C(0x02, 0x33)
10D1  0016        If (result.equal) jump to 0077
10D3  0018        ax = GetRace()
10DA  001F        compare(ax, 0x0004)
10DD  0022        If (result.equal) jump to 0030
10DF  0024        ax = GetGuild()
10E6  002B        compare(ax, 0x0001)
10E9  002E        If (result.notequal) jump to 0077
10EB  0030        SetState00(0x02, 0x33, 0x01)
1100  0045        ModifyAttribute(0x00, 0x0001)
1111  0056        ModifyAttribute(0x01, 0x0001)
1123  0068        ShowMessage(0x0D25) = Blessed Dwarf or Knight, you may continue the quest.
1130  0075        Jump to 0099
1132  0077        SetState00(0x02, 0x33, 0x01)
1147  008C        ShowMessage(0x0D5A) = It is too dark to read the inscription.
1154  0099        RETURN

BLESSMES_1E:
1156  0000        BEGIN
1159  0003        ax = CheckState0C(0x02, 0x34)
116C  0016        If (result.equal) jump to 0077
116E  0018        ax = GetRace()
1175  001F        compare(ax, 0x0005)
1178  0022        If (result.equal) jump to 0030
117A  0024        ax = GetGuild()
1181  002B        compare(ax, 0x0005)
1184  002E        If (result.notequal) jump to 0077
1186  0030        SetState00(0x02, 0x34, 0x01)
119B  0045        ModifyAttribute(0x00, 0x0001)
11AC  0056        ModifyAttribute(0x01, 0x0001)
11BE  0068        ShowMessage(0x0D82) = Blessed Gnome or Wizard, you may continue the quest.
11CB  0075        Jump to 0099
11CD  0077        SetState00(0x02, 0x34, 0x01)
11E2  008C        ShowMessage(0x0DB7) = An inscription on the tapestry fades away as you draw near.
11EF  0099        RETURN

BLESSMES_1F:
11F1  0000        BEGIN
11F4  0003        ax = CheckState0C(0x02, 0x35)
1207  0016        If (result.equal) jump to 0087
1209  0018        ax = GetRace()
1210  001F        compare(ax, 0x0006)
1213  0022        If (result.equal) jump to 0034
1215  0024        ax = HasItem(0xD3)
1223  0032        If (result.equal) jump to 0087
1225  0034        SetState00(0x02, 0x35, 0x01)
123A  0049        ShowMessage(0x0DF3) = Blessed Halfling! Blessed Key of Cleowyn! With either, the quest may continue.
1247  0056        ax = GetRace()
124E  005D        compare(ax, 0x0006)
1251  0060        If (result.notequal) jump to 0085
1253  0062        ModifyAttribute(0x00, 0x0001)
1264  0073        ModifyAttribute(0x01, 0x0001)
1276  0085        Jump to 00A9
1278  0087        SetState00(0x02, 0x35, 0x01)
128D  009C        ShowMessage(0x0E42) = The tapestry is empty.
129A  00A9        RETURN

BLESSMES_20:
129C  0000        BEGIN
129F  0003        ax = CheckState0C(0x02, 0x36)
12B2  0016        If (result.equal) jump to 0087
12B4  0018        ax = GetRace()
12BB  001F        compare(ax, 0x0007)
12BE  0022        If (result.equal) jump to 0034
12C0  0024        ax = HasItem(0xD2)
12CE  0032        If (result.equal) jump to 0087
12D0  0034        SetState00(0x02, 0x36, 0x01)
12E5  0049        ShowMessage(0x0E59) = Blessed Gremlin! Blessed Pick of Cleowyn! With either, the quest may continue.
12F2  0056        ax = GetRace()
12F9  005D        compare(ax, 0x0007)
12FC  0060        If (result.notequal) jump to 0085
12FE  0062        ModifyAttribute(0x00, 0x0001)
130F  0073        ModifyAttribute(0x01, 0x0001)
1321  0085        Jump to 00A9
1323  0087        SetState00(0x02, 0x36, 0x01)
1338  009C        ShowMessage(0x0EA8) = The tapestry once held a woven message.
1345  00A9        RETURN

ENDQSTDR_21:
1347  0000        BEGIN
134A  0003        ax = CheckState04(0x02, 0x22)
135B  0014        compare(ax, 0x0001)
135E  0017        If (result.equal) jump to 002F
1360  0019        ax = CheckState04(0x02, 0x23)
1371  002A        compare(ax, 0x0001)
1374  002D        If (result.notequal) jump to 0078
1376  002F        Push(01)
137A  0033        ax = GetFacing()
1381  003A        Push(ax)
1382  003B        ax = GetNextTile()
1389  0042        Push(ax)
138A  0043        SetMove2C(stk[0], stk[1], stk[2])
1394  004D        ax = GetFacing()
139B  0054        Push(ax)
139C  0055        ax = GetNextTile()
13A3  005C        Push(ax)
13A4  005D        Push(01)
13A8  0061        SetUnblocked()
13B2  006B        ShowMessage(0x0ED0) = You found a secret door!
13BF  0078        RETURN

QUESTBEN_22:
13C1  0000        BEGIN
13C4  0003        ShowMessage(0x0EE9) = Reptilian bodies rise from the shadows.
13D1  0010        ax = HasItem(0xEE)
13DF  001E        If (result.equal) jump to 0041
13E1  0020        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0xCF)
1400  003F        Jump to 006D
1402  0041        ShowMessage(0x0F11) = On the floor is a Chess Piece inscribed with the words - 'Property of Arnakkian Slowfoot.'
140F  004E        AddTreasure(0x0BB8, 0x00, 0x00, 0x00, 0x00, 0xEE)
142E  006D        ax = PartyCount()
1436  0075        compare(ax, 0x0001)
1439  0078        If (result.notequal) jump to 00A1
143B  007A        AddEncounter(0x28, 0x01)
144D  008C        AddEncounter(0x27, 0x02)
145F  009E        Jump to 0171
1462  00A1        ax = PartyCount()
146A  00A9        compare(ax, 0x0002)
146D  00AC        If (result.equal) jump to 00BB
146F  00AE        ax = PartyCount()
1477  00B6        compare(ax, 0x0003)
147A  00B9        If (result.notequal) jump to 0105
147C  00BB        AddEncounter(0x27, 0x01)
148E  00CD        AddEncounter(0x27, 0x02)
14A0  00DF        AddEncounter(0x28, 0x05)
14B2  00F1        AddEncounter(0x28, 0x06)
14C4  0103        Jump to 0171
14C6  0105        AddEncounter(0x27, 0x01)
14D8  0117        AddEncounter(0x27, 0x02)
14EA  0129        AddEncounter(0x27, 0x03)
14FC  013B        AddEncounter(0x27, 0x04)
150E  014D        AddEncounter(0x28, 0x05)
1520  015F        AddEncounter(0x28, 0x06)
1532  0171        RETURN

GOLDAENC_23:
1534  0000        BEGIN
1537  0003        ax = CheckState08(0x02, 0x24)
154A  0016        If (result.equal) jump to 0039
154C  0018        AddTreasure(0x0064, 0x00, 0x00, 0x00, 0x00, 0xD1)
156B  0037        Jump to 006E
156D  0039        AddTreasure(0x0BB8, 0x00, 0x00, 0x00, 0xB7, 0xCF)
158D  0059        SetState00(0x02, 0x24, 0x01)
15A2  006E        ax = PartyCount()
15AA  0076        compare(ax, 0x0001)
15AD  0079        If (result.notequal) jump to 0090
15AF  007B        AddEncounter(0x1C, 0x01)
15C1  008D        Jump to 0172
15C4  0090        ax = PartyCount()
15CC  0098        compare(ax, 0x0002)
15CF  009B        If (result.equal) jump to 00AA
15D1  009D        ax = PartyCount()
15D9  00A5        compare(ax, 0x0003)
15DC  00A8        If (result.notequal) jump to 0106
15DE  00AA        AddEncounter(0x1C, 0x01)
15F0  00BC        AddEncounter(0x1C, 0x02)
1602  00CE        AddEncounter(0x1C, 0x03)
1614  00E0        AddEncounter(0x1C, 0x04)
1626  00F2        AddEncounter(0x1C, 0x05)
1638  0104        Jump to 0172
163A  0106        AddEncounter(0x1C, 0x01)
164C  0118        AddEncounter(0x1C, 0x02)
165E  012A        AddEncounter(0x1C, 0x03)
1670  013C        AddEncounter(0x1C, 0x04)
1682  014E        AddEncounter(0x1C, 0x05)
1694  0160        AddEncounter(0x1C, 0x06)
16A6  0172        RETURN

WEAPAENC_24:
16A8  0000        BEGIN
16AB  0003        ax = CheckState08(0x02, 0x25)
16BE  0016        If (result.equal) jump to 003A
16C0  0018        AddTreasure(0x0064, 0x00, 0x00, 0x00, 0xCC, 0xCE)
16E0  0038        Jump to 006F
16E2  003A        AddTreasure(0x07D0, 0x00, 0x00, 0x00, 0xCC, 0x0D)
1702  005A        SetState00(0x02, 0x25, 0x01)
1717  006F        ShowMessage(0x0F6C) = You are challenged to combat.
1724  007C        ax = PartyCount()
172C  0084        compare(ax, 0x0001)
172F  0087        If (result.notequal) jump to 00B0
1731  0089        AddEncounter(0x1D, 0x01)
1743  009B        AddEncounter(0x1D, 0x02)
1755  00AD        Jump to 016E
1758  00B0        ax = PartyCount()
1760  00B8        compare(ax, 0x0002)
1763  00BB        If (result.equal) jump to 00CA
1765  00BD        ax = PartyCount()
176D  00C5        compare(ax, 0x0003)
1770  00C8        If (result.notequal) jump to 0114
1772  00CA        AddEncounter(0x1D, 0x01)
1784  00DC        AddEncounter(0x1D, 0x02)
1796  00EE        AddEncounter(0x1D, 0x03)
17A8  0100        AddEncounter(0x1D, 0x04)
17BA  0112        Jump to 016E
17BC  0114        AddEncounter(0x1D, 0x01)
17CE  0126        AddEncounter(0x1D, 0x02)
17E0  0138        AddEncounter(0x1D, 0x03)
17F2  014A        AddEncounter(0x1D, 0x04)
1804  015C        AddEncounter(0x1D, 0x05)
1816  016E        RETURN

MAGICENC_25:
1818  0000        BEGIN
181B  0003        ax = CheckState04(0x02, 0x26)
182C  0014        compare(ax, 0x0001)
182F  0017        If (result.notequal) jump to 003A
1831  0019        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0xCF)
1850  0038        Jump to 006E
1852  003A        AddTreasure(0x0384, 0x00, 0x00, 0x00, 0x00, 0xB3)
1871  0059        SetState00(0x02, 0x26, 0x01)
1886  006E        ShowMessage(0x0F8A) = Ferocious enemies stop you.
1893  007B        ax = PartyCount()
189B  0083        compare(ax, 0x0001)
189E  0086        If (result.equal) jump to 0095
18A0  0088        ax = PartyCount()
18A8  0090        compare(ax, 0x0002)
18AB  0093        If (result.notequal) jump to 00CE
18AD  0095        AddEncounter(0x1E, 0x01)
18BF  00A7        AddEncounter(0x1E, 0x02)
18D1  00B9        AddEncounter(0x1E, 0x03)
18E3  00CB        Jump to 01A3
18E6  00CE        ax = PartyCount()
18EE  00D6        compare(ax, 0x0003)
18F1  00D9        If (result.notequal) jump to 0137
18F3  00DB        AddEncounter(0x1E, 0x01)
1905  00ED        AddEncounter(0x1E, 0x02)
1917  00FF        AddEncounter(0x1E, 0x03)
1929  0111        AddEncounter(0x1E, 0x04)
193B  0123        AddEncounter(0x1E, 0x05)
194D  0135        Jump to 01A3
194F  0137        AddEncounter(0x1E, 0x01)
1961  0149        AddEncounter(0x1E, 0x02)
1973  015B        AddEncounter(0x1E, 0x03)
1985  016D        AddEncounter(0x1E, 0x04)
1997  017F        AddEncounter(0x1E, 0x05)
19A9  0191        AddEncounter(0x1E, 0x06)
19BB  01A3        RETURN

QUESTAEN_26:
19BD  0000        BEGIN
19C0  0003        ax = HasItem(0xF9)
19CE  0011        If (result.equal) jump to 0041
19D0  0013        AddTreasure(0x0384, 0x00, 0x00, 0x00, 0x00, 0xB0)
19EF  0032        ShowMessage(0x0FA6) = Elf Rangers await you.
19FC  003F        Jump to 007E
19FE  0041        AddTreasure(0x0FA0, 0x00, 0x00, 0x00, 0x00, 0xF9)
1A1D  0060        AddExperience(0x000001F4)
1A2E  0071        ShowMessage(0x0FBD) = An Elf Ranger holds the King's Pass.
1A3B  007E        ax = PartyCount()
1A43  0086        compare(ax, 0x0001)
1A46  0089        If (result.notequal) jump to 00B2
1A48  008B        AddEncounter(0x1F, 0x01)
1A5A  009D        AddEncounter(0x1F, 0x02)
1A6C  00AF        Jump to 0187
1A6F  00B2        ax = PartyCount()
1A77  00BA        compare(ax, 0x0002)
1A7A  00BD        If (result.notequal) jump to 011B
1A7C  00BF        AddEncounter(0x1F, 0x01)
1A8E  00D1        AddEncounter(0x1F, 0x02)
1AA0  00E3        AddEncounter(0x1F, 0x03)
1AB2  00F5        AddEncounter(0x1F, 0x04)
1AC4  0107        AddEncounter(0x1F, 0x05)
1AD6  0119        Jump to 0187
1AD8  011B        AddEncounter(0x1F, 0x01)
1AEA  012D        AddEncounter(0x1F, 0x02)
1AFC  013F        AddEncounter(0x1F, 0x03)
1B0E  0151        AddEncounter(0x1F, 0x04)
1B20  0163        AddEncounter(0x1F, 0x05)
1B32  0175        AddEncounter(0x1F, 0x06)
1B44  0187        RETURN

ITEMAENC_27:
1B46  0000        BEGIN
1B49  0003        ax = CheckState04(0x02, 0x28)
1B5A  0014        compare(ax, 0x0001)
1B5D  0017        If (result.notequal) jump to 003A
1B5F  0019        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xB6)
1B7E  0038        Jump to 006F
1B80  003A        AddTreasure(0x04B0, 0x00, 0x00, 0x00, 0xCF, 0xAA)
1BA0  005A        SetState00(0x02, 0x28, 0x01)
1BB5  006F        ShowMessage(0x0FE2) = Proud knights dispute your progress.
1BC2  007C        ax = PartyCount()
1BCA  0084        compare(ax, 0x0001)
1BCD  0087        If (result.equal) jump to 0096
1BCF  0089        ax = PartyCount()
1BD7  0091        compare(ax, 0x0002)
1BDA  0094        If (result.notequal) jump to 00CE
1BDC  0096        AddEncounter(0x20, 0x01)
1BEE  00A8        AddEncounter(0x20, 0x02)
1C00  00BA        AddEncounter(0x20, 0x03)
1C12  00CC        Jump to 013A
1C14  00CE        AddEncounter(0x20, 0x01)
1C26  00E0        AddEncounter(0x20, 0x02)
1C38  00F2        AddEncounter(0x20, 0x03)
1C4A  0104        AddEncounter(0x20, 0x04)
1C5C  0116        AddEncounter(0x20, 0x05)
1C6E  0128        AddEncounter(0x20, 0x06)
1C80  013A        RETURN

GOLDBENC_28:
1C82  0000        BEGIN
1C85  0003        ax = CheckState04(0x02, 0x29)
1C96  0014        compare(ax, 0x0001)
1C99  0017        If (result.notequal) jump to 003A
1C9B  0019        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0xCB)
1CBA  0038        Jump to 006F
1CBC  003A        AddTreasure(0x2710, 0x00, 0x00, 0x00, 0xB0, 0xCD)
1CDC  005A        SetState00(0x02, 0x29, 0x01)
1CF1  006F        ShowMessage(0x1007) = Strong enemies bar your way.
1CFE  007C        ax = PartyCount()
1D06  0084        compare(ax, 0x0001)
1D09  0087        If (result.equal) jump to 0096
1D0B  0089        ax = PartyCount()
1D13  0091        compare(ax, 0x0002)
1D16  0094        If (result.notequal) jump to 00E0
1D18  0096        AddEncounter(0x21, 0x01)
1D2A  00A8        AddEncounter(0x21, 0x02)
1D3C  00BA        AddEncounter(0x21, 0x03)
1D4E  00CC        AddEncounter(0x21, 0x04)
1D60  00DE        Jump to 014C
1D62  00E0        AddEncounter(0x22, 0x01)
1D74  00F2        AddEncounter(0x22, 0x02)
1D86  0104        AddEncounter(0x22, 0x03)
1D98  0116        AddEncounter(0x22, 0x04)
1DAA  0128        AddEncounter(0x21, 0x05)
1DBC  013A        AddEncounter(0x21, 0x06)
1DCE  014C        RETURN

DRKEYENC_29:
1DD0  0000        BEGIN
1DD3  0003        ax = HasItem(0xC3)
1DE1  0011        If (result.equal) jump to 0041
1DE3  0013        AddTreasure(0x0320, 0x00, 0x00, 0x00, 0x00, 0xB5)
1E02  0032        ShowMessage(0x1024) = There is nothing of interest here.
1E0F  003F        Jump to 006E
1E11  0041        AddTreasure(0x0000, 0x00, 0x00, 0x50, 0x50, 0xC3)
1E31  0061        ShowMessage(0x1047) = You see a lockpick on the floor.
1E3E  006E        ShowMessage(0x1068) = Gallants challenge you.
1E4B  007B        ax = PartyCount()
1E53  0083        compare(ax, 0x0001)
1E56  0086        If (result.notequal) jump to 00AF
1E58  0088        AddEncounter(0x1A, 0x01)
1E6A  009A        AddEncounter(0x1B, 0x02)
1E7C  00AC        Jump to 01A3
1E7F  00AF        ax = PartyCount()
1E87  00B7        compare(ax, 0x0002)
1E8A  00BA        If (result.equal) jump to 00C9
1E8C  00BC        ax = PartyCount()
1E94  00C4        compare(ax, 0x0003)
1E97  00C7        If (result.notequal) jump to 0137
1E99  00C9        AddEncounter(0x1B, 0x01)
1EAB  00DB        AddEncounter(0x1B, 0x02)
1EBD  00ED        AddEncounter(0x1B, 0x03)
1ECF  00FF        AddEncounter(0x1B, 0x04)
1EE1  0111        AddEncounter(0x1A, 0x05)
1EF3  0123        AddEncounter(0x1A, 0x06)
1F05  0135        Jump to 01A3
1F07  0137        AddEncounter(0x1C, 0x01)
1F19  0149        AddEncounter(0x1C, 0x02)
1F2B  015B        AddEncounter(0x1A, 0x03)
1F3D  016D        AddEncounter(0x1A, 0x04)
1F4F  017F        AddEncounter(0x1C, 0x05)
1F61  0191        AddEncounter(0x1C, 0x06)
1F73  01A3        RETURN

SPKEYDOO_2A:
1F75  0000        BEGIN
1F78  0003        ax = UsedItem(0xE1, 0xE1)
1F8B  0016        If (result.notequal) jump to 002D
1F8D  0018        ax = UsedItem(0xE2, 0xE2)
1FA0  002B        If (result.equal) jump to 0078
1FA2  002D        Push(01)
1FA6  0031        ax = GetFacing()
1FAD  0038        Push(ax)
1FAE  0039        ax = GetNextTile()
1FB5  0040        Push(ax)
1FB6  0041        SetMove2C(stk[0], stk[1], stk[2])
1FC0  004B        ax = GetFacing()
1FC7  0052        Push(ax)
1FC8  0053        ax = GetNextTile()
1FCF  005A        Push(ax)
1FD0  005B        Push(01)
1FD4  005F        SetUnblocked()
1FDE  0069        ShowMessage(0x1080) = The key opens the door.
1FEB  0076        Jump to 00A2
1FED  0078        Push(00)
1FF0  007B        ax = GetFacing()
1FF7  0082        Push(ax)
1FF8  0083        ax = GetNextTile()
1FFF  008A        Push(ax)
2000  008B        SetMove2C(stk[0], stk[1], stk[2])
200A  0095        ShowMessage(0x1098) = The door is locked and requires a special key.
2017  00A2        RETURN

EMPTY:
2019  0000        <Empty Function>

ITEMBENC_2C:
201E  0000        BEGIN
2021  0003        ax = CheckState04(0x02, 0x2A)
2032  0014        compare(ax, 0x0001)
2035  0017        If (result.notequal) jump to 003A
2037  0019        AddTreasure(0x001E, 0x00, 0x00, 0x00, 0x00, 0xB1)
2056  0038        Jump to 006F
2058  003A        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0xB1, 0x55)
2078  005A        SetState00(0x02, 0x2A, 0x01)
208D  006F        ShowMessage(0x10C7) = Fierce opponents bar your way.
209A  007C        ax = PartyCount()
20A2  0084        compare(ax, 0x0001)
20A5  0087        If (result.notequal) jump to 00C2
20A7  0089        AddEncounter(0x25, 0x01)
20B9  009B        AddEncounter(0x26, 0x02)
20CB  00AD        AddEncounter(0x25, 0x04)
20DD  00BF        Jump to 01B6
20E0  00C2        ax = PartyCount()
20E8  00CA        compare(ax, 0x0002)
20EB  00CD        If (result.equal) jump to 00DC
20ED  00CF        ax = PartyCount()
20F5  00D7        compare(ax, 0x0003)
20F8  00DA        If (result.notequal) jump to 014A
20FA  00DC        AddEncounter(0x26, 0x01)
210C  00EE        AddEncounter(0x26, 0x02)
211E  0100        AddEncounter(0x25, 0x03)
2130  0112        AddEncounter(0x25, 0x04)
2142  0124        AddEncounter(0x26, 0x05)
2154  0136        AddEncounter(0x26, 0x06)
2166  0148        Jump to 01B6
2168  014A        AddEncounter(0x26, 0x01)
217A  015C        AddEncounter(0x26, 0x02)
218C  016E        AddEncounter(0x26, 0x03)
219E  0180        AddEncounter(0x26, 0x04)
21B0  0192        AddEncounter(0x25, 0x05)
21C2  01A4        AddEncounter(0x25, 0x06)
21D4  01B6        RETURN

GOLDPILE_2D:
21D6  0000        BEGIN
21D9  0003        ax = CheckState04(0x02, 0x2B)
21EA  0014        compare(ax, 0x0001)
21ED  0017        If (result.notequal) jump to 0028
21EF  0019        ShowMessage(0x10E6) = This area has been looted.
21FC  0026        Jump to 005B
21FE  0028        ModifyGold(0x2EE0)
220F  0039        SetState00(0x02, 0x2B, 0x01)
2224  004E        ShowMessage(0x1101) = You find 12000 Gold Pieces on the floor.
2231  005B        RETURN

STRMNSTR_2E:
2233  0000        BEGIN
2236  0003        ax = PartyCount()
223E  000B        compare(ax, 0x0001)
2241  000E        If (result.notequal) jump to 0037
2243  0010        AddEncounter(0x27, 0x01)
2255  0022        AddEncounter(0x06, 0x02)
2267  0034        Jump to 0119
226A  0037        ax = PartyCount()
2272  003F        compare(ax, 0x0002)
2275  0042        If (result.equal) jump to 0051
2277  0044        ax = PartyCount()
227F  004C        compare(ax, 0x0003)
2282  004F        If (result.notequal) jump to 00AD
2284  0051        AddEncounter(0x27, 0x01)
2296  0063        AddEncounter(0x1B, 0x02)
22A8  0075        AddEncounter(0x27, 0x03)
22BA  0087        AddEncounter(0x1B, 0x04)
22CC  0099        AddEncounter(0x06, 0x05)
22DE  00AB        Jump to 0119
22E0  00AD        AddEncounter(0x27, 0x01)
22F2  00BF        AddEncounter(0x27, 0x02)
2304  00D1        AddEncounter(0x1B, 0x03)
2316  00E3        AddEncounter(0x1B, 0x04)
2328  00F5        AddEncounter(0x06, 0x05)
233A  0107        AddEncounter(0x06, 0x06)
234C  0119        RETURN

TUFMNSTR_2F:
234E  0000        BEGIN
2351  0003        ShowMessage(0x112A) = Your way is blocked.
235E  0010        ax = PartyCount()
2366  0018        compare(ax, 0x0001)
2369  001B        If (result.equal) jump to 002A
236B  001D        ax = PartyCount()
2373  0025        compare(ax, 0x0002)
2376  0028        If (result.notequal) jump to 0074
2378  002A        AddEncounter(0x18, 0x01)
238A  003C        AddEncounter(0x17, 0x02)
239C  004E        AddEncounter(0x17, 0x03)
23AE  0060        AddEncounter(0x18, 0x04)
23C0  0072        Jump to 00E0
23C2  0074        AddEncounter(0x18, 0x01)
23D4  0086        AddEncounter(0x18, 0x02)
23E6  0098        AddEncounter(0x17, 0x03)
23F8  00AA        AddEncounter(0x17, 0x04)
240A  00BC        AddEncounter(0x18, 0x05)
241C  00CE        AddEncounter(0x18, 0x06)
242E  00E0        RETURN

EMPTY:
2430  0000        <Empty Function>

EMPTY:
2435  0000        <Empty Function>

EMPTY:
243A  0000        <Empty Function>

EMPTY:
243F  0000        <Empty Function>

EMPTY:
2444  0000        <Empty Function>

EMPTY:
2449  0000        <Empty Function>

EMPTY:
244E  0000        <Empty Function>

EMPTY:
2453  0000        <Empty Function>

EMPTY:
2458  0000        <Empty Function>

EMPTY:
245D  0000        <Empty Function>

GATEMESA_3A:
2462  0000        BEGIN
2465  0003        ShowMessage(0x113F) = The gateway leads to THE RUNE ROOM.
2472  0010        RETURN

GATEMESB_3B:
2474  0000        BEGIN
2477  0003        ShowMessage(0x1163) = The gateway leads to THE MAUSOLEUM.
2484  0010        RETURN

STRSMESS_3C:
2486  0000        BEGIN
2489  0003        ShowMessage(0x1187) = Stairs past the south gateway lead down.
2496  0010        RETURN

TELEMESA_3D:
2498  0000        BEGIN
249B  0003        ShowMessage(0x11B0) = There is a teleport in the east wall.
24A8  0010        RETURN

TELEMESB_3E:
24AA  0000        BEGIN
24AD  0003        ShowMessage(0x11D6) = There is a teleport in the west wall.
24BA  0010        RETURN

EMPTY:
24BC  0000        <Empty Function>

EMPTY:
24C1  0000        <Empty Function>

EMPTY:
24C6  0000        <Empty Function>

EMPTY:
24CB  0000        <Empty Function>

EMPTY:
24D0  0000        <Empty Function>

EMPTY:
24D5  0000        <Empty Function>

EMPTY:
24DA  0000        <Empty Function>

EMPTY:
24DF  0000        <Empty Function>

EMPTY:
24E4  0000        <Empty Function>

EMPTY:
24E9  0000        <Empty Function>

EMPTY:
24EE  0000        <Empty Function>

EMPTY:
24F3  0000        <Empty Function>

EMPTY:
24F8  0000        <Empty Function>

EMPTY:
24FD  0000        <Empty Function>

EMPTY:
2502  0000        <Empty Function>

EMPTY:
2507  0000        <Empty Function>

EMPTY:
250C  0000        <Empty Function>

EMPTY:
2511  0000        <Empty Function>

EMPTY:
2516  0000        <Empty Function>

EMPTY:
251B  0000        <Empty Function>

EMPTY:
2520  0000        <Empty Function>

EMPTY:
2525  0000        <Empty Function>

EMPTY:
252A  0000        <Empty Function>

EMPTY:
252F  0000        <Empty Function>

EMPTY:
2534  0000        <Empty Function>

EMPTY:
2539  0000        <Empty Function>

EMPTY:
253E  0000        <Empty Function>

EMPTY:
2543  0000        <Empty Function>

EMPTY:
2548  0000        <Empty Function>

EMPTY:
254D  0000        <Empty Function>

EMPTY:
2552  0000        <Empty Function>

EMPTY:
2557  0000        <Empty Function>

EMPTY:
255C  0000        <Empty Function>

EMPTY:
2561  0000        <Empty Function>

EMPTY:
2566  0000        <Empty Function>

EMPTY:
256B  0000        <Empty Function>

EMPTY:
2570  0000        <Empty Function>

EMPTY:
2575  0000        <Empty Function>

EMPTY:
257A  0000        <Empty Function>

EMPTY:
257F  0000        <Empty Function>

EMPTY:
2584  0000        <Empty Function>

EMPTY:
2589  0000        <Empty Function>

EMPTY:
258E  0000        <Empty Function>

EMPTY:
2593  0000        <Empty Function>

EMPTY:
2598  0000        <Empty Function>

EMPTY:
259D  0000        <Empty Function>

EMPTY:
25A2  0000        <Empty Function>

EMPTY:
25A7  0000        <Empty Function>

EMPTY:
25AC  0000        <Empty Function>

EMPTY:
25B1  0000        <Empty Function>

EMPTY:
25B6  0000        <Empty Function>

EMPTY:
25BB  0000        <Empty Function>

EMPTY:
25C0  0000        <Empty Function>

EMPTY:
25C5  0000        <Empty Function>

EMPTY:
25CA  0000        <Empty Function>

EMPTY:
25CF  0000        <Empty Function>

EMPTY:
25D4  0000        <Empty Function>

EMPTY:
25D9  0000        <Empty Function>

EMPTY:
25DE  0000        <Empty Function>

EMPTY:
25E3  0000        <Empty Function>

EMPTY:
25E8  0000        <Empty Function>

EMPTY:
25ED  0000        <Empty Function>

EMPTY:
25F2  0000        <Empty Function>

EMPTY:
25F7  0000        <Empty Function>

EMPTY:
25FC  0000        <Empty Function>

EMPTY:
2601  0000        <Empty Function>

EMPTY:
2606  0000        <Empty Function>

EMPTY:
260B  0000        <Empty Function>

EMPTY:
2610  0000        <Empty Function>

EMPTY:
2615  0000        <Empty Function>

EMPTY:
261A  0000        <Empty Function>

EMPTY:
261F  0000        <Empty Function>

EMPTY:
2624  0000        <Empty Function>

EMPTY:
2629  0000        <Empty Function>

EMPTY:
262E  0000        <Empty Function>

EMPTY:
2633  0000        <Empty Function>

EMPTY:
2638  0000        <Empty Function>

EMPTY:
263D  0000        <Empty Function>

EMPTY:
2642  0000        <Empty Function>

EMPTY:
2647  0000        <Empty Function>

EMPTY:
264C  0000        <Empty Function>

EMPTY:
2651  0000        <Empty Function>

EMPTY:
2656  0000        <Empty Function>

EMPTY:
265B  0000        <Empty Function>

EMPTY:
2660  0000        <Empty Function>

EMPTY:
2665  0000        <Empty Function>

EMPTY:
266A  0000        <Empty Function>

EMPTY:
266F  0000        <Empty Function>

EMPTY:
2674  0000        <Empty Function>

EMPTY:
2679  0000        <Empty Function>

EMPTY:
267E  0000        <Empty Function>

EMPTY:
2683  0000        <Empty Function>

EMPTY:
2688  0000        <Empty Function>

EMPTY:
268D  0000        <Empty Function>

EMPTY:
2692  0000        <Empty Function>

EMPTY:
2697  0000        <Empty Function>

EMPTY:
269C  0000        <Empty Function>

EMPTY:
26A1  0000        <Empty Function>

EMPTY:
26A6  0000        <Empty Function>

EMPTY:
26AB  0000        <Empty Function>

EMPTY:
26B0  0000        <Empty Function>

EMPTY:
26B5  0000        <Empty Function>

EMPTY:
26BA  0000        <Empty Function>

EMPTY:
26BF  0000        <Empty Function>

EMPTY:
26C4  0000        <Empty Function>

EMPTY:
26C9  0000        <Empty Function>

EMPTY:
26CE  0000        <Empty Function>

EMPTY:
26D3  0000        <Empty Function>

EMPTY:
26D8  0000        <Empty Function>

EMPTY:
26DD  0000        <Empty Function>

EMPTY:
26E2  0000        <Empty Function>

EMPTY:
26E7  0000        <Empty Function>

EMPTY:
26EC  0000        <Empty Function>

EMPTY:
26F1  0000        <Empty Function>

EMPTY:
26F6  0000        <Empty Function>

EMPTY:
26FB  0000        <Empty Function>

EMPTY:
2700  0000        <Empty Function>

EMPTY:
2705  0000        <Empty Function>

EMPTY:
270A  0000        <Empty Function>

EMPTY:
270F  0000        <Empty Function>

EMPTY:
2714  0000        <Empty Function>

EMPTY:
2719  0000        <Empty Function>

EMPTY:
271E  0000        <Empty Function>

EMPTY:
2723  0000        <Empty Function>

EMPTY:
2728  0000        <Empty Function>

EMPTY:
272D  0000        <Empty Function>

EMPTY:
2732  0000        <Empty Function>

EMPTY:
2737  0000        <Empty Function>

EMPTY:
273C  0000        <Empty Function>

EMPTY:
2741  0000        <Empty Function>

EMPTY:
2746  0000        <Empty Function>

EMPTY:
274B  0000        <Empty Function>

EMPTY:
2750  0000        <Empty Function>

EMPTY:
2755  0000        <Empty Function>

EMPTY:
275A  0000        <Empty Function>

EMPTY:
275F  0000        <Empty Function>

EMPTY:
2764  0000        <Empty Function>

EMPTY:
2769  0000        <Empty Function>

EMPTY:
276E  0000        <Empty Function>

EMPTY:
2773  0000        <Empty Function>

EMPTY:
2778  0000        <Empty Function>

EMPTY:
277D  0000        <Empty Function>

EMPTY:
2782  0000        <Empty Function>

EMPTY:
2787  0000        <Empty Function>

EMPTY:
278C  0000        <Empty Function>

EMPTY:
2791  0000        <Empty Function>

EMPTY:
2796  0000        <Empty Function>

EMPTY:
279B  0000        <Empty Function>

EMPTY:
27A0  0000        <Empty Function>

EMPTY:
27A5  0000        <Empty Function>

EMPTY:
27AA  0000        <Empty Function>

EMPTY:
27AF  0000        <Empty Function>

EMPTY:
27B4  0000        <Empty Function>

EMPTY:
27B9  0000        <Empty Function>

EMPTY:
27BE  0000        <Empty Function>

EMPTY:
27C3  0000        <Empty Function>

EMPTY:
27C8  0000        <Empty Function>

EMPTY:
27CD  0000        <Empty Function>

EMPTY:
27D2  0000        <Empty Function>

EMPTY:
27D7  0000        <Empty Function>

EMPTY:
27DC  0000        <Empty Function>

EMPTY:
27E1  0000        <Empty Function>

EMPTY:
27E6  0000        <Empty Function>

EMPTY:
27EB  0000        <Empty Function>

EMPTY:
27F0  0000        <Empty Function>

EMPTY:
27F5  0000        <Empty Function>

EMPTY:
27FA  0000        <Empty Function>

EMPTY:
27FF  0000        <Empty Function>

EMPTY:
2804  0000        <Empty Function>

EMPTY:
2809  0000        <Empty Function>

EMPTY:
280E  0000        <Empty Function>

EMPTY:
2813  0000        <Empty Function>

EMPTY:
2818  0000        <Empty Function>

EMPTY:
281D  0000        <Empty Function>

EMPTY:
2822  0000        <Empty Function>

EMPTY:
2827  0000        <Empty Function>

EMPTY:
282C  0000        <Empty Function>

EMPTY:
2831  0000        <Empty Function>

EMPTY:
2836  0000        <Empty Function>

EMPTY:
283B  0000        <Empty Function>

EMPTY:
2840  0000        <Empty Function>

EMPTY:
2845  0000        <Empty Function>

EMPTY:
284A  0000        <Empty Function>

EMPTY:
284F  0000        <Empty Function>

EMPTY:
2854  0000        <Empty Function>

EMPTY:
2859  0000        <Empty Function>

EMPTY:
285E  0000        <Empty Function>

EMPTY:
2863  0000        <Empty Function>

EMPTY:
2868  0000        <Empty Function>

EMPTY:
286D  0000        <Empty Function>

EMPTY:
2872  0000        <Empty Function>

EMPTY:
2877  0000        <Empty Function>

EMPTY:
287C  0000        <Empty Function>

STRINGS:
03FC: The door opens.
040C: This door is locked.
0421: The door magically opens!
043B: This door will not open.
0454: That is indeed the King's Pass. You may continue. If you ever return, I'll need to see another pass.
04B9: None may pass. I am pledged to guard King Cleowyn's Apartments for eternity. Of course, if you had the King's Pass, I could let you through.
0546: Seek the Pass where Ranger and Troll are blessed.
0578: You have passed the Trial of Harmony. A great reward is yours, if you but look for it.
05CF: You have mastered our Challenge. Congratulations! Behold the door of Harmony. Only those pledged to Harmony should enter.
0649: You have passed the Trial of Chaos. A great reward is yours, if you but look for it.
069E: You have mastered our Challenge. Congratulations! Behold the door of Chaos. Only those pledged to Chaos should enter.
0714: The door is opened
0727: The door can be opened only by a Human or Thief.
0758: The lock of the door opens as you step forward.
0788: The door can be opened only by an Orc or Cleric.
07B9: The lock opens as you approach.
07D9: The door can be opened only by an Elf or Barbarian.
080D: The door unlocks when you test it.
0830: The door can be opened only by a Troll or Ranger.
0862: The door opens as you advance.
0881: The door can be opened only by a Dwarf or Knight.
08B3: The door is opened.
08C7: The door can be opened only by a Gnome or Wizard.
08F9: The door clicks open.
090F: The door can be opened only by a Halfling or by Cleowyn's Key.
094E: The lock opens for you.
0966: The door can be opened only by a Gremlin or by Cleowyn's Lockpick.
09A9: A warning is on the door -
09C4: 'Those honoring Harmony may safely enter.'
09EF: 'Woe to you who serve Chaos, if you dare cross the threshold.'
0A2E: A warning is on the door -
0A49: 'Those honoring Chaos may safely enter.'
0A72: 'Woe to you who serve Harmony, if you dare cross the threshold.'
0AB3: A sign is on the door -
0ACB: The way is clear for members of Chaos.
0AF2: Those not sworn to Chaos have been duly chastised.
0B25: A sign is on the door -
0B3D: The way is clear for members of Harmony.
0B66: Those not sworn to Harmony have been duly chastised.
0B9B: Rogues bar the way to Chaos.
0BB8: Rogues bar the way to Harmony.
0BD7: Blessed Human or Thief, you may continue the quest.
0C0B: The tapestry shows nothing of interest.
0C33: Blessed Orc or Cleric, you may continue the quest.
0C66: The tapestry shows a jumble of runes.
0C8C: Blessed Elf or Barbarian, you may continue the quest.
0CC2: The tapestry is blank.
0CD9: Blessed Troll or Ranger, you may continue the quest.
0D0E: The tapestry is blank.
0D25: Blessed Dwarf or Knight, you may continue the quest.
0D5A: It is too dark to read the inscription.
0D82: Blessed Gnome or Wizard, you may continue the quest.
0DB7: An inscription on the tapestry fades away as you draw near.
0DF3: Blessed Halfling! Blessed Key of Cleowyn! With either, the quest may continue.
0E42: The tapestry is empty.
0E59: Blessed Gremlin! Blessed Pick of Cleowyn! With either, the quest may continue.
0EA8: The tapestry once held a woven message.
0ED0: You found a secret door!
0EE9: Reptilian bodies rise from the shadows.
0F11: On the floor is a Chess Piece inscribed with the words - 'Property of Arnakkian Slowfoot.'
0F6C: You are challenged to combat.
0F8A: Ferocious enemies stop you.
0FA6: Elf Rangers await you.
0FBD: An Elf Ranger holds the King's Pass.
0FE2: Proud knights dispute your progress.
1007: Strong enemies bar your way.
1024: There is nothing of interest here.
1047: You see a lockpick on the floor.
1068: Gallants challenge you.
1080: The key opens the door.
1098: The door is locked and requires a special key.
10C7: Fierce opponents bar your way.
10E6: This area has been looted.
1101: You find 12000 Gold Pieces on the floor.
112A: Your way is blocked.
113F: The gateway leads to THE RUNE ROOM.
1163: The gateway leads to THE MAUSOLEUM.
1187: Stairs past the south gateway lead down.
11B0: There is a teleport in the east wall.
11D6: There is a teleport in the west wall.
