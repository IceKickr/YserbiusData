STRSTELE_01:
000E  0000        BEGIN
0011  0003        SetMoveMap(0x01, 0x1F, 0x02, 0x02)
002C  001E        RETURN

TOCORDOR_02:
002E  0000        BEGIN
0031  0003        SetMoveMap(0x02, 0x10, 0x03, 0x03)
004C  001E        RETURN

STRSTELE_03:
004E  0000        BEGIN
0051  0003        SetMoveMap(0x02, 0xD3, 0x03, 0x02)
006C  001E        RETURN

STRSTELE_04:
006E  0000        BEGIN
0071  0003        SetMoveMap(00, 0xC6, 0x04, 0x02)
008B  001D        RETURN

STRSTELE_05:
008D  0000        BEGIN
0090  0003        SetMoveMap(0x01, 0xDC, 0x05, 0x02)
00AB  001E        RETURN

NDORSWCH_06:
00AD  0000        BEGIN
00B0  0003        ShowMessage(0x03FC) = You see a switch on the wall and throw it. You hear the sound of locks opening.
00BD  0010        SetState00(0x01, 0x01, 0x01)
00D2  0025        SetState00(0x01, 0x02, 0x00)
00E6  0039        SetState00(0x01, 0x03, 0x00)
00FA  004D        SetState00(0x01, 0x04, 0x00)
010E  0061        SetMove2C(0x01, 0x01, 0x77)
0124  0077        SetMove28(0x01, 0x01, 0x77)
013A  008D        RETURN

EDORSWCH_07:
013C  0000        BEGIN
013F  0003        ShowMessage(0x044C) = You see a switch on the wall and throw it. You hear the sound of locks opening.
014C  0010        SetState00(0x01, 0x01, 0x00)
0160  0024        SetState00(0x01, 0x02, 0x00)
0174  0038        SetState00(0x01, 0x03, 0x01)
0189  004D        SetState00(0x01, 0x04, 0x00)
019D  0061        SetMove2C(0x01, 0x00, 0x77)
01B2  0076        SetMove28(0x01, 0x00, 0x77)
01C7  008B        RETURN

EDORSWCH_08:
01C9  0000        BEGIN
01CC  0003        ShowMessage(0x049C) = You see a switch on the wall and throw it. You hear the sound of locks opening.
01D9  0010        SetState00(0x01, 0x01, 0x00)
01ED  0024        SetState00(0x01, 0x02, 0x01)
0202  0039        SetState00(0x01, 0x03, 0x00)
0216  004D        SetState00(0x01, 0x04, 0x00)
022A  0061        SetMove2C(0x01, 0x03, 0x77)
0240  0077        SetMove28(0x01, 0x03, 0x77)
0256  008D        RETURN

WDORSWCH_09:
0258  0000        BEGIN
025B  0003        ShowMessage(0x04EC) = You see a switch on the wall and throw it. You hear the sound of locks opening.
0268  0010        SetState00(0x01, 0x01, 0x00)
027C  0024        SetState00(0x01, 0x02, 0x00)
0290  0038        SetState00(0x01, 0x03, 0x00)
02A4  004C        SetState00(0x01, 0x04, 0x01)
02B9  0061        SetMove2C(0x01, 0x02, 0x77)
02CF  0077        SetMove28(0x01, 0x02, 0x77)
02E5  008D        RETURN

NSWCHDOR_0A:
02E7  0000        BEGIN
02EA  0003        ax = CheckState04(0x01, 0x01)
02FB  0014        compare(ax, 0x0001)
02FE  0017        If (result.notequal) jump to 005C
0300  0019        ShowMessage(0x053C) = The door is unlocked.
030D  0026        Push(03)
0311  002A        ax = GetNextTile()
0318  0031        Push(ax)
0319  0032        Push(01)
031D  0036        SetUnblocked()
0327  0040        Push(01)
032B  0044        Push(03)
032F  0048        ax = GetNextTile()
0336  004F        Push(ax)
0337  0050        SetMove2C(stk[0], stk[1], stk[2])
0341  005A        Jump to 0082
0343  005C        ShowMessage(0x0552) = The door is sealed shut. There is no lock on the outside.
0350  0069        Push(00)
0353  006C        Push(03)
0357  0070        ax = GetNextTile()
035E  0077        Push(ax)
035F  0078        SetMove2C(stk[0], stk[1], stk[2])
0369  0082        RETURN

ESWCHDOR_0B:
036B  0000        BEGIN
036E  0003        ax = CheckState04(0x01, 0x03)
037F  0014        compare(ax, 0x0001)
0382  0017        If (result.notequal) jump to 005C
0384  0019        ShowMessage(0x058C) = The door is unlocked.
0391  0026        Push(02)
0395  002A        ax = GetNextTile()
039C  0031        Push(ax)
039D  0032        Push(01)
03A1  0036        SetUnblocked()
03AB  0040        Push(01)
03AF  0044        Push(02)
03B3  0048        ax = GetNextTile()
03BA  004F        Push(ax)
03BB  0050        SetMove2C(stk[0], stk[1], stk[2])
03C5  005A        Jump to 0082
03C7  005C        ShowMessage(0x05A2) = The door is sealed shut. There is no lock on the outside.
03D4  0069        Push(00)
03D7  006C        Push(02)
03DB  0070        ax = GetNextTile()
03E2  0077        Push(ax)
03E3  0078        SetMove2C(stk[0], stk[1], stk[2])
03ED  0082        RETURN

SSWCHDOR_0C:
03EF  0000        BEGIN
03F2  0003        ax = CheckState04(0x01, 0x02)
0403  0014        compare(ax, 0x0001)
0406  0017        If (result.notequal) jump to 005C
0408  0019        ShowMessage(0x05DC) = The door is unlocked.
0415  0026        Push(01)
0419  002A        ax = GetNextTile()
0420  0031        Push(ax)
0421  0032        Push(01)
0425  0036        SetUnblocked()
042F  0040        Push(01)
0433  0044        Push(01)
0437  0048        ax = GetNextTile()
043E  004F        Push(ax)
043F  0050        SetMove2C(stk[0], stk[1], stk[2])
0449  005A        Jump to 0082
044B  005C        ShowMessage(0x05F2) = The door is sealed shut. There is no lock on the outside.
0458  0069        Push(00)
045B  006C        Push(01)
045F  0070        ax = GetNextTile()
0466  0077        Push(ax)
0467  0078        SetMove2C(stk[0], stk[1], stk[2])
0471  0082        RETURN

WSWCHDOR_0D:
0473  0000        BEGIN
0476  0003        ax = CheckState04(0x01, 0x04)
0487  0014        compare(ax, 0x0001)
048A  0017        If (result.notequal) jump to 005A
048C  0019        ShowMessage(0x062C) = The door is unlocked.
0499  0026        Push(00)
049C  0029        ax = GetNextTile()
04A3  0030        Push(ax)
04A4  0031        Push(01)
04A8  0035        SetUnblocked()
04B2  003F        Push(01)
04B6  0043        Push(00)
04B9  0046        ax = GetNextTile()
04C0  004D        Push(ax)
04C1  004E        SetMove2C(stk[0], stk[1], stk[2])
04CB  0058        Jump to 007F
04CD  005A        ShowMessage(0x0642) = The door is sealed shut. There is no lock on the outside.
04DA  0067        Push(00)
04DD  006A        Push(00)
04E0  006D        ax = GetNextTile()
04E7  0074        Push(ax)
04E8  0075        SetMove2C(stk[0], stk[1], stk[2])
04F2  007F        RETURN

ALLSWDOR_0E:
04F4  0000        BEGIN
04F7  0003        ax = HasItem(0xDA)
0505  0011        If (result.notequal) jump to 0033
0507  0013        ax = HasItem(0xDB)
0515  0021        If (result.notequal) jump to 0033
0517  0023        ax = HasItem(0xDC)
0525  0031        If (result.equal) jump to 0076
0527  0033        ShowMessage(0x067C) = A door appears in the south wall.
0534  0040        Push(01)
0538  0044        ax = GetNextTile()
053F  004B        Push(ax)
0540  004C        Push(01)
0544  0050        SetUnblocked()
054E  005A        Push(01)
0552  005E        Push(01)
0556  0062        ax = GetNextTile()
055D  0069        Push(ax)
055E  006A        SetMove2C(stk[0], stk[1], stk[2])
0568  0074        Jump to 008F
056A  0076        Push(00)
056D  0079        Push(01)
0571  007D        ax = GetNextTile()
0578  0084        Push(ax)
0579  0085        SetMove2C(stk[0], stk[1], stk[2])
0583  008F        RETURN

WKEYENC_0F:
0585  0000        BEGIN
0588  0003        ax = HasItem(0xDA)
0596  0011        If (result.equal) jump to 0041
0598  0013        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0xBE)
05B7  0032        ShowMessage(0x069E) = Monsters attack you.
05C4  003F        Jump to 006E
05C6  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0xCF, 0xDA)
05E6  0061        ShowMessage(0x06B3) = A key dangles from a spider's mandible.
05F3  006E        ax = PartyCount()
05FB  0076        compare(ax, 0x0001)
05FE  0079        If (result.equal) jump to 0088
0600  007B        ax = PartyCount()
0608  0083        compare(ax, 0x0002)
060B  0086        If (result.notequal) jump to 00D2
060D  0088        AddEncounter(0x1C, 0x01)
061F  009A        AddEncounter(0x1C, 0x02)
0631  00AC        AddEncounter(0x19, 0x03)
0643  00BE        AddEncounter(0x19, 0x04)
0655  00D0        Jump to 013E
0657  00D2        AddEncounter(0x1A, 0x01)
0669  00E4        AddEncounter(0x1A, 0x02)
067B  00F6        AddEncounter(0x1C, 0x03)
068D  0108        AddEncounter(0x1C, 0x04)
069F  011A        AddEncounter(0x1A, 0x05)
06B1  012C        AddEncounter(0x1A, 0x06)
06C3  013E        RETURN

CKEYENC_10:
06C5  0000        BEGIN
06C8  0003        ax = HasItem(0xDB)
06D6  0011        If (result.equal) jump to 0041
06D8  0013        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0xB6)
06F7  0032        ShowMessage(0x06DB) = Silver Ogres spring a trap.
0704  003F        Jump to 006F
0706  0041        AddTreasure(0x05DC, 0x00, 0x00, 0xCC, 0xD1, 0xDB)
0727  0062        ShowMessage(0x06F7) = A Silver Ogre plays with an unusual key.
0734  006F        ax = PartyCount()
073C  0077        compare(ax, 0x0001)
073F  007A        If (result.equal) jump to 0089
0741  007C        ax = PartyCount()
0749  0084        compare(ax, 0x0002)
074C  0087        If (result.notequal) jump to 00AF
074E  0089        AddEncounter(0x21, 0x01)
0760  009B        AddEncounter(0x21, 0x02)
0772  00AD        Jump to 011B
0774  00AF        AddEncounter(0x23, 0x01)
0786  00C1        AddEncounter(0x23, 0x02)
0798  00D3        AddEncounter(0x24, 0x03)
07AA  00E5        AddEncounter(0x24, 0x04)
07BC  00F7        AddEncounter(0x22, 0x05)
07CE  0109        AddEncounter(0x22, 0x06)
07E0  011B        RETURN

EKEYENC_11:
07E2  0000        BEGIN
07E5  0003        ax = HasItem(0xDC)
07F3  0011        If (result.equal) jump to 0041
07F5  0013        AddTreasure(0x0320, 0x00, 0x00, 0x00, 0x00, 0xB6)
0814  0032        ShowMessage(0x0720) = Lizardites have made this room their home.
0821  003F        Jump to 006E
0823  0041        AddTreasure(0x07D0, 0x00, 0x00, 0x00, 0xB6, 0xDC)
0843  0061        ShowMessage(0x074B) = A Lizardite holds a key shaped like the rune sign for I.
0850  006E        ax = PartyCount()
0858  0076        compare(ax, 0x0001)
085B  0079        If (result.equal) jump to 0088
085D  007B        ax = PartyCount()
0865  0083        compare(ax, 0x0002)
0868  0086        If (result.notequal) jump to 00D2
086A  0088        AddEncounter(0x27, 0x01)
087C  009A        AddEncounter(0x27, 0x02)
088E  00AC        AddEncounter(0x28, 0x03)
08A0  00BE        AddEncounter(0x28, 0x04)
08B2  00D0        Jump to 013E
08B4  00D2        AddEncounter(0x28, 0x01)
08C6  00E4        AddEncounter(0x28, 0x02)
08D8  00F6        AddEncounter(0x27, 0x03)
08EA  0108        AddEncounter(0x27, 0x04)
08FC  011A        AddEncounter(0x28, 0x05)
090E  012C        AddEncounter(0x28, 0x06)
0920  013E        RETURN

RUNECLUE_12:
0922  0000        BEGIN
0925  0003        ShowMessage(0x0784) = The tapestry contains runes...
0932  0010        ShowRunes(0x07A3) = Take the Crown, Robe and Scepter to the Mausoleum of Cleowyn. Use them in the correct niches to open the true path to the king's tomb.
093F  001D        RETURN

CLUEB_13:
0941  0000        BEGIN
0944  0003        ShowMessage(0x082A) = There are runes on this tapestry...
0951  0010        ShowRunes(0x084E) = Go west, but not farthest west, and give the Crown when you can go no more. Go east, but not farthest east, and give the Robe when you can go no more. When Crown and Robe are given, continue to the door of the tomb. Give the Scepter there to be rewarded.
095E  001D        RETURN

TUFMNSTR_14:
0960  0000        BEGIN
0963  0003        ax = PartyCount()
096B  000B        compare(ax, 0x0001)
096E  000E        If (result.notequal) jump to 0037
0970  0010        AddEncounter(0x1D, 0x01)
0982  0022        AddEncounter(0x1F, 0x02)
0994  0034        Jump to 0176
0997  0037        ax = PartyCount()
099F  003F        compare(ax, 0x0002)
09A2  0042        If (result.notequal) jump to 00A1
09A4  0044        AddEncounter(0x1E, 0x01)
09B6  0056        AddEncounter(0x1E, 0x02)
09C8  0068        AddEncounter(0x1F, 0x03)
09DA  007A        AddEncounter(0x1F, 0x04)
09EC  008C        AddEncounter(0x20, 0x05)
09FE  009E        Jump to 0176
0A01  00A1        ax = PartyCount()
0A09  00A9        compare(ax, 0x0003)
0A0C  00AC        If (result.notequal) jump to 010A
0A0E  00AE        AddEncounter(0x1F, 0x01)
0A20  00C0        AddEncounter(0x20, 0x02)
0A32  00D2        AddEncounter(0x1F, 0x03)
0A44  00E4        AddEncounter(0x20, 0x04)
0A56  00F6        AddEncounter(0x1E, 0x05)
0A68  0108        Jump to 0176
0A6A  010A        AddEncounter(0x20, 0x01)
0A7C  011C        AddEncounter(0x20, 0x02)
0A8E  012E        AddEncounter(0x1F, 0x03)
0AA0  0140        AddEncounter(0x1F, 0x04)
0AB2  0152        AddEncounter(0x1F, 0x05)
0AC4  0164        AddEncounter(0x1F, 0x06)
0AD6  0176        RETURN

EMPTY:
0AD8  0000        <Empty Function>

EMPTY:
0ADD  0000        <Empty Function>

GOLDAENC_17:
0AE2  0000        BEGIN
0AE5  0003        ax = CheckState04(0x02, 0x1F)
0AF6  0014        compare(ax, 0x0001)
0AF9  0017        If (result.notequal) jump to 0048
0AFB  0019        AddTreasure(0x0384, 0x00, 0x00, 0x00, 0xB6, 0xD0)
0B1B  0039        ShowMessage(0x094D) = You encounter Bugbears.
0B28  0046        Jump to 0089
0B2A  0048        AddTreasure(0x0E10, 0x00, 0x00, 0x00, 0x00, 0xB7)
0B49  0067        SetState00(0x02, 0x1F, 0x01)
0B5E  007C        ShowMessage(0x0965) = Bugbears stand near some gold.
0B6B  0089        ax = PartyCount()
0B73  0091        compare(ax, 0x0001)
0B76  0094        If (result.notequal) jump to 00AB
0B78  0096        AddEncounter(0x01, 0x01)
0B8A  00A8        Jump to 016C
0B8D  00AB        ax = PartyCount()
0B95  00B3        compare(ax, 0x0002)
0B98  00B6        If (result.notequal) jump to 00DF
0B9A  00B8        AddEncounter(0x01, 0x01)
0BAC  00CA        AddEncounter(0x02, 0x02)
0BBE  00DC        Jump to 016C
0BC1  00DF        ax = PartyCount()
0BC9  00E7        compare(ax, 0x0003)
0BCC  00EA        If (result.notequal) jump to 0124
0BCE  00EC        AddEncounter(0x01, 0x01)
0BE0  00FE        AddEncounter(0x02, 0x02)
0BF2  0110        AddEncounter(0x03, 0x03)
0C04  0122        Jump to 016C
0C06  0124        AddEncounter(0x02, 0x01)
0C18  0136        AddEncounter(0x03, 0x02)
0C2A  0148        AddEncounter(0x03, 0x03)
0C3C  015A        AddEncounter(0x02, 0x04)
0C4E  016C        RETURN

GOLDBENC_18:
0C50  0000        BEGIN
0C53  0003        ax = CheckState04(0x02, 0x20)
0C64  0014        compare(ax, 0x0001)
0C67  0017        If (result.notequal) jump to 0047
0C69  0019        AddTreasure(0x0320, 0x00, 0x00, 0x00, 0x00, 0xB7)
0C88  0038        ShowMessage(0x0984) = Dire Wolves scratch the floor impatiently.
0C95  0045        Jump to 0088
0C97  0047        AddTreasure(0x0FA0, 0x00, 0x00, 0x00, 0x00, 0x8E)
0CB6  0066        SetState00(0x02, 0x20, 0x01)
0CCB  007B        ShowMessage(0x09AF) = A Dire Wolf plays with a coin purse.
0CD8  0088        ax = PartyCount()
0CE0  0090        compare(ax, 0x0001)
0CE3  0093        If (result.equal) jump to 00A2
0CE5  0095        ax = PartyCount()
0CED  009D        compare(ax, 0x0002)
0CF0  00A0        If (result.notequal) jump to 00C8
0CF2  00A2        AddEncounter(0x0E, 0x01)
0D04  00B4        AddEncounter(0x0E, 0x02)
0D16  00C6        Jump to 0110
0D18  00C8        AddEncounter(0x10, 0x01)
0D2A  00DA        AddEncounter(0x10, 0x02)
0D3C  00EC        AddEncounter(0x0E, 0x03)
0D4E  00FE        AddEncounter(0x0F, 0x04)
0D60  0110        RETURN

GOLDCENC_19:
0D62  0000        BEGIN
0D65  0003        ax = CheckState04(0x02, 0x21)
0D76  0014        compare(ax, 0x0001)
0D79  0017        If (result.notequal) jump to 0047
0D7B  0019        AddTreasure(0x02EE, 0x00, 0x00, 0x00, 0x00, 0xD1)
0D9A  0038        ShowMessage(0x09D4) = You suddenly feel nervous.
0DA7  0045        Jump to 0088
0DA9  0047        AddTreasure(0x157C, 0x00, 0x00, 0x00, 0x00, 0xCC)
0DC8  0066        SetState00(0x02, 0x21, 0x01)
0DDD  007B        ShowMessage(0x09EF) = Hungry lions prowl the area.
0DEA  0088        ax = PartyCount()
0DF2  0090        compare(ax, 0x0001)
0DF5  0093        If (result.equal) jump to 00A2
0DF7  0095        ax = PartyCount()
0DFF  009D        compare(ax, 0x0002)
0E02  00A0        If (result.notequal) jump to 00C9
0E04  00A2        AddEncounter(0x13, 0x01)
0E16  00B4        AddEncounter(0x14, 0x02)
0E28  00C6        Jump to 0156
0E2B  00C9        ax = PartyCount()
0E33  00D1        compare(ax, 0x0003)
0E36  00D4        If (result.notequal) jump to 010E
0E38  00D6        AddEncounter(0x14, 0x01)
0E4A  00E8        AddEncounter(0x14, 0x02)
0E5C  00FA        AddEncounter(0x15, 0x03)
0E6E  010C        Jump to 0156
0E70  010E        AddEncounter(0x15, 0x01)
0E82  0120        AddEncounter(0x15, 0x02)
0E94  0132        AddEncounter(0x16, 0x03)
0EA6  0144        AddEncounter(0x16, 0x04)
0EB8  0156        RETURN

ITEMCENC_1A:
0EBA  0000        BEGIN
0EBD  0003        ax = HasItem(0xC6)
0ECB  0011        If (result.equal) jump to 0041
0ECD  0013        AddTreasure(0x00FA, 0x00, 0x00, 0x00, 0x00, 0xCD)
0EEC  0032        ShowMessage(0x0A0C) = The floor crawls with Leeches.
0EF9  003F        Jump to 006D
0EFB  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0xC6)
0F1A  0060        ShowMessage(0x0A2B) = Leeches swarm over a magic wand.
0F27  006D        ax = PartyCount()
0F2F  0075        compare(ax, 0x0001)
0F32  0078        If (result.notequal) jump to 00A1
0F34  007A        AddEncounter(0x1B, 0x01)
0F46  008C        AddEncounter(0x1B, 0x02)
0F58  009E        Jump to 0164
0F5B  00A1        ax = PartyCount()
0F63  00A9        compare(ax, 0x0002)
0F66  00AC        If (result.notequal) jump to 00F8
0F68  00AE        AddEncounter(0x1C, 0x01)
0F7A  00C0        AddEncounter(0x1C, 0x02)
0F8C  00D2        AddEncounter(0x1B, 0x03)
0F9E  00E4        AddEncounter(0x1B, 0x04)
0FB0  00F6        Jump to 0164
0FB2  00F8        AddEncounter(0x16, 0x01)
0FC4  010A        AddEncounter(0x16, 0x02)
0FD6  011C        AddEncounter(0x1C, 0x03)
0FE8  012E        AddEncounter(0x1C, 0x04)
0FFA  0140        AddEncounter(0x1B, 0x05)
100C  0152        AddEncounter(0x1B, 0x06)
101E  0164        RETURN

ITEMBENC_1B:
1020  0000        BEGIN
1023  0003        ax = HasItem(0x96)
1031  0011        If (result.equal) jump to 0040
1033  0013        AddTreasure(0x0000, 0x00, 0x00, 0x00, 0x00, 0xCF)
1051  0031        ShowMessage(0x0A4C) = Giants interrupt your search.
105E  003E        Jump to 006B
1060  0040        AddTreasure(0x0000, 0x00, 0x00, 0x00, 0x00, 0x96)
107E  005E        ShowMessage(0x0A6A) = A Giant wears a medallion around his neck.
108B  006B        ax = PartyCount()
1093  0073        compare(ax, 0x0001)
1096  0076        If (result.notequal) jump to 008D
1098  0078        AddEncounter(0x25, 0x01)
10AA  008A        Jump to 013E
10AD  008D        ax = PartyCount()
10B5  0095        compare(ax, 0x0002)
10B8  0098        If (result.notequal) jump to 00D2
10BA  009A        AddEncounter(0x25, 0x01)
10CC  00AC        AddEncounter(0x26, 0x02)
10DE  00BE        AddEncounter(0x25, 0x03)
10F0  00D0        Jump to 013E
10F2  00D2        AddEncounter(0x25, 0x01)
1104  00E4        AddEncounter(0x25, 0x02)
1116  00F6        AddEncounter(0x26, 0x03)
1128  0108        AddEncounter(0x26, 0x04)
113A  011A        AddEncounter(0x25, 0x05)
114C  012C        AddEncounter(0x26, 0x06)
115E  013E        RETURN

ITEMCENC_1C:
1160  0000        BEGIN
1163  0003        ax = HasItem(0xD1)
1171  0011        If (result.equal) jump to 0041
1173  0013        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xB5)
1192  0032        ShowMessage(0x0A95) = You disturb a nest of Cockatrices.
119F  003F        Jump to 006D
11A1  0041        AddTreasure(0x05DC, 0x00, 0x00, 0x00, 0x00, 0xD1)
11C0  0060        ShowMessage(0x0AB8) = You see a vial in a Cockatrice nest.
11CD  006D        ax = PartyCount()
11D5  0075        compare(ax, 0x0001)
11D8  0078        If (result.equal) jump to 0087
11DA  007A        ax = PartyCount()
11E2  0082        compare(ax, 0x0002)
11E5  0085        If (result.notequal) jump to 00AD
11E7  0087        AddEncounter(0x08, 0x01)
11F9  0099        AddEncounter(0x07, 0x02)
120B  00AB        Jump to 00F5
120D  00AD        AddEncounter(0x09, 0x01)
121F  00BF        AddEncounter(0x09, 0x02)
1231  00D1        AddEncounter(0x0C, 0x05)
1243  00E3        AddEncounter(0x0A, 0x06)
1255  00F5        RETURN

WEAPAENC_1D:
1257  0000        BEGIN
125A  0003        ax = HasItem(0x2A)
1268  0011        If (result.equal) jump to 0041
126A  0013        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xBD)
1289  0032        ShowMessage(0x0ADD) = Silver Ogres suddenly appear around you.
1296  003F        Jump to 006D
1298  0041        AddTreasure(0x07D0, 0x00, 0x00, 0x00, 0x00, 0x2A)
12B7  0060        ShowMessage(0x0B06) = The lead Silver Ogre wields a powerful morningstar.
12C4  006D        ax = PartyCount()
12CC  0075        compare(ax, 0x0001)
12CF  0078        If (result.equal) jump to 0087
12D1  007A        ax = PartyCount()
12D9  0082        compare(ax, 0x0002)
12DC  0085        If (result.notequal) jump to 00AE
12DE  0087        AddEncounter(0x21, 0x01)
12F0  0099        AddEncounter(0x22, 0x02)
1302  00AB        Jump to 013B
1305  00AE        ax = PartyCount()
130D  00B6        compare(ax, 0x0003)
1310  00B9        If (result.notequal) jump to 00F3
1312  00BB        AddEncounter(0x21, 0x01)
1324  00CD        AddEncounter(0x22, 0x02)
1336  00DF        AddEncounter(0x23, 0x03)
1348  00F1        Jump to 013B
134A  00F3        AddEncounter(0x21, 0x01)
135C  0105        AddEncounter(0x22, 0x02)
136E  0117        AddEncounter(0x23, 0x03)
1380  0129        AddEncounter(0x24, 0x04)
1392  013B        RETURN

WEAPBENC_1E:
1394  0000        BEGIN
1397  0003        ax = HasItem(0x10)
13A5  0011        If (result.equal) jump to 0041
13A7  0013        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xCE)
13C6  0032        ShowMessage(0x0B3A) = You disturb some sleeping Giants.
13D3  003F        Jump to 006D
13D5  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x10)
13F4  0060        ShowMessage(0x0B5C) = A gleaming sword lies on the floor between you and a group of Giants.
1401  006D        ax = PartyCount()
1409  0075        compare(ax, 0x0001)
140C  0078        If (result.notequal) jump to 008F
140E  007A        AddEncounter(0x25, 0x01)
1420  008C        Jump to 012E
1423  008F        ax = PartyCount()
142B  0097        compare(ax, 0x0002)
142E  009A        If (result.notequal) jump to 00D4
1430  009C        AddEncounter(0x25, 0x01)
1442  00AE        AddEncounter(0x26, 0x02)
1454  00C0        AddEncounter(0x21, 0x04)
1466  00D2        Jump to 012E
1468  00D4        AddEncounter(0x25, 0x01)
147A  00E6        AddEncounter(0x25, 0x02)
148C  00F8        AddEncounter(0x26, 0x03)
149E  010A        AddEncounter(0x26, 0x04)
14B0  011C        AddEncounter(0x25, 0x05)
14C2  012E        RETURN

ARMRAENC_1F:
14C4  0000        BEGIN
14C7  0003        ax = HasItem(0x67)
14D5  0011        If (result.equal) jump to 0041
14D7  0013        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0x00, 0xD0)
14F6  0032        ShowMessage(0x0BA2) = Dark shadows coalesce into Bugbears.
1503  003F        Jump to 006D
1505  0041        AddTreasure(0x07D0, 0x00, 0x00, 0x00, 0x00, 0x67)
1524  0060        ShowMessage(0x0BC7) = A Bugbear guards some chainmail.
1531  006D        ax = PartyCount()
1539  0075        compare(ax, 0x0001)
153C  0078        If (result.notequal) jump to 00A1
153E  007A        AddEncounter(0x01, 0x01)
1550  008C        AddEncounter(0x01, 0x02)
1562  009E        Jump to 0164
1565  00A1        ax = PartyCount()
156D  00A9        compare(ax, 0x0002)
1570  00AC        If (result.notequal) jump to 00F8
1572  00AE        AddEncounter(0x02, 0x01)
1584  00C0        AddEncounter(0x02, 0x02)
1596  00D2        AddEncounter(0x03, 0x03)
15A8  00E4        AddEncounter(0x03, 0x04)
15BA  00F6        Jump to 0164
15BC  00F8        AddEncounter(0x02, 0x01)
15CE  010A        AddEncounter(0x03, 0x02)
15E0  011C        AddEncounter(0x03, 0x03)
15F2  012E        AddEncounter(0x02, 0x04)
1604  0140        AddEncounter(0x04, 0x05)
1616  0152        AddEncounter(0x05, 0x06)
1628  0164        RETURN

ARMRBENC_20:
162A  0000        BEGIN
162D  0003        ax = HasItem(0x7E)
163B  0011        If (result.equal) jump to 0042
163D  0013        AddTreasure(0x0320, 0x00, 0x00, 0x00, 0xCF, 0xCD)
165D  0033        ShowMessage(0x0BE8) = You enter a roosting area for Cockatrices.
166A  0040        Jump to 006E
166C  0042        AddTreasure(0x0BB8, 0x00, 0x00, 0x00, 0x00, 0x7E)
168B  0061        ShowMessage(0x0C13) = In a Cockatrice nest you see luminous chainmail.
1698  006E        ax = PartyCount()
16A0  0076        compare(ax, 0x0001)
16A3  0079        If (result.equal) jump to 0088
16A5  007B        ax = PartyCount()
16AD  0083        compare(ax, 0x0002)
16B0  0086        If (result.notequal) jump to 00AF
16B2  0088        AddEncounter(0x08, 0x01)
16C4  009A        AddEncounter(0x07, 0x02)
16D6  00AC        Jump to 013C
16D9  00AF        ax = PartyCount()
16E1  00B7        compare(ax, 0x0003)
16E4  00BA        If (result.notequal) jump to 00F4
16E6  00BC        AddEncounter(0x07, 0x01)
16F8  00CE        AddEncounter(0x08, 0x02)
170A  00E0        AddEncounter(0x09, 0x05)
171C  00F2        Jump to 013C
171E  00F4        AddEncounter(0x08, 0x01)
1730  0106        AddEncounter(0x09, 0x02)
1742  0118        AddEncounter(0x0A, 0x05)
1754  012A        AddEncounter(0x0A, 0x06)
1766  013C        RETURN

SHLDAENC_21:
1768  0000        BEGIN
176B  0003        ax = HasItem(0x59)
1779  0011        If (result.equal) jump to 0041
177B  0013        AddTreasure(0x0064, 0x00, 0x00, 0x00, 0x00, 0xC0)
179A  0032        ShowMessage(0x0C44) = Dire Wolves encircle you.
17A7  003F        Jump to 006D
17A9  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0x59)
17C8  0060        ShowMessage(0x0C5E) = Dire Wolves seem fascinated by a shiny shield.
17D5  006D        ax = PartyCount()
17DD  0075        compare(ax, 0x0001)
17E0  0078        If (result.equal) jump to 0087
17E2  007A        ax = PartyCount()
17EA  0082        compare(ax, 0x0002)
17ED  0085        If (result.notequal) jump to 00BF
17EF  0087        AddEncounter(0x0E, 0x01)
1801  0099        AddEncounter(0x0D, 0x02)
1813  00AB        AddEncounter(0x0F, 0x03)
1825  00BD        Jump to 0119
1827  00BF        AddEncounter(0x0F, 0x01)
1839  00D1        AddEncounter(0x10, 0x02)
184B  00E3        AddEncounter(0x10, 0x03)
185D  00F5        AddEncounter(0x0F, 0x04)
186F  0107        AddEncounter(0x11, 0x05)
1881  0119        RETURN

SLDBENC_22:
1883  0000        BEGIN
1886  0003        ax = HasItem(0x81)
1894  0011        If (result.equal) jump to 0041
1896  0013        AddTreasure(0x00C8, 0x00, 0x00, 0x00, 0x00, 0xC5)
18B5  0032        ShowMessage(0x0C8D) = Loud hisses alert you to danger.
18C2  003F        Jump to 006D
18C4  0041        AddTreasure(0x0384, 0x00, 0x00, 0x00, 0x00, 0x81)
18E3  0060        ShowMessage(0x0CAE) = Lizardites move between you and a piece of armor on the floor.
18F0  006D        ax = PartyCount()
18F8  0075        compare(ax, 0x0001)
18FB  0078        If (result.equal) jump to 0087
18FD  007A        ax = PartyCount()
1905  0082        compare(ax, 0x0002)
1908  0085        If (result.notequal) jump to 00AD
190A  0087        AddEncounter(0x27, 0x01)
191C  0099        AddEncounter(0x28, 0x02)
192E  00AB        Jump to 00F5
1930  00AD        AddEncounter(0x27, 0x01)
1942  00BF        AddEncounter(0x27, 0x02)
1954  00D1        AddEncounter(0x28, 0x03)
1966  00E3        AddEncounter(0x28, 0x04)
1978  00F5        RETURN

KINGDOOR_23:
197A  0000        BEGIN
197D  0003        ax = HasItem(0xF8)
198B  0011        If (result.equal) jump to 005E
198D  0013        ShowMessage(0x0CED) = The door is unlocked.
199A  0020        ax = GetFacing()
19A1  0027        Push(ax)
19A2  0028        ax = GetNextTile()
19A9  002F        Push(ax)
19AA  0030        Push(01)
19AE  0034        SetUnblocked()
19B8  003E        Push(01)
19BC  0042        ax = GetFacing()
19C3  0049        Push(ax)
19C4  004A        ax = GetNextTile()
19CB  0051        Push(ax)
19CC  0052        SetMove2C(stk[0], stk[1], stk[2])
19D6  005C        Jump to 0088
19D8  005E        Push(00)
19DB  0061        ax = GetFacing()
19E2  0068        Push(ax)
19E3  0069        ax = GetNextTile()
19EA  0070        Push(ax)
19EB  0071        SetMove2C(stk[0], stk[1], stk[2])
19F5  007B        ShowMessage(0x0D03) = The door is sealed shut. You see what appears to be the bas relief of a royal ring 
1A02  0088        RETURN

STRGATEM_24:
1A04  0000        BEGIN
1A07  0003        ShowMessage(0x0D57) = The stairs through the north gateway lead up. The gateway to the east leads to THE GREAT CORRIDOR.
1A14  0010        RETURN

STRSMESS_25:
1A16  0000        BEGIN
1A19  0003        ShowMessage(0x0DBA) = The stairs past the south gateway lead up a level.
1A26  0010        RETURN

STRSMESS_26:
1A28  0000        BEGIN
1A2B  0003        ShowMessage(0x0DED) = There are stairs through the the north gateway.
1A38  0010        RETURN

STRSMESS_27:
1A3A  0000        BEGIN
1A3D  0003        ShowMessage(0x0E1D) = There are stairs beyond the west gateway.
1A4A  0010        RETURN

EMPTY:
1A4C  0000        <Empty Function>

NPCCHATA_29:
1A51  0000        BEGIN
1A54  0003        ShowMessage(0x0E47) = You encounter a Human Barbarian.
1A61  0010        ShowPortrait(0x0016)
1A6E  001D        ax = UnknownFunctionEC(0x000F)
1A7B  002A        compare(ax, 0x000C)
1A7E  002D        If (result.unsigned_greater_than) jump to 004B
1A80  002F        ShowMessage(0x0E68) = The opening and closing of secret doors in this area give me a headache. I simply cannot puzzle out the correct sequence of opening the doors. I wish my map of this area were more complete.
1A8D  003C        ShowMessage(0x0F26) = By the way, if you don't have the king's ring, you won't get anywhere in this crazy place.
1A9A  0049        Jump to 0058
1A9C  004B        ShowMessage(0x0F81) = The Human Barbarian pays you no attention as he puzzles over a map.
1AA9  0058        RETURN

NPCCHATB_2A:
1AAB  0000        BEGIN
1AAE  0003        ShowMessage(0x0FC5) = You encounter a Gnome Wizard.
1ABB  0010        ShowPortrait(0x002D)
1AC8  001D        ax = UnknownFunctionEC(0x000F)
1AD5  002A        compare(ax, 0x000A)
1AD8  002D        If (result.unsigned_greater_than) jump to 003E
1ADA  002F        ShowMessage(0x0FE3) = Once you find a key in this area, seek the hidden door and follow your destiny. The door appears only when you have the right key. Where it leads I do not know.
1AE7  003C        Jump to 004B
1AE9  003E        ShowMessage(0x1084) = The Gnome Wizard is too intent on drawing runes in the dust to talk to you.
1AF6  004B        RETURN

NPCCHATC_2B:
1AF8  0000        BEGIN
1AFB  0003        ShowMessage(0x10D0) = You encounter an Orc Knight.
1B08  0010        ShowPortrait(0x001A)
1B15  001D        ax = UnknownFunctionEC(0x000F)
1B22  002A        compare(ax, 0x0009)
1B25  002D        If (result.unsigned_greater_than) jump to 003E
1B27  002F        ShowMessage(0x10ED) = There are many ways into King Cleowyn's Mausoleum, but few are rewarding. The most direct ways are the most challenging. Do not continue unless you have what the king demands.
1B34  003C        Jump to 004B
1B36  003E        ShowMessage(0x119D) = The Orc Knight dismisses you as low-level buffoons.
1B43  004B        RETURN

NPCCHATD_2C:
1B45  0000        BEGIN
1B48  0003        ShowMessage(0x11D1) = You encounter a Halfling Thief.
1B55  0010        ShowPortrait(0x0025)
1B62  001D        ax = UnknownFunctionEC(0x000F)
1B6F  002A        compare(ax, 0x0008)
1B72  002D        If (result.unsigned_greater_than) jump to 003E
1B74  002F        ShowMessage(0x11F1) = Beneath the king's living quarters is an area known as the Thieves' Maze. Only an experienced thief - or a hero who has a thief's skills - will pick his way through this intricate maze.
1B81  003C        Jump to 005D
1B83  003E        ShowMessage(0x12AB) = The Halfling Thief steals some gold and runs away.
1B90  004B        ModifyGold(0xFFFFCEBA)
1BA2  005D        RETURN

EMPTY:
1BA4  0000        <Empty Function>

EMPTY:
1BA9  0000        <Empty Function>

EMPTY:
1BAE  0000        <Empty Function>

EMPTY:
1BB3  0000        <Empty Function>

EMPTY:
1BB8  0000        <Empty Function>

EMPTY:
1BBD  0000        <Empty Function>

EMPTY:
1BC2  0000        <Empty Function>

EMPTY:
1BC7  0000        <Empty Function>

EMPTY:
1BCC  0000        <Empty Function>

EMPTY:
1BD1  0000        <Empty Function>

EMPTY:
1BD6  0000        <Empty Function>

EMPTY:
1BDB  0000        <Empty Function>

EMPTY:
1BE0  0000        <Empty Function>

EMPTY:
1BE5  0000        <Empty Function>

EMPTY:
1BEA  0000        <Empty Function>

EMPTY:
1BEF  0000        <Empty Function>

EMPTY:
1BF4  0000        <Empty Function>

EMPTY:
1BF9  0000        <Empty Function>

EMPTY:
1BFE  0000        <Empty Function>

EMPTY:
1C03  0000        <Empty Function>

EMPTY:
1C08  0000        <Empty Function>

EMPTY:
1C0D  0000        <Empty Function>

EMPTY:
1C12  0000        <Empty Function>

EMPTY:
1C17  0000        <Empty Function>

EMPTY:
1C1C  0000        <Empty Function>

EMPTY:
1C21  0000        <Empty Function>

EMPTY:
1C26  0000        <Empty Function>

EMPTY:
1C2B  0000        <Empty Function>

EMPTY:
1C30  0000        <Empty Function>

EMPTY:
1C35  0000        <Empty Function>

EMPTY:
1C3A  0000        <Empty Function>

EMPTY:
1C3F  0000        <Empty Function>

EMPTY:
1C44  0000        <Empty Function>

EMPTY:
1C49  0000        <Empty Function>

EMPTY:
1C4E  0000        <Empty Function>

EMPTY:
1C53  0000        <Empty Function>

EMPTY:
1C58  0000        <Empty Function>

EMPTY:
1C5D  0000        <Empty Function>

EMPTY:
1C62  0000        <Empty Function>

EMPTY:
1C67  0000        <Empty Function>

EMPTY:
1C6C  0000        <Empty Function>

EMPTY:
1C71  0000        <Empty Function>

EMPTY:
1C76  0000        <Empty Function>

EMPTY:
1C7B  0000        <Empty Function>

EMPTY:
1C80  0000        <Empty Function>

EMPTY:
1C85  0000        <Empty Function>

EMPTY:
1C8A  0000        <Empty Function>

EMPTY:
1C8F  0000        <Empty Function>

EMPTY:
1C94  0000        <Empty Function>

EMPTY:
1C99  0000        <Empty Function>

EMPTY:
1C9E  0000        <Empty Function>

EMPTY:
1CA3  0000        <Empty Function>

EMPTY:
1CA8  0000        <Empty Function>

EMPTY:
1CAD  0000        <Empty Function>

EMPTY:
1CB2  0000        <Empty Function>

EMPTY:
1CB7  0000        <Empty Function>

EMPTY:
1CBC  0000        <Empty Function>

EMPTY:
1CC1  0000        <Empty Function>

EMPTY:
1CC6  0000        <Empty Function>

EMPTY:
1CCB  0000        <Empty Function>

EMPTY:
1CD0  0000        <Empty Function>

EMPTY:
1CD5  0000        <Empty Function>

EMPTY:
1CDA  0000        <Empty Function>

EMPTY:
1CDF  0000        <Empty Function>

EMPTY:
1CE4  0000        <Empty Function>

EMPTY:
1CE9  0000        <Empty Function>

EMPTY:
1CEE  0000        <Empty Function>

EMPTY:
1CF3  0000        <Empty Function>

EMPTY:
1CF8  0000        <Empty Function>

EMPTY:
1CFD  0000        <Empty Function>

EMPTY:
1D02  0000        <Empty Function>

EMPTY:
1D07  0000        <Empty Function>

EMPTY:
1D0C  0000        <Empty Function>

EMPTY:
1D11  0000        <Empty Function>

EMPTY:
1D16  0000        <Empty Function>

EMPTY:
1D1B  0000        <Empty Function>

EMPTY:
1D20  0000        <Empty Function>

EMPTY:
1D25  0000        <Empty Function>

EMPTY:
1D2A  0000        <Empty Function>

EMPTY:
1D2F  0000        <Empty Function>

EMPTY:
1D34  0000        <Empty Function>

EMPTY:
1D39  0000        <Empty Function>

EMPTY:
1D3E  0000        <Empty Function>

EMPTY:
1D43  0000        <Empty Function>

EMPTY:
1D48  0000        <Empty Function>

EMPTY:
1D4D  0000        <Empty Function>

EMPTY:
1D52  0000        <Empty Function>

EMPTY:
1D57  0000        <Empty Function>

EMPTY:
1D5C  0000        <Empty Function>

EMPTY:
1D61  0000        <Empty Function>

EMPTY:
1D66  0000        <Empty Function>

EMPTY:
1D6B  0000        <Empty Function>

EMPTY:
1D70  0000        <Empty Function>

EMPTY:
1D75  0000        <Empty Function>

EMPTY:
1D7A  0000        <Empty Function>

EMPTY:
1D7F  0000        <Empty Function>

EMPTY:
1D84  0000        <Empty Function>

EMPTY:
1D89  0000        <Empty Function>

EMPTY:
1D8E  0000        <Empty Function>

EMPTY:
1D93  0000        <Empty Function>

EMPTY:
1D98  0000        <Empty Function>

EMPTY:
1D9D  0000        <Empty Function>

EMPTY:
1DA2  0000        <Empty Function>

EMPTY:
1DA7  0000        <Empty Function>

EMPTY:
1DAC  0000        <Empty Function>

EMPTY:
1DB1  0000        <Empty Function>

EMPTY:
1DB6  0000        <Empty Function>

EMPTY:
1DBB  0000        <Empty Function>

EMPTY:
1DC0  0000        <Empty Function>

EMPTY:
1DC5  0000        <Empty Function>

EMPTY:
1DCA  0000        <Empty Function>

EMPTY:
1DCF  0000        <Empty Function>

EMPTY:
1DD4  0000        <Empty Function>

EMPTY:
1DD9  0000        <Empty Function>

EMPTY:
1DDE  0000        <Empty Function>

EMPTY:
1DE3  0000        <Empty Function>

EMPTY:
1DE8  0000        <Empty Function>

EMPTY:
1DED  0000        <Empty Function>

EMPTY:
1DF2  0000        <Empty Function>

EMPTY:
1DF7  0000        <Empty Function>

EMPTY:
1DFC  0000        <Empty Function>

EMPTY:
1E01  0000        <Empty Function>

EMPTY:
1E06  0000        <Empty Function>

EMPTY:
1E0B  0000        <Empty Function>

EMPTY:
1E10  0000        <Empty Function>

EMPTY:
1E15  0000        <Empty Function>

EMPTY:
1E1A  0000        <Empty Function>

EMPTY:
1E1F  0000        <Empty Function>

EMPTY:
1E24  0000        <Empty Function>

EMPTY:
1E29  0000        <Empty Function>

EMPTY:
1E2E  0000        <Empty Function>

EMPTY:
1E33  0000        <Empty Function>

EMPTY:
1E38  0000        <Empty Function>

EMPTY:
1E3D  0000        <Empty Function>

EMPTY:
1E42  0000        <Empty Function>

EMPTY:
1E47  0000        <Empty Function>

EMPTY:
1E4C  0000        <Empty Function>

EMPTY:
1E51  0000        <Empty Function>

EMPTY:
1E56  0000        <Empty Function>

EMPTY:
1E5B  0000        <Empty Function>

EMPTY:
1E60  0000        <Empty Function>

EMPTY:
1E65  0000        <Empty Function>

EMPTY:
1E6A  0000        <Empty Function>

EMPTY:
1E6F  0000        <Empty Function>

EMPTY:
1E74  0000        <Empty Function>

EMPTY:
1E79  0000        <Empty Function>

EMPTY:
1E7E  0000        <Empty Function>

EMPTY:
1E83  0000        <Empty Function>

EMPTY:
1E88  0000        <Empty Function>

EMPTY:
1E8D  0000        <Empty Function>

EMPTY:
1E92  0000        <Empty Function>

EMPTY:
1E97  0000        <Empty Function>

EMPTY:
1E9C  0000        <Empty Function>

EMPTY:
1EA1  0000        <Empty Function>

EMPTY:
1EA6  0000        <Empty Function>

EMPTY:
1EAB  0000        <Empty Function>

EMPTY:
1EB0  0000        <Empty Function>

EMPTY:
1EB5  0000        <Empty Function>

EMPTY:
1EBA  0000        <Empty Function>

EMPTY:
1EBF  0000        <Empty Function>

EMPTY:
1EC4  0000        <Empty Function>

EMPTY:
1EC9  0000        <Empty Function>

EMPTY:
1ECE  0000        <Empty Function>

EMPTY:
1ED3  0000        <Empty Function>

EMPTY:
1ED8  0000        <Empty Function>

EMPTY:
1EDD  0000        <Empty Function>

EMPTY:
1EE2  0000        <Empty Function>

EMPTY:
1EE7  0000        <Empty Function>

EMPTY:
1EEC  0000        <Empty Function>

EMPTY:
1EF1  0000        <Empty Function>

EMPTY:
1EF6  0000        <Empty Function>

EMPTY:
1EFB  0000        <Empty Function>

EMPTY:
1F00  0000        <Empty Function>

EMPTY:
1F05  0000        <Empty Function>

EMPTY:
1F0A  0000        <Empty Function>

EMPTY:
1F0F  0000        <Empty Function>

EMPTY:
1F14  0000        <Empty Function>

EMPTY:
1F19  0000        <Empty Function>

EMPTY:
1F1E  0000        <Empty Function>

EMPTY:
1F23  0000        <Empty Function>

EMPTY:
1F28  0000        <Empty Function>

EMPTY:
1F2D  0000        <Empty Function>

EMPTY:
1F32  0000        <Empty Function>

EMPTY:
1F37  0000        <Empty Function>

EMPTY:
1F3C  0000        <Empty Function>

EMPTY:
1F41  0000        <Empty Function>

EMPTY:
1F46  0000        <Empty Function>

EMPTY:
1F4B  0000        <Empty Function>

EMPTY:
1F50  0000        <Empty Function>

EMPTY:
1F55  0000        <Empty Function>

EMPTY:
1F5A  0000        <Empty Function>

EMPTY:
1F5F  0000        <Empty Function>

EMPTY:
1F64  0000        <Empty Function>

EMPTY:
1F69  0000        <Empty Function>

EMPTY:
1F6E  0000        <Empty Function>

EMPTY:
1F73  0000        <Empty Function>

EMPTY:
1F78  0000        <Empty Function>

EMPTY:
1F7D  0000        <Empty Function>

EMPTY:
1F82  0000        <Empty Function>

EMPTY:
1F87  0000        <Empty Function>

EMPTY:
1F8C  0000        <Empty Function>

EMPTY:
1F91  0000        <Empty Function>

EMPTY:
1F96  0000        <Empty Function>

EMPTY:
1F9B  0000        <Empty Function>

EMPTY:
1FA0  0000        <Empty Function>

EMPTY:
1FA5  0000        <Empty Function>

EMPTY:
1FAA  0000        <Empty Function>

EMPTY:
1FAF  0000        <Empty Function>

EMPTY:
1FB4  0000        <Empty Function>

EMPTY:
1FB9  0000        <Empty Function>

EMPTY:
1FBE  0000        <Empty Function>

STRINGS:
03FC: You see a switch on the wall and throw it. You hear the sound of locks opening.
044C: You see a switch on the wall and throw it. You hear the sound of locks opening.
049C: You see a switch on the wall and throw it. You hear the sound of locks opening.
04EC: You see a switch on the wall and throw it. You hear the sound of locks opening.
053C: The door is unlocked.
0552: The door is sealed shut. There is no lock on the outside.
058C: The door is unlocked.
05A2: The door is sealed shut. There is no lock on the outside.
05DC: The door is unlocked.
05F2: The door is sealed shut. There is no lock on the outside.
062C: The door is unlocked.
0642: The door is sealed shut. There is no lock on the outside.
067C: A door appears in the south wall.
069E: Monsters attack you.
06B3: A key dangles from a spider's mandible.
06DB: Silver Ogres spring a trap.
06F7: A Silver Ogre plays with an unusual key.
0720: Lizardites have made this room their home.
074B: A Lizardite holds a key shaped like the rune sign for I.
0784: The tapestry contains runes...
07A3: Take the Crown, Robe and Scepter to the Mausoleum of Cleowyn. Use them in the correct niches to open the true path to the king's tomb.
082A: There are runes on this tapestry...
084E: Go west, but not farthest west, and give the Crown when you can go no more. Go east, but not farthest east, and give the Robe when you can go no more. When Crown and Robe are given, continue to the door of the tomb. Give the Scepter there to be rewarded.
094D: You encounter Bugbears.
0965: Bugbears stand near some gold.
0984: Dire Wolves scratch the floor impatiently.
09AF: A Dire Wolf plays with a coin purse.
09D4: You suddenly feel nervous.
09EF: Hungry lions prowl the area.
0A0C: The floor crawls with Leeches.
0A2B: Leeches swarm over a magic wand.
0A4C: Giants interrupt your search.
0A6A: A Giant wears a medallion around his neck.
0A95: You disturb a nest of Cockatrices.
0AB8: You see a vial in a Cockatrice nest.
0ADD: Silver Ogres suddenly appear around you.
0B06: The lead Silver Ogre wields a powerful morningstar.
0B3A: You disturb some sleeping Giants.
0B5C: A gleaming sword lies on the floor between you and a group of Giants.
0BA2: Dark shadows coalesce into Bugbears.
0BC7: A Bugbear guards some chainmail.
0BE8: You enter a roosting area for Cockatrices.
0C13: In a Cockatrice nest you see luminous chainmail.
0C44: Dire Wolves encircle you.
0C5E: Dire Wolves seem fascinated by a shiny shield.
0C8D: Loud hisses alert you to danger.
0CAE: Lizardites move between you and a piece of armor on the floor.
0CED: The door is unlocked.
0D03: The door is sealed shut. You see what appears to be the bas relief of a royal ring 
0D57: The stairs through the north gateway lead up. The gateway to the east leads to THE GREAT CORRIDOR.
0DBA: The stairs past the south gateway lead up a level.
0DED: There are stairs through the the north gateway.
0E1D: There are stairs beyond the west gateway.
0E47: You encounter a Human Barbarian.
0E68: The opening and closing of secret doors in this area give me a headache. I simply cannot puzzle out the correct sequence of opening the doors. I wish my map of this area were more complete.
0F26: By the way, if you don't have the king's ring, you won't get anywhere in this crazy place.
0F81: The Human Barbarian pays you no attention as he puzzles over a map.
0FC5: You encounter a Gnome Wizard.
0FE3: Once you find a key in this area, seek the hidden door and follow your destiny. The door appears only when you have the right key. Where it leads I do not know.
1084: The Gnome Wizard is too intent on drawing runes in the dust to talk to you.
10D0: You encounter an Orc Knight.
10ED: There are many ways into King Cleowyn's Mausoleum, but few are rewarding. The most direct ways are the most challenging. Do not continue unless you have what the king demands.
119D: The Orc Knight dismisses you as low-level buffoons.
11D1: You encounter a Halfling Thief.
11F1: Beneath the king's living quarters is an area known as the Thieves' Maze. Only an experienced thief - or a hero who has a thief's skills - will pick his way through this intricate maze.
12AB: The Halfling Thief steals some gold and runs away.
