CHESLITE_01:
0000                          BEGIN (saving si)
0004                          ax = GetNextTile()
000B                          compare(ax, 0062)
000E                          If (result.notequal) value jump to 001B
0010                          ax = SetExitability(ax) // ax is usually 0 following equality check
0017                          RefreshCompareFlags(ax)
0019                          If (result.equal) value jump to 0062
001B                          ax = GetNextTile()
0022                          compare(ax, 0069)
0025                          If (result.notequal) value jump to 0033
0027                          ax = SetExitability(ax) // ax is usually 0 following equality check
002E                          compare(ax, 0002)
0031                          If (result.equal) value jump to 0062
0033                          ax = GetNextTile()
003A                          compare(ax, 0092)
003D                          If (result.notequal) value jump to 004A
003F                          ax = SetExitability(ax) // ax is usually 0 following equality check
0046                          RefreshCompareFlags(ax)
0048                          If (result.equal) value jump to 0062
004A                          ax = GetNextTile()
0051                          compare(ax, 0099)
0054                          If (result.notequal) value jump to 0072
0056                          ax = SetExitability(ax) // ax is usually 0 following equality check
005D                          compare(ax, 0002)
0060                          If (result.notequal) value jump to 0072
0062                          ShowMessage(03FC) = You may leave the chessboard through this opening.
006F                          Jump to 0193
0072                          Push(00)
0075                          ax = SetExitability(ax) // ax is usually 0 following equality check
007C                          Push(ax)
007D                          ax = GetNextTile()
0084                          Push(ax)
0085                          Move(stk[0], stk[1], stk[2])
008F                          ax = HasItem(EE)
009D                          If (result.notequal) value jump to 00A2
009F                          Jump to 0186
00A2                          ax = SetExitability(ax) // ax is usually 0 following equality check
00A9                          compare(ax, 0003)
00AC                          If (result.notequal) value jump to 00BA
00AE                          ax = GetNextTile()
00B5                          ax = ax + FFE1
00B8                          si = ax
00BA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00C1                          compare(ax, 0002)
00C4                          If (result.notequal) value jump to 00D2
00C6                          ax = GetNextTile()
00CD                          ax = ax + 0012
00D0                          si = ax
00D2                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D9                          compare(ax, 0001)
00DC                          If (result.notequal) value jump to 00EA
00DE                          ax = GetNextTile()
00E5                          ax = ax + 001F
00E8                          si = ax
00EA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00F1                          RefreshCompareFlags(ax)
00F3                          If (result.notequal) value jump to 0101
00F5                          ax = GetNextTile()
00FC                          ax = ax + FFEE
00FF                          si = ax
0101                          compare(si, 42)
0104 7C 05                    jl 0x10b
0106                          compare(si, 49)
0109 7E 4E                    jle 0x159
010B                          compare(si, 52)
010E 7C 05                    jl 0x115
0110                          compare(si, 59)
0113 7E 44                    jle 0x159
0115                          compare(si, 62)
0118 7C 05                    jl 0x11f
011A                          compare(si, 69)
011D 7E 3A                    jle 0x159
011F                          compare(si, 72)
0122 7C 05                    jl 0x129
0124                          compare(si, 79)
0127 7E 30                    jle 0x159
0129 81 FE 82 00              cmp si, 0x82
012D 7C 06                    jl 0x135
012F 81 FE 89 00              cmp si, 0x89
0133 7E 24                    jle 0x159
0135 81 FE 92 00              cmp si, 0x92
0139 7C 06                    jl 0x141
013B 81 FE 99 00              cmp si, 0x99
013F 7E 18                    jle 0x159
0141 81 FE A2 00              cmp si, 0xa2
0145 7C 06                    jl 0x14d
0147 81 FE A9 00              cmp si, 0xa9
014B 7E 0C                    jle 0x159
014D 81 FE B2 00              cmp si, 0xb2
0151 7C 24                    jl 0x177
0153 81 FE B9 00              cmp si, 0xb9
0157 7F 1E                    jg 0x177
0159                          ax = SetExitability(ax) // ax is usually 0 following equality check
0160                          GoMap(ax, si, 02, 35)
0175                          Jump to 0184
0177                          ShowMessage(042F) = A knight move here would place you off the chessboard!
0184                          Jump to 0193
0186                          ShowMessage(0466) = With a chess piece you may step across the chessboard.
0193                          RETURN (restoring si)

CHESDARK_02:
0000                          BEGIN (saving si)
0004                          ax = GetNextTile()
000B                          compare(ax, 0062)
000E                          If (result.notequal) value jump to 001B
0010                          ax = SetExitability(ax) // ax is usually 0 following equality check
0017                          RefreshCompareFlags(ax)
0019                          If (result.equal) value jump to 0062
001B                          ax = GetNextTile()
0022                          compare(ax, 0069)
0025                          If (result.notequal) value jump to 0033
0027                          ax = SetExitability(ax) // ax is usually 0 following equality check
002E                          compare(ax, 0002)
0031                          If (result.equal) value jump to 0062
0033                          ax = GetNextTile()
003A                          compare(ax, 0092)
003D                          If (result.notequal) value jump to 004A
003F                          ax = SetExitability(ax) // ax is usually 0 following equality check
0046                          RefreshCompareFlags(ax)
0048                          If (result.equal) value jump to 0062
004A                          ax = GetNextTile()
0051                          compare(ax, 0099)
0054                          If (result.notequal) value jump to 0072
0056                          ax = SetExitability(ax) // ax is usually 0 following equality check
005D                          compare(ax, 0002)
0060                          If (result.notequal) value jump to 0072
0062                          ShowMessage(049D) = You may leave the chessboard through this opening.
006F                          Jump to 0193
0072                          Push(00)
0075                          ax = SetExitability(ax) // ax is usually 0 following equality check
007C                          Push(ax)
007D                          ax = GetNextTile()
0084                          Push(ax)
0085                          Move(stk[0], stk[1], stk[2])
008F                          ax = HasItem(EE)
009D                          If (result.notequal) value jump to 00A2
009F                          Jump to 0186
00A2                          ax = SetExitability(ax) // ax is usually 0 following equality check
00A9                          compare(ax, 0003)
00AC                          If (result.notequal) value jump to 00BA
00AE                          ax = GetNextTile()
00B5                          ax = ax + FFDF
00B8                          si = ax
00BA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00C1                          compare(ax, 0002)
00C4                          If (result.notequal) value jump to 00D2
00C6                          ax = GetNextTile()
00CD                          ax = ax + FFF2
00D0                          si = ax
00D2                          ax = SetExitability(ax) // ax is usually 0 following equality check
00D9                          compare(ax, 0001)
00DC                          If (result.notequal) value jump to 00EA
00DE                          ax = GetNextTile()
00E5                          ax = ax + 0021
00E8                          si = ax
00EA                          ax = SetExitability(ax) // ax is usually 0 following equality check
00F1                          RefreshCompareFlags(ax)
00F3                          If (result.notequal) value jump to 0101
00F5                          ax = GetNextTile()
00FC                          ax = ax + 000E
00FF                          si = ax
0101                          compare(si, 42)
0104 7C 05                    jl 0x10b
0106                          compare(si, 49)
0109 7E 4E                    jle 0x159
010B                          compare(si, 52)
010E 7C 05                    jl 0x115
0110                          compare(si, 59)
0113 7E 44                    jle 0x159
0115                          compare(si, 62)
0118 7C 05                    jl 0x11f
011A                          compare(si, 69)
011D 7E 3A                    jle 0x159
011F                          compare(si, 72)
0122 7C 05                    jl 0x129
0124                          compare(si, 79)
0127 7E 30                    jle 0x159
0129 81 FE 82 00              cmp si, 0x82
012D 7C 06                    jl 0x135
012F 81 FE 89 00              cmp si, 0x89
0133 7E 24                    jle 0x159
0135 81 FE 92 00              cmp si, 0x92
0139 7C 06                    jl 0x141
013B 81 FE 99 00              cmp si, 0x99
013F 7E 18                    jle 0x159
0141 81 FE A2 00              cmp si, 0xa2
0145 7C 06                    jl 0x14d
0147 81 FE A9 00              cmp si, 0xa9
014B 7E 0C                    jle 0x159
014D 81 FE B2 00              cmp si, 0xb2
0151 7C 24                    jl 0x177
0153 81 FE B9 00              cmp si, 0xb9
0157 7F 1E                    jg 0x177
0159                          ax = SetExitability(ax) // ax is usually 0 following equality check
0160                          GoMap(ax, si, 02, 35)
0175                          Jump to 0184
0177                          ShowMessage(04D0) = A knight move here would place you off the chessboard!
0184                          Jump to 0193
0186                          ShowMessage(0507) = With a chess piece you may step across the chessboard.
0193                          RETURN (restoring si)

VOID_03:
0000                          BEGIN
0003                          ShowMessage(053E) = You fall to your death in the lava below!
0010                          ax = GetMaxHits()
0017                          DoDamage(ax)
0021                          RETURN

POKERBRG_04:
0000                          BEGIN
0003                          ShowMessage(0568) = Planks of the Poker Bridge are made from used playing cards.
0010                          ax = CheckState(01, 01)
0021                          compare(ax, 0001)
0024                          If (result.notequal) value jump to 0056
0026                          ShowMessage(05A5) = The rickety bridge barely holds your weight.
0033                          SetTileFloor(DD, 00)
0041                          cx = Pop()
0042                          cx = Pop()
0043                          Move(01, DD)
0054                          Jump to 0081
0056                          ShowMessage(05D2) = The bridge collapses as you step on it, sending you to your death.
0063                          ShowMessage(0615) = The King laughs at his clever ruse.
0070                          ax = GetMaxHits()
0077                          DoDamage(ax)
0081                          RETURN

POKERSW_05:
0000                          BEGIN
0003                          ax = UsedItem(EC, EC)
0016                          If (result.equal) value jump to 005D
0018                          SetState(01, 01, 01)
002D                          SetTileFloor(DD, 00)
003B                          cx = Pop()
003C                          cx = Pop()
003D                          Move(01, DD)
004E                          ShowMessage(0639) = The royal flush beats the Joker!  A bridge forms across the pit.
005B                          Jump to 0077
005D                          ShowMessage(067A) = A bottomless pit lies before you, and a broken bridge spans the pit.
006A                          ShowMessage(06BF) = Upon each board are the symbols for 10, Jack, Queen and Ace.  A voice proclaims, 'I call your bluff'.
0077                          RETURN

HEARTSDR_06:
0000                          BEGIN
0003                          ShowMessage(0725) = The door bellows, 'I am all hearts!'
0010                          RETURN

MOONSW_07:
0000                          BEGIN
0003                          ax = UsedItem(EB, EB)
0016                          If (result.equal) value jump to 0053
0018                          Push(03)
001C                          Push(BF)
0020                          Push(01)
0024                          SetUnblocked()
002E                          Move(01, 03, BF)
0044                          ShowMessage(074A) = The door proclaims,  'You shot the Moon!'
0051                          Jump to 0060
0053                          ShowMessage(0774) = A small button, shaped like the crescent moon, lies just out of reach.
0060                          RETURN

BLAKJAK_08:
0000                          BEGIN
0003                          ax = UsedItem(ED, ED)
0016                          If (result.equal) value jump to 0060
0018                          Push(01)
001C                          Push(8D)
0020                          Push(01)
0024                          SetUnblocked()
002E                          Move(01, 01, 8D)
0044                          ShowMessage(07BB) = The Ace is played as eleven points, scoring the BlackJack!
0051                          ShowMessage(07F6) = A door unlocks...
005E                          Jump to 007A
0060                          ShowMessage(0808) = You enter a treasure room without any treasure.
006D                          ShowMessage(0838) = A dwarf thief voice menacingly orders, 'The Kings guard their treasure.  Only one can find it.'
007A                          RETURN

BLAKJAKK_09:
0000                          BEGIN
0003                          ShowMessage(0898) = Stand back!  A King guards this wall!
0010                          RETURN

CRIB_0A:
0000                          BEGIN
0003                          ax = UsedItem(EA, EA)
0016                          If (result.equal) value jump to 0060
0018                          Push(03)
001C                          Push(7D)
0020                          Push(01)
0024                          SetUnblocked()
002E                          Move(01, 03, 7D)
0044                          ShowMessage(08BE) = The Jack scores the hand 22.  Cribbage is the game.
0051                          ShowMessage(08F2) = A door unlocks...
005E                          Jump to 0087
0060                          ShowMessage(0904) = The 22nd room of this fine castle...
006D                          ShowMessage(0929) = On the floor is a five, on two walls are fives, and the third wall holds a Jack.
007A                          ShowMessage(097A) = A voice laughs, 'You stand on face up!'
0087                          RETURN

CRIBJACK_0B:
0000                          BEGIN
0003                          ShowMessage(09A2) = I, the Jack, throw dust in your general direction.
0010                          RETURN

CRIBFIVE_0C:
0000                          BEGIN
0003                          ShowMessage(09D5) = The 5 card smiles back.
0010                          RETURN

BRDGFALL_0D:
0000                          BEGIN
0003                          ShowMessage(09ED) = The Poker Bridge behind you collapses.
0010                          SetState(01, 01, 00)
0024                          SetTileFloor(DD, 01)
0035                          RETURN

DICEPASS_0E:
0000                          BEGIN
0003                          ShowMessage(0A14) = Lucky Sevens! Lucky Sevens on the first roll!
0010                          RETURN

DICESNAK_0F:
0000                          BEGIN
0003                          ShowMessage(0A42) = The door says, 'Snake eyes' ...
0010                          RETURN

DICEBOXC_10:
0000                          BEGIN
0003                          ShowMessage(0A62) = The door shows two squares of six.  'Box Cars' ...
0010                          RETURN

DICEENCA_11:
0000                          BEGIN
0003                          AddEncounter(0A, 01)
0015                          AddEncounter(0A, 02)
0027                          AddEncounter(0A, 03)
0039                          AddEncounter(0A, 04)
004B                          AddEncounter(04, 05)
005D                          AddEncounter(04, 06)
006F                          RETURN

DICEENCB_12:
0000                          BEGIN
0003                          AddEncounter(0A, 01)
0015                          AddEncounter(0A, 02)
0027                          AddEncounter(0A, 03)
0039                          AddEncounter(0A, 04)
004B                          AddEncounter(0A, 05)
005D                          AddEncounter(0A, 06)
006F                          RETURN

BLJKFOUN_13:
0000                          BEGIN
0003                          ShowMessage(0A95) = The Blackjack Fountain is made of playing cards.
0010                          ax = CheckState(02, 7E)
0021                          RefreshCompareFlags(ax)
0023                          If (result.equal) value jump to 0028
0025                          Jump to 00AF
0028                          SetState(02, 7E, 01)
003D                          RemoveItem(EA)
0049                          ShowPortrait(0042)
0056                          ModifyAttribute(02, 0003)
0068                          ax = GetMaxHits()
006F                          AddHealth(ax)
0079                          ShowMessage(0AC6) = Still water fills the basin.
0086                          ShowMessage(0AE3) = A sip of it makes you feel healthier and more agile.
0093                          ShowMessage(0B18) = As you sip, a voice whispers -
00A0                          ShowMessage(0B37) = 'The Jack has come home.  Thank you for your help.'
00AD                          Jump to 00BC
00AF                          ShowMessage(0B6B) = The fountain is dry as a bone.
00BC                          RETURN

CRIBFOUN_14:
0000                          BEGIN
0003                          ShowMessage(0B8A) = The Cribbage Fountain is bedecked with golden pegs.
0010                          ax = CheckState(02, 7F)
0021                          RefreshCompareFlags(ax)
0023                          If (result.equal) value jump to 0028
0025                          Jump to 00AB
0028                          SetState(02, 7F, 01)
003D                          ShowPortrait(0042)
004A                          RemoveItem(ED)
0056                          ModifyAttribute(03, 0003)
0068                          AddMana(0BB8)
0075                          ShowMessage(0BBE) = A puff of steam from the fountain blows in your face.
0082                          ShowMessage(0BF4) = Your Mana is restored and you feel readier to fight.
008F                          ShowMessage(0C29) = A voice whispers -
009C                          ShowMessage(0C3C) = 'The Ace has returned.  Three points for you.'
00A9                          Jump to 00B8
00AB                          ShowMessage(0C6B) = The basin is empty.
00B8                          RETURN

DICETRSA_15:
0000                          BEGIN
0003                          ShowMessage(0C7F) = A message is inscribed on a wall -- 
0010                          ShowRunes(0CA4) = 'The Waters of Winter are needed to transform Spring into Summer.
001D                          ShowRunes(0CE6) = In return for your deeds, you will receive the Radiance of Summer.'
002A                          RETURN

DICETRSB_16:
0000                          BEGIN
0003                          ShowMessage(0D2A) = A note is inscribed on a wall -- 
0010                          ShowRunes(0D4C) = 'To reach En-Li-Kil, you must defeat his Wind Elemental.
001D                          ShowRunes(0D85) = Remember to use weapons that do not break when the Wind Elemental attacks.
002A                          RETURN

DICETRSC_17:
0000                          BEGIN
0003                          ShowMessage(0DD0) = A message is written in blood on a wall -- 
0010                          ShowRunes(0DFC) = 'Be careful in the River of Eternity.
001D                          ShowRunes(0E22) = The river takes one fourth of your full health every step you take with no opportunity to heal.
002A                          ShowRunes(0E82) = 'A safe fourth square must be found to cross the Rivers of Eternity.'
0037                          RETURN

DICETRSD_18:
0000                          BEGIN
0003                          ShowMessage(0EC8) = A message is written on a wall -- 
0010                          ShowRunes(0EEB) = 'Use the outer walls to set the location of another's next step in the Parapet Chasm.
001D                          ShowRunes(0F41) = Once across, encounter Andreas to gain access to Arnakkian.'
002A                          RETURN

DICETRSE_19:
0000                          BEGIN
0003                          ShowMessage(0F7E) = A message is written on a wall -- 
0010                          ShowRunes(0FA1) = 'The Promise of Spring Renewal must be sworn to convert Autumn to Winter.
001D                          ShowRunes(0FEB) = In return you will receive the cold Waters of Winter.'
002A                          RETURN

DICETRSF_1A:
0000                          BEGIN
0003                          ShowPortrait(001F)
0010                          ShowMessage(1022) = An Elf Ranger appears.
001D                          ShowMessage(1039) = 'In levels below the labyrinth, Snow Elves hide from the curses 
002A                          ShowMessage(107A) = of Arnakkian and await the day they may return to their faraway land.
0037                          ShowMessage(10C0) = A proud tree may be found in their caves.
0044                          ShowMessage(10EA) = The Snow Elves call this grand tree the Aldbora.
0051                          ShowMessage(111B) = The Aldbora bears the fruit of knowledge to all adventurers during the season of winter.
005E                          ShowMessage(1174) = It lies dormant now, unable to ripen its fruit without the change of seasons and the Radiance of Summer.'
006B                          RETURN

DICETRSG_1B:
0000                          BEGIN
0003                          ShowMessage(11DE) = A message is scrawled on a wall -- 
0010                          ShowRunes(1202) = 'Use the Autumn Seeds to transform Winter into flowering Spring.
001D                          ShowRunes(1243) = The promise of Spring Renewal for another year will be given in return.'
002A                          RETURN

DICETRSH_1C:
0000                          BEGIN
0003                          ShowMessage(128C) = A message is carved in the floor -- 
0010                          ShowRunes(12B1) = 'The bones of a past king may be found in the Elven Caves.'
001D                          RETURN

DICETRSI_1D:
0000                          BEGIN
0003                          ShowMessage(12ED) = A message is scribbled on a wall -- 
0010                          ShowRunes(1312) = 'The trumpet sound of the Harvest Horn will announce Summer's conversion to Autumn.
001D                          ShowRunes(1366) = From the conversion you will receive the seeds of Autumn.'
002A                          RETURN

BARD_22:
0000                          BEGIN
0003                          ShowMessage(13A1) = A ghost elf bard sings a tale of how four colored magical gems placed side by side can form a rainbow to a far away island.
0010                          RETURN

APPLES_23:
0000                          BEGIN
0003                          ShowMessage(141D) = The spirit of a beautiful wench appears. She hold a wooden bucket filled wtih floating apples.
0010                          ShowMessage(147C) = 'Step forward and honor me with your kindness!  Bob for apples and win a prize.'
001D                          RETURN

APPLEENC_24:
0000                          BEGIN
0003                          ShowMessage(14CD) = You have accepted the ghost's challenge.
0010                          ShowMessage(14F6) = You close your eyes and dunk your head into the wood bucket.
001D                          ShowMessage(1533) = The ripe apples are rotten and filled with Leeches!
002A                          AddEncounter(1A, 01)
003C                          AddEncounter(1A, 02)
004E                          AddEncounter(1B, 03)
0060                          AddEncounter(1B, 04)
0072                          AddEncounter(1A, 05)
0084                          AddEncounter(1A, 06)
0096                          RETURN

CHESENCA_25:
0000                          BEGIN
0003                          AddEncounter(1C, 01)
0015                          AddEncounter(1D, 02)
0027                          AddEncounter(1E, 03)
0039                          AddEncounter(1F, 04)
004B                          AddEncounter(20, 05)
005D                          AddEncounter(21, 06)
006F                          RETURN

CHESENCB_26:
0000                          BEGIN
0003                          AddEncounter(1E, 01)
0015                          AddEncounter(1E, 02)
0027                          AddEncounter(1E, 03)
0039                          AddEncounter(1E, 04)
004B                          AddEncounter(1E, 05)
005D                          AddEncounter(1E, 06)
006F                          RETURN

CHESENCC_27:
0000                          BEGIN
0003                          AddEncounter(1F, 01)
0015                          AddEncounter(1F, 02)
0027                          AddEncounter(1F, 03)
0039                          AddEncounter(1F, 04)
004B                          AddEncounter(1F, 05)
005D                          AddEncounter(1F, 06)
006F                          RETURN

CHESENCD_28:
0000                          BEGIN
0003                          AddEncounter(20, 01)
0015                          AddEncounter(20, 02)
0027                          AddEncounter(20, 03)
0039                          AddEncounter(20, 04)
004B                          AddEncounter(26, 05)
005D                          AddEncounter(26, 06)
006F                          RETURN

CHESENCE_29:
0000                          BEGIN
0003                          AddEncounter(22, 01)
0015                          AddEncounter(22, 02)
0027                          AddEncounter(22, 03)
0039                          AddEncounter(22, 04)
004B                          AddEncounter(22, 05)
005D                          AddEncounter(1D, 06)
006F                          ax = HasItem(EB)
007D                          If (result.equal) value jump to 00A0
007F                          AddTreasure(0000, 00, 00, 00, 90, AF)
009E                          Jump to 00C0
00A0                          AddTreasure(03E8, 00, 00, 00, EB, D0)
00C0                          RETURN

CHESENCF_2A:
0000                          BEGIN
0003                          AddEncounter(18, 01)
0015                          AddEncounter(18, 02)
0027                          AddEncounter(15, 03)
0039                          AddEncounter(18, 04)
004B                          AddEncounter(15, 05)
005D                          AddEncounter(1C, 06)
006F                          ax = HasItem(EC)
007D                          If (result.equal) value jump to 00A0
007F                          AddTreasure(0000, 00, 00, 00, 8D, CF)
009E                          Jump to 00C0
00A0                          AddTreasure(03E8, 00, 00, 00, EC, D0)
00C0                          RETURN

POKRENCA_2B:
0000                          BEGIN
0003                          AddEncounter(1F, 01)
0015                          AddEncounter(1F, 02)
0027                          AddEncounter(1F, 03)
0039                          AddEncounter(1F, 04)
004B                          AddEncounter(1F, 05)
005D                          AddEncounter(1F, 06)
006F                          RETURN

CRIBENCA_2C:
0000                          BEGIN
0003                          AddEncounter(23, 01)
0015                          AddEncounter(23, 02)
0027                          AddEncounter(23, 05)
0039                          AddEncounter(23, 06)
004B                          AddTreasure(2710, 00, 00, D0, D0, 71)
006C                          RETURN

BLJKENCA_2D:
0000                          BEGIN
0003                          AddEncounter(26, 01)
0015                          AddEncounter(26, 02)
0027                          AddEncounter(26, 03)
0039                          AddEncounter(26, 04)
004B                          AddEncounter(26, 05)
005D                          AddEncounter(26, 06)
006F                          AddTreasure(2710, 00, 00, 00, D0, 1D)
008F                          RETURN

BLJKENCB_2E:
0000                          BEGIN
0003                          AddEncounter(26, 01)
0015                          AddEncounter(26, 02)
0027                          AddEncounter(26, 03)
0039                          AddEncounter(26, 04)
004B                          AddEncounter(26, 05)
005D                          AddEncounter(26, 06)
006F                          AddTreasure(2710, 00, 00, 00, D0, BE)
008F                          RETURN

CRIBENCB_2F:
0000                          BEGIN
0003                          ShowMessage(1567) = You are able to dodge several bursts of flame as you enter a Dragon's Lair.
0010                          AddEncounter(24, 01)
0022                          AddEncounter(24, 02)
0034                          AddEncounter(24, 03)
0046                          AddEncounter(25, 05)
0058                          AddEncounter(25, 06)
006A                          AddTreasure(2710, 00, 00, CF, BD, 5C)
008B                          RETURN

VARYENCA_30:
0000                          BEGIN
0003                          AddEncounter(04, 01)
0015                          AddEncounter(04, 02)
0027                          AddEncounter(04, 04)
0039                          AddEncounter(04, 05)
004B                          RETURN

VARYENCB_31:
0000                          BEGIN
0003                          AddEncounter(0E, 01)
0015                          AddEncounter(0E, 02)
0027                          AddEncounter(0E, 03)
0039                          AddEncounter(0D, 05)
004B                          RETURN

VARYENCE_34:
0000                          BEGIN
0003                          AddEncounter(13, 01)
0015                          AddEncounter(13, 02)
0027                          AddEncounter(13, 03)
0039                          AddEncounter(13, 04)
004B                          AddEncounter(17, 05)
005D                          AddEncounter(02, 06)
006F                          RETURN

GATEA_35:
0000                          BEGIN
0003                          GoMap(00, 3F, 01, 35)
001D                          RETURN

TOLABY_36:
0000                          BEGIN
0003                          ShowMessage(15B3) = The gate takes you back to the labyrinth.
0010                          RETURN

TXTCHESL_37:
0000                          BEGIN
0003                          ShowMessage(15DD) = Use the red squares and you shall turn clockwise on your mount.
0010                          RETURN

TXTCHESD_38:
0000                          BEGIN
0003                          ShowMessage(161D) = The stallion must go counterclockwise on blue squares!
0010                          RETURN

TXTDICEB_39:
0000                          BEGIN
0003                          ShowMessage(1654) = To the west you will find a second dice maze.
0010                          RETURN

TXTDICEA_3A:
0000                          BEGIN
0003                          ShowMessage(1682) = A maze made out of dice lies just to the north.
0010                          RETURN

03FC: You may leave the chessboard through this opening.
042F: A knight move here would place you off the chessboard!
0466: With a chess piece you may step across the chessboard.
049D: You may leave the chessboard through this opening.
04D0: A knight move here would place you off the chessboard!
0507: With a chess piece you may step across the chessboard.
053E: You fall to your death in the lava below!
0568: Planks of the Poker Bridge are made from used playing cards.
05A5: The rickety bridge barely holds your weight.
05D2: The bridge collapses as you step on it, sending you to your death.
0615: The King laughs at his clever ruse.
0639: The royal flush beats the Joker!  A bridge forms across the pit.
067A: A bottomless pit lies before you, and a broken bridge spans the pit.
06BF: Upon each board are the symbols for 10, Jack, Queen and Ace.  A voice proclaims, 'I call your bluff'.
0725: The door bellows, 'I am all hearts!'
074A: The door proclaims,  'You shot the Moon!'
0774: A small button, shaped like the crescent moon, lies just out of reach.
07BB: The Ace is played as eleven points, scoring the BlackJack!
07F6: A door unlocks...
0808: You enter a treasure room without any treasure.
0838: A dwarf thief voice menacingly orders, 'The Kings guard their treasure.  Only one can find it.'
0898: Stand back!  A King guards this wall!
08BE: The Jack scores the hand 22.  Cribbage is the game.
08F2: A door unlocks...
0904: The 22nd room of this fine castle...
0929: On the floor is a five, on two walls are fives, and the third wall holds a Jack.
097A: A voice laughs, 'You stand on face up!'
09A2: I, the Jack, throw dust in your general direction.
09D5: The 5 card smiles back.
09ED: The Poker Bridge behind you collapses.
0A14: Lucky Sevens! Lucky Sevens on the first roll!
0A42: The door says, 'Snake eyes' ...
0A62: The door shows two squares of six.  'Box Cars' ...
0A95: The Blackjack Fountain is made of playing cards.
0AC6: Still water fills the basin.
0AE3: A sip of it makes you feel healthier and more agile.
0B18: As you sip, a voice whispers -
0B37: 'The Jack has come home.  Thank you for your help.'
0B6B: The fountain is dry as a bone.
0B8A: The Cribbage Fountain is bedecked with golden pegs.
0BBE: A puff of steam from the fountain blows in your face.
0BF4: Your Mana is restored and you feel readier to fight.
0C29: A voice whispers -
0C3C: 'The Ace has returned.  Three points for you.'
0C6B: The basin is empty.
0C7F: A message is inscribed on a wall -- 
0CA4: 'The Waters of Winter are needed to transform Spring into Summer.
0CE6: In return for your deeds, you will receive the Radiance of Summer.'
0D2A: A note is inscribed on a wall -- 
0D4C: 'To reach En-Li-Kil, you must defeat his Wind Elemental.
0D85: Remember to use weapons that do not break when the Wind Elemental attacks.
0DD0: A message is written in blood on a wall -- 
0DFC: 'Be careful in the River of Eternity.
0E22: The river takes one fourth of your full health every step you take with no opportunity to heal.
0E82: 'A safe fourth square must be found to cross the Rivers of Eternity.'
0EC8: A message is written on a wall -- 
0EEB: 'Use the outer walls to set the location of another's next step in the Parapet Chasm.
0F41: Once across, encounter Andreas to gain access to Arnakkian.'
0F7E: A message is written on a wall -- 
0FA1: 'The Promise of Spring Renewal must be sworn to convert Autumn to Winter.
0FEB: In return you will receive the cold Waters of Winter.'
1022: An Elf Ranger appears.
1039: 'In levels below the labyrinth, Snow Elves hide from the curses 
107A: of Arnakkian and await the day they may return to their faraway land.
10C0: A proud tree may be found in their caves.
10EA: The Snow Elves call this grand tree the Aldbora.
111B: The Aldbora bears the fruit of knowledge to all adventurers during the season of winter.
1174: It lies dormant now, unable to ripen its fruit without the change of seasons and the Radiance of Summer.'
11DE: A message is scrawled on a wall -- 
1202: 'Use the Autumn Seeds to transform Winter into flowering Spring.
1243: The promise of Spring Renewal for another year will be given in return.'
128C: A message is carved in the floor -- 
12B1: 'The bones of a past king may be found in the Elven Caves.'
12ED: A message is scribbled on a wall -- 
1312: 'The trumpet sound of the Harvest Horn will announce Summer's conversion to Autumn.
1366: From the conversion you will receive the seeds of Autumn.'
13A1: A ghost elf bard sings a tale of how four colored magical gems placed side by side can form a rainbow to a far away island.
141D: The spirit of a beautiful wench appears. She hold a wooden bucket filled wtih floating apples.
147C: 'Step forward and honor me with your kindness!  Bob for apples and win a prize.'
14CD: You have accepted the ghost's challenge.
14F6: You close your eyes and dunk your head into the wood bucket.
1533: The ripe apples are rotten and filled with Leeches!
1567: You are able to dodge several bursts of flame as you enter a Dragon's Lair.
15B3: The gate takes you back to the labyrinth.
15DD: Use the red squares and you shall turn clockwise on your mount.
161D: The stallion must go counterclockwise on blue squares!
1654: To the west you will find a second dice maze.
1682: A maze made out of dice lies just to the north.
