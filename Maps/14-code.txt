TELEPORT_01:
0009  0000        BEGIN
000C  0003        GoMap(0x02, 0xDC, 0x06, 0x01)
0027  001E        RETURN

PIT_02:
0029  0000        BEGIN
002C  0003        ax = GetNextTile()
0033  000A        SetTileFloor(ax, 0x01)
0040  0017        cx = Pop()
0041  0018        GoMap(0x02, 0xE0, 0x01, 0x04)
005C  0033        RETURN

NPCCHATA_03:
005E  0000        BEGIN
0061  0003        ShowMessage(0x03FC) = You encounter a Troll Cleric.
006E  0010        ShowPortrait(0x0028)
007B  001D        ax = UnknownFunctionEC(0x000F)
0088  002A        compare(ax, 0x000C)
008B  002D        If (result.unsigned_greater_than) jump to 004B
008D  002F        ShowMessage(0x041A) = I have almost despaired of finding a way out of this prison. Yet there must be an exit of some kind - stairs or teleport. The guards must have had some way of leaving this area.
009A  003C        ShowMessage(0x04CC) = To the east are the guard's living quarters and the interrogation rooms. The 36 prison cells are empty now, except for the resident spirits of those who perished here.
00A7  0049        Jump to 0058
00A9  004B        ShowMessage(0x0574) = The Troll Cleric bounces her head on the floor in frustration. She must be insane.
00B6  0058        RETURN

NPCCHATB_04:
00B8  0000        BEGIN
00BB  0003        ShowMessage(0x05C7) = You encounter an Orc Ranger.
00C8  0010        ShowPortrait(0x001E)
00D5  001D        ax = UnknownFunctionEC(0x000F)
00E2  002A        compare(ax, 0x0006)
00E5  002D        If (result.unsigned_greater_than) jump to 003E
00E7  002F        ShowMessage(0x05E4) = I have heard rumors that some few brave souls have escaped the dungeon. If you can find the Rainbow Bridge, you are near the exit.
00F4  003C        Jump to 004B
00F6  003E        ShowMessage(0x0667) = The Orc Ranger glares at you and refuses to speak.
0103  004B        RETURN

NPCCHATC_05:
0105  0000        BEGIN
0108  0003        ShowMessage(0x069A) = You encounter a Halfling Thief.
0115  0010        ShowPortrait(0x0025)
0122  001D        ax = UnknownFunctionEC(0x000F)
012F  002A        compare(ax, 0x000A)
0132  002D        If (result.unsigned_greater_than) jump to 004B
0134  002F        ShowMessage(0x06BA) = A special challenge awaits the brave. If you dare continue after finding what the guard Deldwinn desires, great rewards await you.
0141  003C        ShowMessage(0x073D) = Chaos should walk with Chaos and Harmony with Harmony to find the rewards.
014E  0049        Jump to 0058
0150  004B        ShowMessage(0x0788) = The Halfling Thief thumbs his nose at you and dashes off.
015D  0058        RETURN

NPCCHATD_06:
015F  0000        BEGIN
0162  0003        ShowMessage(0x07C2) = You encounter a Gnome Barbarian.
016F  0010        ShowPortrait(0x0019)
017C  001D        ax = UnknownFunctionEC(0x000F)
0189  002A        compare(ax, 0x000B)
018C  002D        If (result.unsigned_greater_than) jump to 004B
018E  002F        ShowMessage(0x07E3) = Two wizards have crafted a Challenge for the brave. The Wizards' Challenge is on this level, but you cannot reach it from this prison area.
019B  003C        ShowMessage(0x086F) = Know that race and Guild must walk together if the Challenge is to be overcome.
01A8  0049        Jump to 0058
01AA  004B        ShowMessage(0x08BF) = The Gnome Barbarian becomes distracted as he tries to twiddle his thumbs and instead gets them entangled.
01B7  0058        RETURN

NPCCHATE_07:
01B9  0000        BEGIN
01BC  0003        ShowMessage(0x0929) = You encounter a Dwarf Wizard.
01C9  0010        ShowPortrait(0x002C)
01D6  001D        ax = UnknownFunctionEC(0x000F)
01E3  002A        compare(ax, 0x000C)
01E6  002D        If (result.unsigned_greater_than) jump to 003E
01E8  002F        ShowMessage(0x0947) = King Cleowyn built his palace inside this volcano because he hoped to unearth the secrets of the wizard Arnakkian. Many of the stones that form Cleowyn's palace were taken from the wizard's castle. No wonder this dungeon is cursed.
01F5  003C        Jump to 004B
01F7  003E        ShowMessage(0x0A2F) = The Dwarf Wizard smiles kindly, but she refuses to speak.
0204  004B        RETURN

TELEMESG_08:
0206  0000        BEGIN
0209  0003        ShowMessage(0x0A69) = There is a teleport in the west wall.
0216  0010        RETURN

ITEMAENC_09:
0218  0000        BEGIN
021B  0003        ax = HasItem(0x77)
0229  0011        If (result.equal) jump to 0041
022B  0013        AddTreasure(0x01F4, 0x00, 0x00, 0x00, 0x00, 0xCE)
024A  0032        ShowMessage(0x0A8F) = Incubi haunt the empty prison cell.
0257  003F        Jump to 006D
0259  0041        AddTreasure(0x05DC, 0x00, 0x00, 0x00, 0x00, 0x77)
0278  0060        ShowMessage(0x0AB3) = As you reach for a jacket lying on the floor, you see Incubi appear in the cell.
0285  006D        ax = PartyCount()
028D  0075        compare(ax, 0x0001)
0290  0078        If (result.notequal) jump to 00A1
0292  007A        AddEncounter(0x25, 0x01)
02A4  008C        AddEncounter(0x25, 0x02)
02B6  009E        Jump to 0152
02B9  00A1        ax = PartyCount()
02C1  00A9        compare(ax, 0x0002)
02C4  00AC        If (result.notequal) jump to 00E6
02C6  00AE        AddEncounter(0x25, 0x01)
02D8  00C0        AddEncounter(0x25, 0x02)
02EA  00D2        AddEncounter(0x26, 0x03)
02FC  00E4        Jump to 0152
02FE  00E6        AddEncounter(0x21, 0x01)
0310  00F8        AddEncounter(0x21, 0x02)
0322  010A        AddEncounter(0x26, 0x03)
0334  011C        AddEncounter(0x26, 0x04)
0346  012E        AddEncounter(0x25, 0x05)
0358  0140        AddEncounter(0x25, 0x06)
036A  0152        RETURN

ITEMBENC_0A:
036C  0000        BEGIN
036F  0003        ax = HasItem(0xC1)
037D  0011        If (result.equal) jump to 0041
037F  0013        AddTreasure(0x00FA, 0x00, 0x00, 0x00, 0x00, 0xB6)
039E  0032        ShowMessage(0x0B04) = Leeches and Black Widows live in the cell.
03AB  003F        Jump to 006D
03AD  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0x00, 0xC1)
03CC  0060        ShowMessage(0x0B2F) = Just out of reach behind a mass of Leeches and Black Widows is a lockpick.
03D9  006D        ax = PartyCount()
03E1  0075        compare(ax, 0x0001)
03E4  0078        If (result.notequal) jump to 00A1
03E6  007A        AddEncounter(0x19, 0x01)
03F8  008C        AddEncounter(0x1B, 0x02)
040A  009E        Jump to 0171
040D  00A1        ax = PartyCount()
0415  00A9        compare(ax, 0x0002)
0418  00AC        If (result.equal) jump to 00BB
041A  00AE        ax = PartyCount()
0422  00B6        compare(ax, 0x0003)
0425  00B9        If (result.notequal) jump to 0105
0427  00BB        AddEncounter(0x19, 0x01)
0439  00CD        AddEncounter(0x1B, 0x02)
044B  00DF        AddEncounter(0x1B, 0x03)
045D  00F1        AddEncounter(0x19, 0x04)
046F  0103        Jump to 0171
0471  0105        AddEncounter(0x1B, 0x01)
0483  0117        AddEncounter(0x1B, 0x02)
0495  0129        AddEncounter(0x1C, 0x03)
04A7  013B        AddEncounter(0x1C, 0x04)
04B9  014D        AddEncounter(0x1B, 0x05)
04CB  015F        AddEncounter(0x1B, 0x06)
04DD  0171        RETURN

ITEMCENC_0B:
04DF  0000        BEGIN
04E2  0003        ax = HasItem(0x20)
04F0  0011        If (result.equal) jump to 0041
04F2  0013        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xCC)
0511  0032        ShowMessage(0x0B7A) = Hell Wolves appear in the cell.
051E  003F        Jump to 006E
0520  0041        AddTreasure(0x03E8, 0x00, 0x00, 0x00, 0xCF, 0x20)
0540  0061        ShowMessage(0x0B9A) = A circle of Hell Wolves surrounds you and a mace lying on the floor.
054D  006E        ax = PartyCount()
0555  0076        compare(ax, 0x0001)
0558  0079        If (result.notequal) jump to 00A2
055A  007B        AddEncounter(0x21, 0x01)
056C  008D        AddEncounter(0x21, 0x02)
057E  009F        Jump to 0171
0581  00A2        ax = PartyCount()
0589  00AA        compare(ax, 0x0002)
058C  00AD        If (result.equal) jump to 00BB
058E  00AF        ax = PartyCount()
0596  00B7        RefreshCompareFlags(ax)
0598  00B9        If (result.equal) jump to 0105
059A  00BB        AddEncounter(0x21, 0x01)
05AC  00CD        AddEncounter(0x22, 0x02)
05BE  00DF        AddEncounter(0x22, 0x03)
05D0  00F1        AddEncounter(0x21, 0x04)
05E2  0103        Jump to 0171
05E4  0105        AddEncounter(0x22, 0x01)
05F6  0117        AddEncounter(0x22, 0x02)
0608  0129        AddEncounter(0x22, 0x03)
061A  013B        AddEncounter(0x22, 0x04)
062C  014D        AddEncounter(0x22, 0x05)
063E  015F        AddEncounter(0x22, 0x06)
0650  0171        RETURN

ITEMDENC_0C:
0652  0000        BEGIN
0655  0003        ax = HasItem(0x54)
0663  0011        If (result.equal) jump to 0041
0665  0013        AddTreasure(0x012C, 0x00, 0x00, 0x00, 0x00, 0xB6)
0684  0032        ShowMessage(0x0BDF) = Phantasms creep into the empty cell.
0691  003F        Jump to 006D
0693  0041        AddTreasure(0x07D0, 0x00, 0x00, 0x00, 0x00, 0x54)
06B2  0060        ShowMessage(0x0C04) = Spirits of the dead guard their precious treasure.
06BF  006D        ax = PartyCount()
06C7  0075        compare(ax, 0x0001)
06CA  0078        If (result.equal) jump to 0087
06CC  007A        ax = PartyCount()
06D4  0082        compare(ax, 0x0002)
06D7  0085        If (result.notequal) jump to 00AE
06D9  0087        AddEncounter(0x27, 0x01)
06EB  0099        AddEncounter(0x28, 0x02)
06FD  00AB        Jump to 0171
0700  00AE        ax = PartyCount()
0708  00B6        compare(ax, 0x0003)
070B  00B9        If (result.notequal) jump to 0105
070D  00BB        AddEncounter(0x27, 0x01)
071F  00CD        AddEncounter(0x28, 0x02)
0731  00DF        AddEncounter(0x27, 0x03)
0743  00F1        AddEncounter(0x28, 0x04)
0755  0103        Jump to 0171
0757  0105        AddEncounter(0x27, 0x01)
0769  0117        AddEncounter(0x27, 0x02)
077B  0129        AddEncounter(0x27, 0x03)
078D  013B        AddEncounter(0x27, 0x04)
079F  014D        AddEncounter(0x28, 0x05)
07B1  015F        AddEncounter(0x28, 0x06)
07C3  0171        RETURN

STRMNSTR_0D:
07C5  0000        BEGIN
07C8  0003        ax = PartyCount()
07D0  000B        compare(ax, 0x0001)
07D3  000E        If (result.equal) jump to 001D
07D5  0010        ax = PartyCount()
07DD  0018        compare(ax, 0x0002)
07E0  001B        If (result.notequal) jump to 0056
07E2  001D        AddEncounter(0x1F, 0x01)
07F4  002F        AddEncounter(0x1F, 0x02)
0806  0041        AddEncounter(0x1D, 0x03)
0818  0053        Jump to 012B
081B  0056        ax = PartyCount()
0823  005E        compare(ax, 0x0003)
0826  0061        If (result.notequal) jump to 00BF
0828  0063        AddEncounter(0x1E, 0x01)
083A  0075        AddEncounter(0x1D, 0x02)
084C  0087        AddEncounter(0x1D, 0x03)
085E  0099        AddEncounter(0x1E, 0x04)
0870  00AB        AddEncounter(0x20, 0x05)
0882  00BD        Jump to 012B
0884  00BF        AddEncounter(0x1F, 0x01)
0896  00D1        AddEncounter(0x1F, 0x02)
08A8  00E3        AddEncounter(0x20, 0x03)
08BA  00F5        AddEncounter(0x20, 0x04)
08CC  0107        AddEncounter(0x1E, 0x05)
08DE  0119        AddEncounter(0x1E, 0x06)
08F0  012B        RETURN

AVEMNSTR_0E:
08F2  0000        BEGIN
08F5  0003        ax = PartyCount()
08FD  000B        compare(ax, 0x0001)
0900  000E        If (result.notequal) jump to 0037
0902  0010        AddEncounter(0x1A, 0x01)
0914  0022        AddEncounter(0x1B, 0x02)
0926  0034        Jump to 0176
0929  0037        ax = PartyCount()
0931  003F        compare(ax, 0x0002)
0934  0042        If (result.notequal) jump to 008F
0936  0044        AddEncounter(0x1B, 0x01)
0948  0056        AddEncounter(0x1B, 0x02)
095A  0068        AddEncounter(0x19, 0x03)
096C  007A        AddEncounter(0x19, 0x04)
097E  008C        Jump to 0176
0981  008F        ax = PartyCount()
0989  0097        compare(ax, 0x0003)
098C  009A        If (result.notequal) jump to 010A
098E  009C        AddEncounter(0x1B, 0x01)
09A0  00AE        AddEncounter(0x1B, 0x02)
09B2  00C0        AddEncounter(0x1B, 0x03)
09C4  00D2        AddEncounter(0x1B, 0x04)
09D6  00E4        AddEncounter(0x1A, 0x05)
09E8  00F6        AddEncounter(0x1A, 0x06)
09FA  0108        Jump to 0176
09FC  010A        AddEncounter(0x1C, 0x01)
0A0E  011C        AddEncounter(0x1C, 0x02)
0A20  012E        AddEncounter(0x1A, 0x03)
0A32  0140        AddEncounter(0x1A, 0x04)
0A44  0152        AddEncounter(0x1C, 0x05)
0A56  0164        AddEncounter(0x1C, 0x06)
0A68  0176        RETURN

LKPKDORA_0F:
0A6A  0000        BEGIN
0A6D  0003        ax = UsedItem(0xBF, 0xC4)
0A80  0016        If (result.notequal) jump to 0029
0A82  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0A8E  0024        compare(ax, 0x0002)
0A91  0027        If (result.below) jump to 0074
0A93  0029        Push(01)
0A97  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
0A9E  0034        Push(ax)
0A9F  0035        ax = GetNextTile()
0AA6  003C        Push(ax)
0AA7  003D        Move(stk[0], stk[1], stk[2])
0AB1  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
0AB8  004E        Push(ax)
0AB9  004F        ax = GetNextTile()
0AC0  0056        Push(ax)
0AC1  0057        Push(01)
0AC5  005B        SetUnblocked()
0ACF  0065        ShowMessage(0x0C37) = Your skill at picking locks soon has the door open.
0ADC  0072        Jump to 009E
0ADE  0074        Push(00)
0AE1  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
0AE8  007E        Push(ax)
0AE9  007F        ax = GetNextTile()
0AF0  0086        Push(ax)
0AF1  0087        Move(stk[0], stk[1], stk[2])
0AFB  0091        ShowMessage(0x0C6B) = The door is locked.
0B08  009E        RETURN

LKPKDORB_10:
0B0A  0000        BEGIN
0B0D  0003        ax = UsedItem(0xC0, 0xC4)
0B20  0016        If (result.notequal) jump to 0029
0B22  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0B2E  0024        compare(ax, 0x0004)
0B31  0027        If (result.below) jump to 0074
0B33  0029        Push(01)
0B37  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
0B3E  0034        Push(ax)
0B3F  0035        ax = GetNextTile()
0B46  003C        Push(ax)
0B47  003D        Move(stk[0], stk[1], stk[2])
0B51  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
0B58  004E        Push(ax)
0B59  004F        ax = GetNextTile()
0B60  0056        Push(ax)
0B61  0057        Push(01)
0B65  005B        SetUnblocked()
0B6F  0065        ShowMessage(0x0C7F) = The lock of the door clicks open.
0B7C  0072        Jump to 009E
0B7E  0074        Push(00)
0B81  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
0B88  007E        Push(ax)
0B89  007F        ax = GetNextTile()
0B90  0086        Push(ax)
0B91  0087        Move(stk[0], stk[1], stk[2])
0B9B  0091        ShowMessage(0x0CA1) = The door is locked.
0BA8  009E        RETURN

LKPKDORC_11:
0BAA  0000        BEGIN
0BAD  0003        ax = UsedItem(0xC2, 0xC4)
0BC0  0016        If (result.notequal) jump to 0029
0BC2  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0BCE  0024        compare(ax, 0x0007)
0BD1  0027        If (result.below) jump to 0074
0BD3  0029        Push(01)
0BD7  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
0BDE  0034        Push(ax)
0BDF  0035        ax = GetNextTile()
0BE6  003C        Push(ax)
0BE7  003D        Move(stk[0], stk[1], stk[2])
0BF1  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
0BF8  004E        Push(ax)
0BF9  004F        ax = GetNextTile()
0C00  0056        Push(ax)
0C01  0057        Push(01)
0C05  005B        SetUnblocked()
0C0F  0065        ShowMessage(0x0CB5) = You successfully pick the lock of the door.
0C1C  0072        Jump to 009E
0C1E  0074        Push(00)
0C21  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
0C28  007E        Push(ax)
0C29  007F        ax = GetNextTile()
0C30  0086        Push(ax)
0C31  0087        Move(stk[0], stk[1], stk[2])
0C3B  0091        ShowMessage(0x0CE1) = The door is locked.
0C48  009E        RETURN

LKPKDORD_12:
0C4A  0000        BEGIN
0C4D  0003        ax = UsedItem(0xC3, 0xC4)
0C60  0016        If (result.notequal) jump to 0029
0C62  0018        ax = UsedSkill(0x0E) // returns 0 if did not use, compares to 2nd op if did use
0C6E  0024        compare(ax, 0x0009)
0C71  0027        If (result.below) jump to 0074
0C73  0029        Push(01)
0C77  002D        ax = SetExitability(ax) // ax is usually 0 following equality check
0C7E  0034        Push(ax)
0C7F  0035        ax = GetNextTile()
0C86  003C        Push(ax)
0C87  003D        Move(stk[0], stk[1], stk[2])
0C91  0047        ax = SetExitability(ax) // ax is usually 0 following equality check
0C98  004E        Push(ax)
0C99  004F        ax = GetNextTile()
0CA0  0056        Push(ax)
0CA1  0057        Push(01)
0CA5  005B        SetUnblocked()
0CAF  0065        ShowMessage(0x0CF5) = The lock of the door is quickly opened by your skillfulness.
0CBC  0072        Jump to 009E
0CBE  0074        Push(00)
0CC1  0077        ax = SetExitability(ax) // ax is usually 0 following equality check
0CC8  007E        Push(ax)
0CC9  007F        ax = GetNextTile()
0CD0  0086        Push(ax)
0CD1  0087        Move(stk[0], stk[1], stk[2])
0CDB  0091        ShowMessage(0x0D32) = The door is locked.
0CE8  009E        RETURN

STRNDORA_13:
0CEA  0000        BEGIN
0CED  0003        ax = CheckStrength()
0CF9  000F        compare(ax, 0x000C)
0CFC  0012        If (result.below) jump to 005F
0CFE  0014        ShowMessage(0x0D46) = You manage to force the door open.
0D0B  0021        Push(01)
0D0F  0025        ax = SetExitability(ax) // ax is usually 0 following equality check
0D16  002C        Push(ax)
0D17  002D        ax = GetNextTile()
0D1E  0034        Push(ax)
0D1F  0035        Move(stk[0], stk[1], stk[2])
0D29  003F        ax = SetExitability(ax) // ax is usually 0 following equality check
0D30  0046        Push(ax)
0D31  0047        ax = GetNextTile()
0D38  004E        Push(ax)
0D39  004F        Push(01)
0D3D  0053        SetUnblocked()
0D47  005D        Jump to 0089
0D49  005F        ShowMessage(0x0D69) = The door is stuck shut.
0D56  006C        Push(00)
0D59  006F        ax = SetExitability(ax) // ax is usually 0 following equality check
0D60  0076        Push(ax)
0D61  0077        ax = GetNextTile()
0D68  007E        Push(ax)
0D69  007F        Move(stk[0], stk[1], stk[2])
0D73  0089        RETURN

STRDOORB_14:
0D75  0000        BEGIN
0D78  0003        ax = CheckStrength()
0D84  000F        compare(ax, 0x000F)
0D87  0012        If (result.below) jump to 005F
0D89  0014        ShowMessage(0x0D81) = The door flies open as you smash against it.
0D96  0021        ax = SetExitability(ax) // ax is usually 0 following equality check
0D9D  0028        Push(ax)
0D9E  0029        ax = GetNextTile()
0DA5  0030        Push(ax)
0DA6  0031        Push(01)
0DAA  0035        SetUnblocked()
0DB4  003F        Push(01)
0DB8  0043        ax = SetExitability(ax) // ax is usually 0 following equality check
0DBF  004A        Push(ax)
0DC0  004B        ax = GetNextTile()
0DC7  0052        Push(ax)
0DC8  0053        Move(stk[0], stk[1], stk[2])
0DD2  005D        Jump to 0089
0DD4  005F        ShowMessage(0x0DAE) = The door is stuck and will not open.
0DE1  006C        Push(00)
0DE4  006F        ax = SetExitability(ax) // ax is usually 0 following equality check
0DEB  0076        Push(ax)
0DEC  0077        ax = GetNextTile()
0DF3  007E        Push(ax)
0DF4  007F        Move(stk[0], stk[1], stk[2])
0DFE  0089        RETURN

STRDOORC_15:
0E00  0000        BEGIN
0E03  0003        ax = CheckStrength()
0E0F  000F        compare(ax, 0x0011)
0E12  0012        If (result.below) jump to 005F
0E14  0014        ShowMessage(0x0DD3) = You push hard on the door and it creaks open.
0E21  0021        ax = SetExitability(ax) // ax is usually 0 following equality check
0E28  0028        Push(ax)
0E29  0029        ax = GetNextTile()
0E30  0030        Push(ax)
0E31  0031        Push(01)
0E35  0035        SetUnblocked()
0E3F  003F        Push(01)
0E43  0043        ax = SetExitability(ax) // ax is usually 0 following equality check
0E4A  004A        Push(ax)
0E4B  004B        ax = GetNextTile()
0E52  0052        Push(ax)
0E53  0053        Move(stk[0], stk[1], stk[2])
0E5D  005D        Jump to 0089
0E5F  005F        ShowMessage(0x0E01) = The door refuses to open. It is stuck.
0E6C  006C        Push(00)
0E6F  006F        ax = SetExitability(ax) // ax is usually 0 following equality check
0E76  0076        Push(ax)
0E77  0077        ax = GetNextTile()
0E7E  007E        Push(ax)
0E7F  007F        Move(stk[0], stk[1], stk[2])
0E89  0089        RETURN

STRDOORD_16:
0E8B  0000        BEGIN
0E8E  0003        ax = CheckStrength()
0E9A  000F        compare(ax, 0x0014)
0E9D  0012        If (result.below) jump to 005F
0E9F  0014        ShowMessage(0x0E28) = You manage to open the door by brute strength.
0EAC  0021        ax = SetExitability(ax) // ax is usually 0 following equality check
0EB3  0028        Push(ax)
0EB4  0029        ax = GetNextTile()
0EBB  0030        Push(ax)
0EBC  0031        Push(01)
0EC0  0035        SetUnblocked()
0ECA  003F        Push(01)
0ECE  0043        ax = SetExitability(ax) // ax is usually 0 following equality check
0ED5  004A        Push(ax)
0ED6  004B        ax = GetNextTile()
0EDD  0052        Push(ax)
0EDE  0053        Move(stk[0], stk[1], stk[2])
0EE8  005D        Jump to 0089
0EEA  005F        ShowMessage(0x0E57) = You are not strong enough to force the door open.
0EF7  006C        Push(00)
0EFA  006F        ax = SetExitability(ax) // ax is usually 0 following equality check
0F01  0076        Push(ax)
0F02  0077        ax = GetNextTile()
0F09  007E        Push(ax)
0F0A  007F        Move(stk[0], stk[1], stk[2])
0F14  0089        RETURN

EMPTY:
0F16  0000        <Empty Function>

EMPTY:
0F1B  0000        <Empty Function>

EMPTY:
0F20  0000        <Empty Function>

EMPTY:
0F25  0000        <Empty Function>

EMPTY:
0F2A  0000        <Empty Function>

EMPTY:
0F2F  0000        <Empty Function>

EMPTY:
0F34  0000        <Empty Function>

EMPTY:
0F39  0000        <Empty Function>

EMPTY:
0F3E  0000        <Empty Function>

EMPTY:
0F43  0000        <Empty Function>

EMPTY:
0F48  0000        <Empty Function>

EMPTY:
0F4D  0000        <Empty Function>

EMPTY:
0F52  0000        <Empty Function>

EMPTY:
0F57  0000        <Empty Function>

EMPTY:
0F5C  0000        <Empty Function>

EMPTY:
0F61  0000        <Empty Function>

EMPTY:
0F66  0000        <Empty Function>

EMPTY:
0F6B  0000        <Empty Function>

EMPTY:
0F70  0000        <Empty Function>

EMPTY:
0F75  0000        <Empty Function>

EMPTY:
0F7A  0000        <Empty Function>

EMPTY:
0F7F  0000        <Empty Function>

EMPTY:
0F84  0000        <Empty Function>

EMPTY:
0F89  0000        <Empty Function>

EMPTY:
0F8E  0000        <Empty Function>

EMPTY:
0F93  0000        <Empty Function>

EMPTY:
0F98  0000        <Empty Function>

EMPTY:
0F9D  0000        <Empty Function>

EMPTY:
0FA2  0000        <Empty Function>

EMPTY:
0FA7  0000        <Empty Function>

EMPTY:
0FAC  0000        <Empty Function>

EMPTY:
0FB1  0000        <Empty Function>

EMPTY:
0FB6  0000        <Empty Function>

EMPTY:
0FBB  0000        <Empty Function>

EMPTY:
0FC0  0000        <Empty Function>

EMPTY:
0FC5  0000        <Empty Function>

EMPTY:
0FCA  0000        <Empty Function>

EMPTY:
0FCF  0000        <Empty Function>

EMPTY:
0FD4  0000        <Empty Function>

EMPTY:
0FD9  0000        <Empty Function>

EMPTY:
0FDE  0000        <Empty Function>

EMPTY:
0FE3  0000        <Empty Function>

EMPTY:
0FE8  0000        <Empty Function>

EMPTY:
0FED  0000        <Empty Function>

EMPTY:
0FF2  0000        <Empty Function>

EMPTY:
0FF7  0000        <Empty Function>

EMPTY:
0FFC  0000        <Empty Function>

EMPTY:
1001  0000        <Empty Function>

EMPTY:
1006  0000        <Empty Function>

EMPTY:
100B  0000        <Empty Function>

EMPTY:
1010  0000        <Empty Function>

EMPTY:
1015  0000        <Empty Function>

EMPTY:
101A  0000        <Empty Function>

EMPTY:
101F  0000        <Empty Function>

EMPTY:
1024  0000        <Empty Function>

EMPTY:
1029  0000        <Empty Function>

EMPTY:
102E  0000        <Empty Function>

EMPTY:
1033  0000        <Empty Function>

EMPTY:
1038  0000        <Empty Function>

EMPTY:
103D  0000        <Empty Function>

EMPTY:
1042  0000        <Empty Function>

EMPTY:
1047  0000        <Empty Function>

EMPTY:
104C  0000        <Empty Function>

EMPTY:
1051  0000        <Empty Function>

EMPTY:
1056  0000        <Empty Function>

EMPTY:
105B  0000        <Empty Function>

EMPTY:
1060  0000        <Empty Function>

EMPTY:
1065  0000        <Empty Function>

EMPTY:
106A  0000        <Empty Function>

EMPTY:
106F  0000        <Empty Function>

EMPTY:
1074  0000        <Empty Function>

EMPTY:
1079  0000        <Empty Function>

EMPTY:
107E  0000        <Empty Function>

EMPTY:
1083  0000        <Empty Function>

EMPTY:
1088  0000        <Empty Function>

EMPTY:
108D  0000        <Empty Function>

EMPTY:
1092  0000        <Empty Function>

EMPTY:
1097  0000        <Empty Function>

EMPTY:
109C  0000        <Empty Function>

EMPTY:
10A1  0000        <Empty Function>

EMPTY:
10A6  0000        <Empty Function>

EMPTY:
10AB  0000        <Empty Function>

EMPTY:
10B0  0000        <Empty Function>

EMPTY:
10B5  0000        <Empty Function>

EMPTY:
10BA  0000        <Empty Function>

EMPTY:
10BF  0000        <Empty Function>

EMPTY:
10C4  0000        <Empty Function>

EMPTY:
10C9  0000        <Empty Function>

EMPTY:
10CE  0000        <Empty Function>

EMPTY:
10D3  0000        <Empty Function>

EMPTY:
10D8  0000        <Empty Function>

EMPTY:
10DD  0000        <Empty Function>

EMPTY:
10E2  0000        <Empty Function>

EMPTY:
10E7  0000        <Empty Function>

EMPTY:
10EC  0000        <Empty Function>

EMPTY:
10F1  0000        <Empty Function>

EMPTY:
10F6  0000        <Empty Function>

EMPTY:
10FB  0000        <Empty Function>

EMPTY:
1100  0000        <Empty Function>

EMPTY:
1105  0000        <Empty Function>

EMPTY:
110A  0000        <Empty Function>

EMPTY:
110F  0000        <Empty Function>

EMPTY:
1114  0000        <Empty Function>

EMPTY:
1119  0000        <Empty Function>

EMPTY:
111E  0000        <Empty Function>

EMPTY:
1123  0000        <Empty Function>

EMPTY:
1128  0000        <Empty Function>

EMPTY:
112D  0000        <Empty Function>

EMPTY:
1132  0000        <Empty Function>

EMPTY:
1137  0000        <Empty Function>

EMPTY:
113C  0000        <Empty Function>

EMPTY:
1141  0000        <Empty Function>

EMPTY:
1146  0000        <Empty Function>

EMPTY:
114B  0000        <Empty Function>

EMPTY:
1150  0000        <Empty Function>

EMPTY:
1155  0000        <Empty Function>

EMPTY:
115A  0000        <Empty Function>

EMPTY:
115F  0000        <Empty Function>

EMPTY:
1164  0000        <Empty Function>

EMPTY:
1169  0000        <Empty Function>

EMPTY:
116E  0000        <Empty Function>

EMPTY:
1173  0000        <Empty Function>

EMPTY:
1178  0000        <Empty Function>

EMPTY:
117D  0000        <Empty Function>

EMPTY:
1182  0000        <Empty Function>

EMPTY:
1187  0000        <Empty Function>

EMPTY:
118C  0000        <Empty Function>

EMPTY:
1191  0000        <Empty Function>

EMPTY:
1196  0000        <Empty Function>

EMPTY:
119B  0000        <Empty Function>

EMPTY:
11A0  0000        <Empty Function>

EMPTY:
11A5  0000        <Empty Function>

EMPTY:
11AA  0000        <Empty Function>

EMPTY:
11AF  0000        <Empty Function>

EMPTY:
11B4  0000        <Empty Function>

EMPTY:
11B9  0000        <Empty Function>

EMPTY:
11BE  0000        <Empty Function>

EMPTY:
11C3  0000        <Empty Function>

EMPTY:
11C8  0000        <Empty Function>

EMPTY:
11CD  0000        <Empty Function>

EMPTY:
11D2  0000        <Empty Function>

EMPTY:
11D7  0000        <Empty Function>

EMPTY:
11DC  0000        <Empty Function>

EMPTY:
11E1  0000        <Empty Function>

EMPTY:
11E6  0000        <Empty Function>

EMPTY:
11EB  0000        <Empty Function>

EMPTY:
11F0  0000        <Empty Function>

EMPTY:
11F5  0000        <Empty Function>

EMPTY:
11FA  0000        <Empty Function>

EMPTY:
11FF  0000        <Empty Function>

EMPTY:
1204  0000        <Empty Function>

EMPTY:
1209  0000        <Empty Function>

EMPTY:
120E  0000        <Empty Function>

EMPTY:
1213  0000        <Empty Function>

EMPTY:
1218  0000        <Empty Function>

EMPTY:
121D  0000        <Empty Function>

EMPTY:
1222  0000        <Empty Function>

EMPTY:
1227  0000        <Empty Function>

EMPTY:
122C  0000        <Empty Function>

EMPTY:
1231  0000        <Empty Function>

EMPTY:
1236  0000        <Empty Function>

EMPTY:
123B  0000        <Empty Function>

EMPTY:
1240  0000        <Empty Function>

EMPTY:
1245  0000        <Empty Function>

EMPTY:
124A  0000        <Empty Function>

EMPTY:
124F  0000        <Empty Function>

EMPTY:
1254  0000        <Empty Function>

EMPTY:
1259  0000        <Empty Function>

EMPTY:
125E  0000        <Empty Function>

EMPTY:
1263  0000        <Empty Function>

EMPTY:
1268  0000        <Empty Function>

EMPTY:
126D  0000        <Empty Function>

EMPTY:
1272  0000        <Empty Function>

EMPTY:
1277  0000        <Empty Function>

EMPTY:
127C  0000        <Empty Function>

EMPTY:
1281  0000        <Empty Function>

EMPTY:
1286  0000        <Empty Function>

EMPTY:
128B  0000        <Empty Function>

EMPTY:
1290  0000        <Empty Function>

EMPTY:
1295  0000        <Empty Function>

EMPTY:
129A  0000        <Empty Function>

EMPTY:
129F  0000        <Empty Function>

EMPTY:
12A4  0000        <Empty Function>

EMPTY:
12A9  0000        <Empty Function>

EMPTY:
12AE  0000        <Empty Function>

EMPTY:
12B3  0000        <Empty Function>

EMPTY:
12B8  0000        <Empty Function>

EMPTY:
12BD  0000        <Empty Function>

EMPTY:
12C2  0000        <Empty Function>

EMPTY:
12C7  0000        <Empty Function>

EMPTY:
12CC  0000        <Empty Function>

EMPTY:
12D1  0000        <Empty Function>

EMPTY:
12D6  0000        <Empty Function>

EMPTY:
12DB  0000        <Empty Function>

EMPTY:
12E0  0000        <Empty Function>

EMPTY:
12E5  0000        <Empty Function>

EMPTY:
12EA  0000        <Empty Function>

EMPTY:
12EF  0000        <Empty Function>

EMPTY:
12F4  0000        <Empty Function>

EMPTY:
12F9  0000        <Empty Function>

EMPTY:
12FE  0000        <Empty Function>

EMPTY:
1303  0000        <Empty Function>

EMPTY:
1308  0000        <Empty Function>

EMPTY:
130D  0000        <Empty Function>

EMPTY:
1312  0000        <Empty Function>

EMPTY:
1317  0000        <Empty Function>

EMPTY:
131C  0000        <Empty Function>

EMPTY:
1321  0000        <Empty Function>

EMPTY:
1326  0000        <Empty Function>

EMPTY:
132B  0000        <Empty Function>

EMPTY:
1330  0000        <Empty Function>

EMPTY:
1335  0000        <Empty Function>

EMPTY:
133A  0000        <Empty Function>

EMPTY:
133F  0000        <Empty Function>

EMPTY:
1344  0000        <Empty Function>

EMPTY:
1349  0000        <Empty Function>

EMPTY:
134E  0000        <Empty Function>

EMPTY:
1353  0000        <Empty Function>

EMPTY:
1358  0000        <Empty Function>

EMPTY:
135D  0000        <Empty Function>

EMPTY:
1362  0000        <Empty Function>

EMPTY:
1367  0000        <Empty Function>

EMPTY:
136C  0000        <Empty Function>

EMPTY:
1371  0000        <Empty Function>

EMPTY:
1376  0000        <Empty Function>

EMPTY:
137B  0000        <Empty Function>

EMPTY:
1380  0000        <Empty Function>

EMPTY:
1385  0000        <Empty Function>

EMPTY:
138A  0000        <Empty Function>

EMPTY:
138F  0000        <Empty Function>

EMPTY:
1394  0000        <Empty Function>

EMPTY:
1399  0000        <Empty Function>

EMPTY:
139E  0000        <Empty Function>

STRINGS:
03FC: You encounter a Troll Cleric.
041A: I have almost despaired of finding a way out of this prison. Yet there must be an exit of some kind - stairs or teleport. The guards must have had some way of leaving this area.
04CC: To the east are the guard's living quarters and the interrogation rooms. The 36 prison cells are empty now, except for the resident spirits of those who perished here.
0574: The Troll Cleric bounces her head on the floor in frustration. She must be insane.
05C7: You encounter an Orc Ranger.
05E4: I have heard rumors that some few brave souls have escaped the dungeon. If you can find the Rainbow Bridge, you are near the exit.
0667: The Orc Ranger glares at you and refuses to speak.
069A: You encounter a Halfling Thief.
06BA: A special challenge awaits the brave. If you dare continue after finding what the guard Deldwinn desires, great rewards await you.
073D: Chaos should walk with Chaos and Harmony with Harmony to find the rewards.
0788: The Halfling Thief thumbs his nose at you and dashes off.
07C2: You encounter a Gnome Barbarian.
07E3: Two wizards have crafted a Challenge for the brave. The Wizards' Challenge is on this level, but you cannot reach it from this prison area.
086F: Know that race and Guild must walk together if the Challenge is to be overcome.
08BF: The Gnome Barbarian becomes distracted as he tries to twiddle his thumbs and instead gets them entangled.
0929: You encounter a Dwarf Wizard.
0947: King Cleowyn built his palace inside this volcano because he hoped to unearth the secrets of the wizard Arnakkian. Many of the stones that form Cleowyn's palace were taken from the wizard's castle. No wonder this dungeon is cursed.
0A2F: The Dwarf Wizard smiles kindly, but she refuses to speak.
0A69: There is a teleport in the west wall.
0A8F: Incubi haunt the empty prison cell.
0AB3: As you reach for a jacket lying on the floor, you see Incubi appear in the cell.
0B04: Leeches and Black Widows live in the cell.
0B2F: Just out of reach behind a mass of Leeches and Black Widows is a lockpick.
0B7A: Hell Wolves appear in the cell.
0B9A: A circle of Hell Wolves surrounds you and a mace lying on the floor.
0BDF: Phantasms creep into the empty cell.
0C04: Spirits of the dead guard their precious treasure.
0C37: Your skill at picking locks soon has the door open.
0C6B: The door is locked.
0C7F: The lock of the door clicks open.
0CA1: The door is locked.
0CB5: You successfully pick the lock of the door.
0CE1: The door is locked.
0CF5: The lock of the door is quickly opened by your skillfulness.
0D32: The door is locked.
0D46: You manage to force the door open.
0D69: The door is stuck shut.
0D81: The door flies open as you smash against it.
0DAE: The door is stuck and will not open.
0DD3: You push hard on the door and it creaks open.
0E01: The door refuses to open. It is stuck.
0E28: You manage to open the door by brute strength.
0E57: You are not strong enough to force the door open.
